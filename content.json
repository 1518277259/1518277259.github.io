{"meta":{"title":"ysp博客","subtitle":"风雨同路人","description":"对自己学习和生活的记录","author":"杨书平","url":"https://1518277259.github.io","root":"/"},"pages":[],"posts":[{"title":"Flex布局","slug":"Flex布局","date":"2022-03-29T06:37:18.000Z","updated":"2022-03-29T06:37:49.583Z","comments":true,"path":"2022/03/29/Flex布局/","link":"","permalink":"https://1518277259.github.io/2022/03/29/Flex%E5%B8%83%E5%B1%80/","excerpt":"","text":"","categories":[{"name":"CSS","slug":"CSS","permalink":"https://1518277259.github.io/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://1518277259.github.io/tags/CSS/"}]},{"title":"CSS高度塌陷","slug":"CSS高度塌陷","date":"2022-03-29T06:13:43.000Z","updated":"2022-03-29T06:36:57.585Z","comments":true,"path":"2022/03/29/CSS高度塌陷/","link":"","permalink":"https://1518277259.github.io/2022/03/29/CSS%E9%AB%98%E5%BA%A6%E5%A1%8C%E9%99%B7/","excerpt":"","text":"1.什么是高度塌陷当父元素不设置高度的时候，靠子元素撑大；当子元素浮动后，父元素的高度就会塌陷；父元素下面的元素就会向上移动，导致整个页面混乱。 1234&lt;div class=&quot;box1&quot;&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;box3&quot;&gt;&lt;/div&gt; 12345678910111213.box1 &#123; border: 10px red solid; &#125;.box2 &#123; width: 100px; height: 100px; background-color: blue; float: left; &#125;.box3 &#123; height: 100px; background-color: green; &#125; 2.解决方法方法一：给父元素设置高度，固定高度后父元素的高度无法适应子元素的高度。弊端： 不能让元素自适应 12345.box1 &#123; border: 10px red solid; height:100px; &#125; 方法二：&amp;emsp;&amp;emsp;给父元素设置overflow：hidden，解决高度塌陷并实现自适应，弊端： 只要里面的内容或元素超出父元素以外就会被隐藏。 1234.box1 &#123; border: 10px red solid; overflow: hidden; &#125; 方法三：在浮动元素下面添加一个空白元素，并给它设置一哈属性；弊端： 会添加很多空标记，增加结构负担，产生代码冗余 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box1 &#123; border: 10px red solid; &#125; .box2 &#123; width: 100px; height: 100px; background-color: blue; float: left; &#125; .clear_fix&#123; /*空白div的属性*/ clear:both; /*清除两侧浮动*/ height:0; overflow:hidden; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;box1&quot;&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;clear_fix&quot;&gt;&lt;/div&gt; /*添加空白div*/ &lt;/div&gt; &lt;/body&gt; 方法四：给父元素添加display:table；让父元素转换元素类型和表格一样弊端： 会改变当前元素的元素类型 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box1 &#123; border: 10px red solid; display: table; /* 改变元素类型为表格 */ &#125; .box2 &#123; width: 100px; height: 100px; background-color: blue; float: left; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;box1&quot;&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; 方法五：万能清除法通过after伪类元素添加一个空白的块元素，css添加下列属性，并给要清除的div加上clear_fix的类名，无副作用。 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box1 &#123; border: 10px red solid; &#125; .box2 &#123; width: 100px; height: 100px; background-color: blue; float: left; &#125; .clear_fix:after &#123; /* 要加的属性 */ content: &quot;&quot;; /* 添加内容 */ clear: both; /* 清楚两侧浮动 */ display: block; /* 转换元素类型为块元素 */ height: 0; overflow: hidden; /* 溢出隐藏属性 */ visibility: hidden;/* 隐藏属性 */ &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;box1 clear_fix&quot;&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://1518277259.github.io/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://1518277259.github.io/tags/CSS/"}]},{"title":"搭建博客网站","slug":"搭建博客网站","date":"2022-03-29T06:09:54.000Z","updated":"2022-03-29T06:11:48.546Z","comments":true,"path":"2022/03/29/搭建博客网站/","link":"","permalink":"https://1518277259.github.io/2022/03/29/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/","excerpt":"","text":"基础配置1234567npm i -g hexohexo initnpm i hexo-serverhexo-server 主题1.获取模板 1hexo.theme.getView(path); 设置模板 1hexo.theme.setView(path, data); 3.移除模板 1hexo.theme.removeView(path); 配置完成打包上传123hexo clean //删除上次打包hexo generate //打包hexo deploy /上传","categories":[{"name":"hexo","slug":"hexo","permalink":"https://1518277259.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://1518277259.github.io/tags/hexo/"}]},{"title":"字符串常用操作方法","slug":"字符串常用操作方法","date":"2022-03-29T06:05:28.000Z","updated":"2022-03-29T06:36:43.811Z","comments":true,"path":"2022/03/29/字符串常用操作方法/","link":"","permalink":"https://1518277259.github.io/2022/03/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/","excerpt":"","text":"一. length&amp;emsp;&amp;emsp; JS中的字符串有一个length属性，该属性可以用来获取字符串的长度 12const str = &quot;hello&quot;str.length //输出结果5 二.获取字符串指定位置的值 charAt() 方法获取到的是指定位置的字符 charCodeAt()方法获取的是指定位置字符的Unicode值 charAt() 12345const str = &quot;hello&quot;str.chatAt(1) // 输出结果：estr[1] // 输出结果：estr.charAt(5) // 输出结果：&quot;&quot;str[5] // 输出结果：undefine charCodeAt() 12let str = &quot;abcdefg&quot;console.log(str.charCodeAt(1)) // &quot;b&quot;--&gt; 98 三.检索字符串是否包含特定序列 indexOf() &amp;emsp;&amp;emsp;查找某个字符，有则返回第一次匹配到的位置，否则返回-1 123456789string.indexOf(searchvalue,fromindex)searchvalue:必需，规定需检索的字符串值fromindex：可选的整数参数，规定在字符串开始检索的位置。合法取值范围是0-string.length-1.如省略，则从字符串的首字符开始检索let str = &quot;abcdefgabc&quot;console.log(str.indexOf(&quot;a&quot;)) // 输出结果：0console.log(str.indexOf(&quot;z&quot;)) // 输出结果：-1console.log(str.indexOf(&quot;c&quot;,4)) //输出结果：9 lastIndexOf() &amp;emsp;&amp;emsp;查找某个字符，有则返回最后一次匹配的位置，否则返回-1 123let str = “abcabc”console.log(str.lastIndexOf(&quot;a&quot;)) // 输出结果：3console.log(str.lastIndexOf(&quot;z&quot;)) // 输出结果：-1 includes() &amp;emsp;&amp;emsp;该方法用于判断字符串是否包含指定的子字符串，如果找到指定的子字符串，返回true，否则返回false 123456789string.includes(searchvalue,start)searchvalue:必需，要查找的字符串start:可选，设置从那个位置开始查找，默认为0let str = &quot;Hello world&quot;str.includes(&quot;o&quot;) // 输出结果:truestr.includes(&quot;z&quot;) // 输出结果：falsestr.includes(&quot;e&quot;,2) // 输出结果：false startsWith() &amp;emsp;&amp;emsp;该方法用于检测字符串是否以指定的子字符串开始。如果是以指定的子字符串开头返回 true，否则 false。 123456let str = &#x27;Hello world!&#x27;;str.startsWith(&#x27;Hello&#x27;) // 输出结果：truestr.startsWith(&#x27;Helle&#x27;) // 输出结果：falsestr.startsWith(&#x27;wo&#x27;, 6) // 输出结果：true endsWith() &amp;emsp;&amp;emsp;该方法用来判断当前字符串是否是以指定的子字符串结尾。如果传入的子字符串在搜索字符串的末尾则返回 true，否则将返回 false。 12345678910string.endsWith(searchvalue, length)searchvalue：必需，要搜索的子字符串；length： 设置字符串的长度，默认值为原始字符串长度 string.length。let str = &#x27;Hello world!&#x27;;str.endsWith(&#x27;!&#x27;) // 输出结果：truestr.endsWith(&#x27;llo&#x27;) // 输出结果：falsestr.endsWith(&#x27;llo&#x27;, 5) // 输出结果：true 四、连接多个字符串concat()123456string.concat(string1, string2, ..., stringX)let str = &quot;abc&quot;;console.log(str.concat(&quot;efg&quot;)); //输出结果：&quot;abcefg&quot;console.log(str.concat(&quot;efg&quot;,&quot;hijk&quot;)); //输出结果：&quot;abcefghijk&quot; 五、字符串分割成数组split()&amp;emsp;&amp;emsp;用于把一个字符串分割成字符串数组，该方法不会改变原始字符串 12345678string.split(separator,limit)separator:必需。字符串或正则表达式，从该参数指定的位置分割stringlimit：可选，该参数可指定返回的数组的最大长度，如果设置了该参数，返回的子字符串不会多于这个参数指定的数组；如果没有设置该参数，整个字符串都会被分割，不考虑他的长度let str = &quot;abcdef&quot;;str.split(&quot;c&quot;); // 输出结果：[&quot;ab&quot;, &quot;def&quot;]str.split(&quot;&quot;, 4) // 输出结果：[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;] 六、截取字符串 slice() &amp;emsp;&amp;emsp;用于提取字符串的某一部分，并以新的字符串返回提取的部分,该方法返回的子串包括开始处的字符，但不包括结束处的字符。 1234567891011string.slice(start,end)start:必需，要截取的片段的起始下标，第一个字符串位置为0，如果为负数，则从尾部开始截取end: 可选，要截取的片段结尾的下标，若未指定此参数，则要提取的字串包含start到原字符串结尾的字符串。如果是负数，则从字符串的尾部开始算起的位置let str= &quot;abcdefg&quot;str.slice(1,6) // 输出结果：“bcdef”str.slice(1) // 输出结果：“bcdefg”str.slice() // 输出结果：“abcdefg”str.slice(-2) //输出结果：“fg”str.slice(6,1) //输出结果：&quot;&quot; 2.substr()&amp;emsp;&amp;emsp;用于在字符串中抽取从开始下标开始的指定数目的字符。 123456789string.substr(start,length)start:必需，要抽取的字串的起始下标。必须是数值。如果是负数，则该参数声明从字符串的尾部开始算起的位置length：可选，子串中字符数。如果省略了该参数，则返回从stringObject的开始位置到结尾的字串let str = &quot;abcdefg&quot;str.substr(1,6) //输出结果：“bcdefg”str.substr(1) // 输出结果：“bcdefg”str.substr(-1) //输出结果：“g” 3.substring()&amp;emsp;&amp;emsp;用于提取字符串中介于两个指定下标之间的字符 123456789101112string.substring(from,to)from:必需，一个非负的整数，规定要提取的子串的第一个字符在string的位置to：可选，一个非负的整数，比要提取的子串的最后一个字符在string中的位置多1。如省略，返回的子串会一直到字符串的结尾let str = &quot;abcdefg&quot;str.substring(1,6) //输出结果：“bcdef”str.substring(1) //输出结果：“bcdefg”str.substring() // 输出结果：“abcdefg”str.substring(6,1) // 输出结果：“bcdef”str.substring(-1) // 输出结果：&quot;abcdefg&quot; 七、字符串大小写转换 toLowerCase()&amp;emsp;&amp;emsp;用于把字符串转换成小写 12let str = &quot;adABDndj&quot;str.toLowerCase(); //输出结果：“adabdndj” 2.toUpperCase()&amp;emsp;&amp;emsp;用于将字符串转换成大写 12let str = “asdfGH”str.toUpperCase(); //输出结果：“ASDFGH” 八、字符串模式匹配1.replace()&amp;emsp;&amp;emsp;用于在字符串中用一些字符串替换名一些字符串，或者替换一个与正则表达式匹配的子串 1234567891011string.replace(searchvalue,newvalue)searchvalue:必需，规定子字符串或要替换的模式的RwgExp对象。如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换成RegExp对象newvalue：必需，一个字符串的值let str = “abcdef”str.replace(&quot;c&quot;,&quot;a&quot;) // 输出结果：abadeflet str=&quot;Mr Blue has a blue house and a blue car&quot;;str.replace(/blue/gi, &quot;red&quot;); // 输出结果：&#x27;Mr red has a red house and a red car&#x27; match() &amp;emsp;&amp;emsp;用于在字符串内检索特定的值，或找到一个或多个正则表达式的匹配 1234string.match(regexp)let str = &quot;abcdef&quot;console.log(str.match(&quot;c&quot;)) // // [&quot;c&quot;, index: 2, input: &quot;abcdef&quot;, groups: undefined] search() &amp;emsp;&amp;emsp;用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。只会返回第一次匹配成功的结果;如果没有找到任何匹配的子串，则返回 -1。 12345string.search(searchvalue)let str = &quot;abcdef&quot;;str.search(/bcd/) // 输出结果：1 九、移除字符串首尾空白符 trim() &amp;emsp;&amp;emsp;用于移除字符串首尾空白符，该方法不会改变原始字符串 123let str = &quot; abcdef &quot;str.trim() // 输出结果：&quot;abcdef&quot; trimStart() &amp;emsp;&amp;emsp;trimStart() 方法的的行为与trim()一致，不过会返回一个从原始字符串的开头删除了空白的新字符串，不会修改原始字符串： 123const s = &#x27; abc &#x27;;s.trimStart() // &quot;abc &quot; trimEnd() &amp;emsp;&amp;emsp;trimEnd() 方法的的行为与trim()一致，不过会返回一个从原始字符串的结尾删除了空白的新字符串，不会修改原始字符串： 1234const s = &#x27; abc &#x27;;s.trimEnd() // &quot; abc&quot; 十、获取字符串本身 valueOf() &amp;emsp;&amp;emsp;返回某个字符串对象的原始值，该方法通常由 JavaScript 自动进行调用，而不是显式地处于代码中。 12let str = &quot;abcdef&quot;console.log(str.valueOf()) // &quot;abcdef&quot; toString() &amp;emsp;&amp;emsp;返回字符串对象本身 12let str = &quot;abcdef&quot;console.log(str.toString()) // &quot;abcdef&quot; 十一、重复一个字符串repeat()&amp;emsp;&amp;emsp;返回一个新字符串，表示将原字符串重复n次： 123&#x27;x&#x27;.repeat(3) // 输出结果：&quot;xxx&quot;&#x27;hello&#x27;.repeat(2) // 输出结果：&quot;hellohello&quot;&#x27;na&#x27;.repeat(0) // 输出结果：&quot;&quot; 注意：如果参数是小数，向下取整；如果参数是负数或Infinity，会报错 十二、补齐字符串长度 padStart() &amp;emsp;&amp;emsp;用于头部补全。该方法有两个参数，其中第一个参数是一个数字，表示字符串补齐之后的长度；第二个参数是用来补全的字符串。 1234567&#x27;x&#x27;.padStart(1, &#x27;ab&#x27;) // &#x27;x&#x27;&#x27;x&#x27;.padStart(5, &#x27;ab&#x27;) // &#x27;ababx&#x27;&#x27;x&#x27;.padStart(4, &#x27;ab&#x27;) // &#x27;abax&#x27;&#x27;x&#x27;.padStart(4) // &#x27; x&#x27;&quot;1&quot;.padStart(3, &#x27;0&#x27;) // 输出结果： &#x27;001&#x27;&quot;15&quot;.padStart(3, &#x27;0&#x27;) // 输出结果： &#x27;015&#x27; padEnd() &amp;emsp;&amp;emsp;用于尾部补全。该方法也是接收两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串： 123&#x27;x&#x27;.padEnd(5, &#x27;ab&#x27;) // &#x27;xabab&#x27;&#x27;x&#x27;.padEnd(4, &#x27;ab&#x27;) // &#x27;xaba&#x27; 十三、字符串转为数字1.parseInt() &amp;emsp;&amp;emsp;用于可解析一个字符串，并返回一个整数 12345678910111213141516171819202122parseInt(string, radix)string:必需，要被解析的字符串radix：可选，表示要解析的数字的基数。parseInt(&quot;10&quot;); // 输出结果：10parseInt(&quot;17&quot;,8); // 输出结果：15 (8+7)parseInt(&quot;010&quot;); // 输出结果：10 或 8parseInt(&quot;0x10&quot;) // 输出结果：16parseInt(&quot;50&quot;, 1) // 输出结果：NaNparseInt(&quot;50&quot;, 40) // 输出结果：NaNparseInt(&quot;40 4years&quot;) // 输出结果：40parseInt(&quot;new100&quot;) // 输出结果：NaNparseInt(&quot; 60 &quot;) // 输出结果： 60 parseFloat(string) &amp;emsp;&amp;emsp;可解析一个字符串，并返回一个浮点数。该方法指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。 123456parseFloat(&quot;10.00&quot;) // 输出结果：10.00parseFloat(&quot;10.01&quot;) // 输出结果：10.01parseFloat(&quot;-10.01&quot;) // 输出结果：-10.01parseFloat(&quot;40.5 years&quot;) // 输出结果：40.5","categories":[{"name":"JS","slug":"JS","permalink":"https://1518277259.github.io/categories/JS/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://1518277259.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"数组Array的常用方法","slug":"数组Array的常用方法","date":"2022-03-29T03:36:26.000Z","updated":"2022-03-29T06:04:17.195Z","comments":true,"path":"2022/03/29/数组Array的常用方法/","link":"","permalink":"https://1518277259.github.io/2022/03/29/%E6%95%B0%E7%BB%84Array%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"","text":"Array.map()&amp;emsp;&amp;emsp;将数组中的每一个元素调用一个提供的函数，结果作为一个新的数组返回，并没有改变原来的数组 12345let arr = [1, 2, 3, 4, 5];let newArr = arr.map(x =&gt; x*2);// arr = [1, 2, 3, 4, 5] 原数组保持不变// newArr = [2, 4, 6, 8, 10] 返回新数组 Array.forEach()&amp;emsp;&amp;emsp;将数组中的每个元素执行传进提供的函数，没有返回值 12345let arr = [1, 2, 3, 4, 5];arr.forEach(x =&gt; x*2);console.log(arr)// arr = [1, 2, 3, 4, 5] 数组改变,注意和map区分 Array.filter()&amp;emsp;&amp;emsp;将所有元素进行判断，将满足条件的元素作为一个新的数组返回 1234let arr = [1, 2, 3, 4, 5];const isBigEnough = value =&gt; value &gt;= 3;let newArr = arr.filter(isBigEnough);// newNum = [3, 4, 5] 满足条件的元素返回为一个新的数组 Array.eveny()&amp;emsp;&amp;emsp;将所有的元素进行判断返回一个布尔值，如果所有元素都满足条件，返回true，否则返回false 123456let arr = [1, 2, 3, 4, 5];const isLessThan4 = value =&gt; value &lt; 4;const isLessThan6 = value =&gt; value &lt; 6;arr.every(isLessThan4); // falsearr.every(isLessThan6); // true Array.some()&amp;emsp;&amp;emsp;此方法是将所有元素进行判断返回一个布尔值，如果存在元素都满足判断条件，则返回true，若所有元素都不满足判断条件，则返回false。 123456let arr= [1, 2, 3, 4, 5];const isLessThan4 = value =&gt; value &lt; 4;const isLessThan6 = value =&gt; value &gt; 6;arr.some(isLessThan4); // truearr.some(isLessThan6); // false Array.reduce()&amp;emsp;&amp;emsp;所有元素调用返回函数，返回值为最终结果，传入的值必需是函数类型 1234567let arr = [1, 2, 3, 4, 5];const add = (a, b) =&gt; a + b;let sum = arr.reduce(add);// sum = 15 相当于累加的效果// 与之相对应的还有一个 Array.reduceRight() 方法，// 区别是这个是从右向左操作的 Array.push()&amp;emsp;&amp;emsp;在数组的后面添加元素，改变了数组的长度 123456var str1 = [12,2,&quot;hello&quot;];var str2 = [43,2,&quot;test&quot;];console.log(str1.push(&quot;你好&quot;)); // 4console.log(str2.push(&quot;hello&quot;,&quot;world&quot;)); // 5console.log(str1); // [12, 2, &quot;hello&quot;,&quot;你好&quot;]console.log(str2); // [43, 2, &quot;test&quot;,&quot;hello&quot;, &quot;world&quot;] Array.pop()&amp;emsp;&amp;emsp;在数组后面删除最后一位元素，并返回数组，改变了数组的长度 12345let arr = [1, 2, 3, 4, 5];arr.pop();console.log(arr); // [1, 2, 3, 4]console.log(arr.length); // 4 Array.shift()&amp;emsp;&amp;emsp;删除数组的第一个元素，并返回数组，改变数组的长度 12345let arr = [1, 2, 3, 4, 5];arr.shift();console.log(arr); // [2, 3, 4, 5]console.log(arr.length); // 4 Array.unshift()&amp;emsp;&amp;emsp;将一个或多个元素添加到数组的开头，并返回数组的长度 1234567var str1 = [12,2,&quot;hello&quot;];var str2 = [43,2,&quot;test&quot;];console.log(str1.unshift(&quot;你好&quot;)); // 4console.log(str2.unshift(&quot;hello&quot;,&quot;world&quot;)); // 5console.log(str1); // [&quot;你好&quot;, 12, 2, &quot;hello&quot;]console.log(str2); // [&quot;hello&quot;, &quot;world&quot;, 43, 2, &quot;test&quot;] Array.isArray()&amp;emsp;&amp;emsp;判断一个对象是不是数组，返回是布尔值 123let arr = [1, 2, 3, 4, 5];console.log(arr.isArray()); // true Array.concat()&amp;emsp;&amp;emsp;可以将多个数组拼成一个数组 1234let arr1 = [1, 2, 3];arr2 = [4, 5];let arr = arr1.concat(arr2);console.log(arr); // [1, 2, 3, 4, 5] Array.toString()&amp;emsp;&amp;emsp;将数组转换成字符串，不会改变原数组 123let arr = [1, 2, 3, 4, 5];let str = arr.toString();console.log(str); // 1,2,3,4,5 Array.join()&amp;emsp;&amp;emsp;将数组转成字符串并返回字符串数据，不会改变原来的数组 1234567let arr = [1, 2, 3, 4, 5];let str1 = arr.join();let str2 = arr.join(&#x27;,&#x27;);let str3 = arr.join(&#x27;##&#x27;);console.log(str1); // 12345console.log(str2); // 1,2,3,4,5console.log(str3); // 1##2##3##4##5 Array.splice()&amp;emsp;&amp;emsp;Array.splice(开始位置，删除的个数，元素)，万能方法，可以实现增删改 1234567let arr = [1, 2, 3, 4, 5];let arr1 = arr.splice(2, 0 &#x27;haha&#x27;);let arr2 = arr.splice(2, 3);let arr1 = arr.splice(2, 1 &#x27;haha&#x27;);console.log(arr1); // [1, 2, &#x27;haha&#x27;, 3, 4, 5] 新增一个元素console.log(arr2); // [1, 2] 删除三个元素console.log(arr3); // [1, 2, &#x27;haha&#x27;, 4, 5] 替换一个元素 Array.slice()&amp;emsp;&amp;emsp;此方法截取指定位置的数组，并返回截取的数组，不会改变原数组。 12345678var arr = [&quot;T1&quot;,&quot;J1&quot;,&quot;L1&quot;,&quot;L2&quot;,&quot;M1&quot;];console.log(arr.slice(1,3)); // [&quot;J1&quot;,&quot;L1&quot;]console.log(arr.slice(1)); // [&quot;J1&quot;,&quot;L1&quot;,&quot;L2&quot;,&quot;M1&quot;]console.log(arr.slice(-4,-1)); // [&quot;J1&quot;,&quot;L1&quot;,&quot;L2&quot;]console.log(arr.slice(-2)); // [&quot;L2&quot;,&quot;M1&quot;]console.log(arr.slice(1,-2)); // [&quot;J1&quot;,&quot;L1&quot;]console.log(arr); // [&quot;T1&quot;,&quot;J1&quot;,&quot;L1&quot;,&quot;L2&quot;,&quot;M1&quot;] Array.reverse()&amp;emsp;&amp;emsp;将数组的数据进行反转，并返回反转后的数组，会改变原数组 123var str1 = [12,2,&quot;hello&quot;];console.log(str1.reverse()); // [&quot;hello&quot;, 2, 12]console.log(str1); // [&quot;hello&quot;, 2, 12] Array.sort()&amp;emsp;&amp;emsp;将数组内的数据进行排序，并返回排过序的新数组，会改变原来的数组 1234567var str1 = [12,2,43,5,2,5];var str2 = [92,2,43,&quot;hello&quot;,&#x27;zoom&#x27;,5,2,5];console.log(str1.sort()); // [12, 2, 2, 43, 5, 5]console.log(str1); // [12, 2, 2, 43, 5, 5]console.log(str2.sort()); // [2, 2, 43, 5, 5, 92, &quot;abc&quot;, &quot;hello&quot;, &quot;zoom&quot;]console.log(str2); // [2, 2, 43, 5, 5, 92, &quot;abc&quot;, &quot;hello&quot;, &quot;zoom&quot;] Array.valueOf()&amp;emsp;&amp;emsp;返回数组的原始值，一般由js在后台调用，并不显示的出现在代码中 123456var str = [1,2,3];console.log(str.valueOf()); // [1,2,3]console.log(str); // [1,2,3]// 为了证明返回的是数组自身console.log(str.valueOf() == str); // true Array.IndexOf()&amp;emsp;&amp;emsp;此方法根据指定的数据，从左向右，查询在数组中出现的位置，如果不存在指定的数据，返回-1，找到了指定的数据返回该数据的索引 1234567var str = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;];console.log(str.indexOf(&quot;l&quot;)); // 2console.log(str.indexOf(&quot;l&quot;,3)); // 3console.log(str.indexOf(&quot;l&quot;,4)); // -1console.log(str.indexOf(&quot;l&quot;,-1)); // -1console.log(str.indexOf(&quot;l&quot;,-3)); // 2 Array.includes()&amp;emsp;&amp;emsp;用来判断一个数组是否包含一个指定的值，如果是返回true，否则返回false 1234let site = [&#x27;runoob&#x27;, &#x27;google&#x27;, &#x27;taobao&#x27;];console.log(site.includes(&#x27;runoob&#x27;)); // true console.log(site.includes(&#x27;baidu&#x27;)); // false Array.flat()&amp;emsp;&amp;emsp;用来实现数据的扁平化 1234let site = [1, 2, [3, 4]];console.log(arr1.flat());// [1, 2, 3, 4]","categories":[{"name":"JS","slug":"JS","permalink":"https://1518277259.github.io/categories/JS/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://1518277259.github.io/tags/%E5%89%8D%E7%AB%AF/"}]}],"categories":[{"name":"CSS","slug":"CSS","permalink":"https://1518277259.github.io/categories/CSS/"},{"name":"hexo","slug":"hexo","permalink":"https://1518277259.github.io/categories/hexo/"},{"name":"JS","slug":"JS","permalink":"https://1518277259.github.io/categories/JS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://1518277259.github.io/tags/CSS/"},{"name":"hexo","slug":"hexo","permalink":"https://1518277259.github.io/tags/hexo/"},{"name":"前端","slug":"前端","permalink":"https://1518277259.github.io/tags/%E5%89%8D%E7%AB%AF/"}]}