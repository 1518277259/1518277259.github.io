<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ysp博客</title>
  
  <subtitle>风雨同路人</subtitle>
  <link href="https://1518277259.github.io/atom.xml" rel="self"/>
  
  <link href="https://1518277259.github.io/"/>
  <updated>2023-03-02T13:31:21.251Z</updated>
  <id>https://1518277259.github.io/</id>
  
  <author>
    <name>杨书平</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器解析</title>
    <link href="https://1518277259.github.io/2023/02/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90/"/>
    <id>https://1518277259.github.io/2023/02/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-28T08:24:51.000Z</published>
    <updated>2023-03-02T13:31:21.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器解析"><a href="#浏览器解析" class="headerlink" title="浏览器解析"></a>浏览器解析</h1><h3 id="浏览器打开一个页面需要启动哪些进行"><a href="#浏览器打开一个页面需要启动哪些进行" class="headerlink" title="浏览器打开一个页面需要启动哪些进行"></a>浏览器打开一个页面需要启动哪些进行</h3><ol><li>浏览器进程：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</li><li>渲染进程：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li>GPU 进程：其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</li><li>网络进程：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</li><li>插件进程：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</li></ol><h3 id="渲染机制"><a href="#渲染机制" class="headerlink" title="渲染机制"></a>渲染机制</h3><ol><li>解析html，构建DOM树</li><li>解析CSS，生成CSSOM树</li><li>合并dom树和css规则树，生成render渲染树</li><li>根据render渲染树进行布局</li><li>调用GPU对渲染树进行绘制，合成图层，显示在屏幕上</li></ol><p><strong>注意：</strong></p><ol><li>浏览器在生成网页的过程中，至少渲染一次</li><li>在用户浏览的过程中，还会不断重新渲染 （render &#x3D; n+1）</li><li>在构建 CSSOM 树时，会阻塞渲染，直至 CSSOM树构建完成。并且构建 CSSOM 树是一个十分消耗性能的过程，所以应该尽量保证层级扁平，减少过度层叠，越是具体的 CSS 选择器，执行速度越慢</li><li>当 HTML 解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件。并且CSS也会影响 JS 的执行，只有当解析完样式表才会执行 JS，所以也可以认为这种情况下，CSS 也会暂停构建 DOM</li></ol><h3 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h3><h4 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h4><p>&amp;emsp;&amp;emsp;Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。</p><ol><li>注册Service Worker</li><li>监听到install事件以后就可以缓存需要的文件</li><li>在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存直接读取文件，否则就去请求数据。</li></ol><h4 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h4><p>&amp;emsp;&amp;emsp;内存中的缓存，主要包含的是当前页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。特点读取快，持续时间短，内容小导致存储数据小</p><h4 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h4><p>&amp;emsp;&amp;emsp;存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。</p><h4 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h4><p>&amp;emsp;&amp;emsp;Push Cache（推送缓存）是 HTTP&#x2F;2 中的内容，当以上三种缓存都没有命中时，它才会被使用。只在会话中存在，缓存时间短</p><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><h4 id="跨域问题的出现"><a href="#跨域问题的出现" class="headerlink" title="跨域问题的出现"></a>跨域问题的出现</h4><p>&amp;emsp;&amp;emsp;当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不一同，即跨域：</p><h4 id="同源策略的限制"><a href="#同源策略的限制" class="headerlink" title="同源策略的限制"></a>同源策略的限制</h4><ol><li>无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</li><li>无法接触非同源网页的 DOM</li><li>无法向非同源地址发送 AJAX 请求</li></ol><h4 id="跨域解决方法"><a href="#跨域解决方法" class="headerlink" title="跨域解决方法"></a>跨域解决方法</h4><ol><li>设置document.domain(此方案仅限主域相同，子域不同的跨域应用场景。)</li><li>window.postMessage()</li><li>JSONP（json with padding）</li><li>CORS 是跨域资源分享</li><li>websocket</li><li>Nginx反向代理</li></ol><h3 id="浏览器常见攻击方式"><a href="#浏览器常见攻击方式" class="headerlink" title="浏览器常见攻击方式"></a>浏览器常见攻击方式</h3><h4 id="XSS（跨站脚本攻击）"><a href="#XSS（跨站脚本攻击）" class="headerlink" title="XSS（跨站脚本攻击）"></a>XSS（跨站脚本攻击）</h4><p>&amp;emsp;&amp;emsp;XSS 攻击是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。</p><h4 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF(跨站请求伪造)"></a>CSRF(跨站请求伪造)</h4><p>&amp;emsp;&amp;emsp;CSRF 攻击就是利用了用户的登<br>录状态，并通过第三方的站点来做一些坏事。而且CSRF 攻击并不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击</p><h3 id="浏览器加载资源顺序"><a href="#浏览器加载资源顺序" class="headerlink" title="浏览器加载资源顺序"></a>浏览器加载资源顺序</h3><ol><li>最高级：html、css、font</li><li>js、xhr</li><li>图片、语音、视频</li><li>prefecth预加载的资源</li></ol><h3 id="浏览器输入url到页面展示出来的全过程"><a href="#浏览器输入url到页面展示出来的全过程" class="headerlink" title="浏览器输入url到页面展示出来的全过程"></a>浏览器输入url到页面展示出来的全过程</h3><ol><li>用户在浏览器中输入url地址</li><li>浏览器解析域名得到服务器ip地址</li><li>TCP三次握手建立客户端和服务器的连接</li><li>客户端发送HTTP请求获取服务器端的静态资源</li><li>服务器发送HTTP响应报文给客户端，客户端获取到页面静态资源</li><li>TCP四次挥手关闭客户端和服务器的连接</li><li>浏览器解析文档资源并渲染页面</li></ol><h3 id="渲染引擎什么情况下才会为特定的节点创建新的图层"><a href="#渲染引擎什么情况下才会为特定的节点创建新的图层" class="headerlink" title="渲染引擎什么情况下才会为特定的节点创建新的图层"></a>渲染引擎什么情况下才会为特定的节点创建新的图层</h3><ol><li>拥有层叠上下文属性的元素会被提升为单独的一层。</li><li>需要剪裁（clip）的地方也会被创建为图层。</li></ol><h3 id="定时器与requestAnimationFrame、requestIdleCallback"><a href="#定时器与requestAnimationFrame、requestIdleCallback" class="headerlink" title="定时器与requestAnimationFrame、requestIdleCallback"></a>定时器与requestAnimationFrame、requestIdleCallback</h3><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h4><p>&amp;emsp;&amp;emsp;执行该语句时，是立即把当前定时器代码推入事件队列，当定时器在事件列表中满足设置的时间值时将传入的函数加入任务队列，之后的执行就交给任务队列负责。但是如果此时任务队列不为空，则需等待，所以执行定时器内代码的时间可能会大于设置的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>); <span class="comment">// 2, 1</span></span><br></pre></td></tr></table></figure><h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h4><p>&amp;emsp;&amp;emsp;以指定周期调用函数，而setInterval则是每次都精确的隔一段时间推入一个事件（但是，事件的执行时间不一定就不准确，还有可能是这个事件还没执行完毕，下一个事件就来了）.</p><h4 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h4><p>&amp;emsp;&amp;emsp;requestAnimationFrame是浏览器用于定时循环操作的一个接口，类似于setTimeout，主要用途是按帧对网页进行重绘。</p><h4 id="requestIdleCallback"><a href="#requestIdleCallback" class="headerlink" title="requestIdleCallback()"></a>requestIdleCallback()</h4><p>&amp;emsp;&amp;emsp;requestIdleCallback则会在每次屏幕刷新时，判断当前帧是否还有多余的时间，如果有，则会调用requestAnimationFrame的回调函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器解析&quot;&gt;&lt;a href=&quot;#浏览器解析&quot; class=&quot;headerlink&quot; title=&quot;浏览器解析&quot;&gt;&lt;/a&gt;浏览器解析&lt;/h1&gt;&lt;h3 id=&quot;浏览器打开一个页面需要启动哪些进行&quot;&gt;&lt;a href=&quot;#浏览器打开一个页面需要启动哪些进行&quot; class</summary>
      
    
    
    
    <category term="面经" scheme="https://1518277259.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="浏览器" scheme="https://1518277259.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue和Rect的比较</title>
    <link href="https://1518277259.github.io/2023/02/20/Vue%E5%92%8CReact%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>https://1518277259.github.io/2023/02/20/Vue%E5%92%8CReact%E7%9A%84%E6%AF%94%E8%BE%83/</id>
    <published>2023-02-20T08:24:51.000Z</published>
    <updated>2023-03-02T12:38:45.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue和Rect的比较"><a href="#Vue和Rect的比较" class="headerlink" title="Vue和Rect的比较"></a>Vue和Rect的比较</h1><p>[toc]</p><h3 id="vue-和-react-在-虚拟dom的diff上，做了哪些改进使-速度更快？"><a href="#vue-和-react-在-虚拟dom的diff上，做了哪些改进使-速度更快？" class="headerlink" title="vue 和 react 在 虚拟dom的diff上，做了哪些改进使 速度更快？"></a>vue 和 react 在 虚拟dom的diff上，做了哪些改进使 速度更快？</h3><h4 id="1、传统diff"><a href="#1、传统diff" class="headerlink" title="1、传统diff"></a>1、传统diff</h4><p>&amp;emsp;&amp;emsp;计算两颗树形结构差异并进行转换，传统diff算法是这样做的：循环递归每一个节点 。传统diff算法复杂度达到O(n^3 )这意味着1000个节点就要进行数10亿次的比较，这是非常消耗性能的。</p><h4 id="2-vue的diff算法"><a href="#2-vue的diff算法" class="headerlink" title="2. vue的diff算法"></a>2. vue的diff算法</h4><p>diff算法发生在虚拟dom上,判断是否同一个节点：selector和key都要一样</p><p><strong>diff规则：</strong></p><ol><li>只比较同层的节点，不同层不做比较。删除原节点，并且新建插入更新节点（实际开发中很少遇到）</li><li>新旧节点是同层节点，但不是同一个节点，不做精细化比较。删除原节点，并且新建插入更新节点（实际开发中很少遇到）</li><li>新旧节点是同层节点，也是同一个节点，需要做精细化比较</li></ol><h4 id="3-react的diff算法"><a href="#3-react的diff算法" class="headerlink" title="3. react的diff算法"></a>3. react的diff算法</h4><p>&amp;emsp;&amp;emsp;从左往右依次对比，利用元素的index和标识lastIndex进行比较，如果满足index &lt; lastIndex就移动元素，删除和添加则各自按照规则调整,跨层不比较，同层比较，跟vue一样<br></p><p><strong>diff策略:</strong></p><ol><li>不满足 index &lt; lastIndex 的条件，不移动；满足 index &lt; lastIndex 的条件，移动节点。</li><li>每一次比较都需要重新设置 lastIndex&#x3D;(index,lastIndex)中的较大数</li><li>移动的节点在前一个被操作的节点后面</li><li>如果从新的节点集合获取的节点在旧节点集合未找到，就是新增，lastIndex为上一次的值不变</li><li>如果新的节点集合遍历完了，旧节点还有值就是删除，loop删除掉就行</li></ol><h4 id="4-对比"><a href="#4-对比" class="headerlink" title="4. 对比"></a>4. 对比</h4><p><strong>相同点：</strong><br><br>&amp;emsp;&amp;emsp;Vue和react的diff算法，都是不进行跨层级比较，只做同级比较。</p><p><strong>不同点：</strong><br></p><ol><li>Vue进行diff时，调用patch打补丁函数，一边比较一边给真实的DOM打补丁</li><li>Vue对比节点，当节点元素类型相同，但是className不同时，认为是不同类型的元素，删除重新创建，而react则认为是同类型节点，进行修改操作</li><li>&amp;emsp;&amp;emsp;① Vue的列表比对，采用从两端到中间的方式，旧集合和新集合两端各存在两个指针，两两进行比较，如果匹配上了就按照新集合去调整旧集合，每次对比结束后，指针向队列中间移动；<br><br>&amp;emsp;&amp;emsp;②而react则是从左往右依次对比，利用元素的index和标识lastIndex进行比较，如果满足index &lt; lastIndex就移动元素，删除和添加则各自按照规则调整；<br><br>&amp;emsp;&amp;emsp;③当一个集合把最后一个节点移动到最前面，react会把前面的节点依次向后移动，而Vue只会把最后一个节点放在最前面，这样的操作来看，Vue的diff性能是高于react的</li></ol><h3 id="vue-和-react-里的key的作用是什么-为什么不能用Index？用了会怎样-如果不加key会怎样"><a href="#vue-和-react-里的key的作用是什么-为什么不能用Index？用了会怎样-如果不加key会怎样" class="headerlink" title="vue 和 react 里的key的作用是什么? 为什么不能用Index？用了会怎样? 如果不加key会怎样?"></a>vue 和 react 里的key的作用是什么? 为什么不能用Index？用了会怎样? 如果不加key会怎样?</h3><h4 id="1-什么是key"><a href="#1-什么是key" class="headerlink" title="1.什么是key"></a>1.什么是key</h4><p>key是虚拟Dom对象的标识，在更新显示时key起着极其重要的作用。</p><h4 id="2-key的作用"><a href="#2-key的作用" class="headerlink" title="2.key的作用"></a>2.key的作用</h4><p>当Vue中data或React中state的数据发生变化时，react会根据新数据生成新的虚拟Dom，随后Vue&#x2F;React会对「新虚拟Dom」和「旧虚拟Dom」进行diff比较，比较规则如下：</p><ol><li>旧虚拟Dom中找到与新虚拟Dom相同的key：</li></ol><ul><li>若虚拟Dom中的内容没变，则直接使用之前的真实Dom</li><li>若虚拟Dom中的内容变了，则生成新的真实Dom，随后替换掉页面中之前的真实Dom</li></ul><ol start="2"><li>旧虚拟Dom中没有找到与新虚拟Dom相同的key：</li></ol><ul><li>根据数据创建新的真实Dom，随后渲染到页面</li></ul><h4 id="3-为什么遍历列表时，key最好不要用index"><a href="#3-为什么遍历列表时，key最好不要用index" class="headerlink" title="3.为什么遍历列表时，key最好不要用index"></a>3.为什么遍历列表时，key最好不要用index</h4><p>用index作为key，可能引发的问题如下：</p><ol><li>若对数据进行逆序添加，逆序删除等破坏顺序的操作，会产生虚拟DOM和旧的真实DOM中的部分key（甚至所有Key）都对不上的问题，接着会产生很多没有必要的真实DOM更新，渲染效率低下。</li><li>如果列表行结构中还包含输入类的DOM，则会产生错误的DOM更新，使得界面出现问题</li><li>如果只是数据单纯的展示，不做增删改，使用index也没关系</li></ol><h4 id="4-如果不加key会怎样"><a href="#4-如果不加key会怎样" class="headerlink" title="4.如果不加key会怎样?"></a>4.如果不加key会怎样?</h4><ol><li>当不带Key的时候，采用的是遍历的方式来对比新旧节点，从而达到更新节点的效果。</li><li>带key的时候使用的是map映射来更新节点。</li><li>在模板简单的时候使用就地复用（就是不使用key）效率会更高。</li><li>所以使用key并不意味着一定可以提高diff算法的效率。</li><li>key的作用主要是为每个节点设置一个唯一的标识，可以更快，更准确的拿到节点。</li><li>在一些情况下，还可以避免就地复用带来的副作用（表单数据错位）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue和Rect的比较&quot;&gt;&lt;a href=&quot;#Vue和Rect的比较&quot; class=&quot;headerlink&quot; title=&quot;Vue和Rect的比较&quot;&gt;&lt;/a&gt;Vue和Rect的比较&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h3 id=&quot;vue-和-react-在-虚拟</summary>
      
    
    
    
    <category term="vue" scheme="https://1518277259.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://1518277259.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue解析</title>
    <link href="https://1518277259.github.io/2023/02/20/Vue%E8%A7%A3%E6%9E%90/"/>
    <id>https://1518277259.github.io/2023/02/20/Vue%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-20T00:24:51.000Z</published>
    <updated>2023-03-02T13:06:19.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue解析"><a href="#Vue解析" class="headerlink" title="Vue解析"></a>Vue解析</h1><h3 id="Vue响应式原理"><a href="#Vue响应式原理" class="headerlink" title="Vue响应式原理"></a>Vue响应式原理</h3><p>&amp;emsp;&amp;emsp;vue响应式也叫作数据双向绑定，大致原理阐述：<br> 首先我们需要通过Object.defineProperty()方法把数据(data)设置为getter和setter的访问形式，这样我们就可以在数据被修改时在setter方法设置监视修改页面信息，也就是说每当数据被修改，就会触发对应的set方法，然后我们可以在set方法中去调用操作dom的方法。</p><p>&amp;emsp;&amp;emsp;vue实现数据响应式，是通过数据劫持侦测数据变化，发布订阅模式进行依赖收集与视图更新，换句话说是Observe，Watcher以及Compile三者相互配</p><ol><li>Observe实现数据劫持，递归给对象属性，绑定setter和getter函数，属性改变时，通知订阅者</li><li>Compile解析模板，把模板中变量换成数据，绑定更新函数，添加订阅者，收到通知就执行更新函数</li><li>Watcher作为Observe和Compile中间的桥梁，订阅Observe属性变化的消息，触发Compile更新函数</li></ol><h3 id="发布订阅模式和观察者模式的区别"><a href="#发布订阅模式和观察者模式的区别" class="headerlink" title="发布订阅模式和观察者模式的区别"></a>发布订阅模式和观察者模式的区别</h3><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>&amp;emsp;&amp;emsp;观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新。观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯。</p><p><strong>核心：</strong></p><ol><li>观察者(Watcher): 每个观察者必须有一个 update() 方法，当事件发生时，执行观察者的update()。观察者可以理解为发布&#x2F;订阅模式的订阅者。</li><li>目标(Dependency依赖)：可以理解为发布&#x2F;订阅模式的发布者</li></ol><h4 id="订阅发布模式"><a href="#订阅发布模式" class="headerlink" title="订阅发布模式"></a>订阅发布模式</h4><p>&amp;emsp;&amp;emsp;现在的发布订阅模式中，称为发布者的消息发送者不会将消息直接发送给订阅者，这意味着发布者和订阅者不知道彼此的存在。在发布者和订阅者之间存在第三个组件，称为调度中心或事件通道，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地分发它们给订阅者。</p><p><strong>核心：</strong></p><ol><li>订阅者</li><li>发布者</li><li>信号中心(事件中心)</li></ol><h3 id="VDom"><a href="#VDom" class="headerlink" title="VDom"></a>VDom</h3><p>&amp;emsp;&amp;emsp;VDom顾名思义就是虚拟的dom对象，它本身就是⼀个 JavaScript 对象，利用JS对象来表示真实DOM的树结构，创建一个虚拟的DOm对象</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><ol><li>将真实元素节点抽象成 VNode，有效减少直接操作 dom 次数，从而提高程序性能</li><li>方便实现跨平台</li><li>不再依赖 HTML 解析器进行模版解析，可以进行更多的 AOT 工作提高运行时效率：通过模版 AOT 编译，Vue 的运行时体积可以进一步压缩，运行时效率可以进一步提升；</li><li>可以渲染到 DOM 以外的平台，实现 SSR、同构渲染这些高级特性，Weex等框架应用的就是这一特性。</li><li>无需手动操作DOM</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>无法进行极致优化，在一些性能要求极高的应用中虚拟DOM无法进行针对性的极致优化</li><li>首次渲染大量DOM时，由于多了一层虚拟DOM计算，会比innerHTML插入慢</li></ol><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick()"></a>nextTick()</h3><p>&amp;emsp;&amp;emsp;Vue.nextTick用于延迟执行一段代码，它接受2个参数（回调函数和执行回调函数的上下文环境），如果没有提供回调函数，那么将返回promise对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defer a task to execute it asynchronously.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> nextTick = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> callbacks = []</span><br><span class="line">  <span class="keyword">let</span> pending = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> timerFunc</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">nextTickHandler</span> () &#123;</span><br><span class="line">    pending = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> copies = callbacks.<span class="title function_">slice</span>(<span class="number">0</span>)</span><br><span class="line">    callbacks.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; copies.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      copies[i]()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the nextTick behavior leverages the microtask queue, which can be accessed</span></span><br><span class="line">  <span class="comment">// via either native Promise.then or MutationObserver.</span></span><br><span class="line">  <span class="comment">// MutationObserver has wider support, however it is seriously bugged in</span></span><br><span class="line">  <span class="comment">// UIWebView in iOS &gt;= 9.3.3 when triggered in touch event handlers. It</span></span><br><span class="line">  <span class="comment">// completely stops working after triggering a few times... so, if native</span></span><br><span class="line">  <span class="comment">// Promise is available, we will use it:</span></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title function_">isNative</span>(<span class="title class_">Promise</span>)) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">logError</span> = err =&gt; &#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(err) &#125;</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      p.<span class="title function_">then</span>(nextTickHandler).<span class="title function_">catch</span>(logError)</span><br><span class="line">      <span class="comment">// in problematic UIWebViews, Promise.then doesn&#x27;t completely break, but</span></span><br><span class="line">      <span class="comment">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class="line">      <span class="comment">// microtask queue but the queue isn&#x27;t being flushed, until the browser</span></span><br><span class="line">      <span class="comment">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class="line">      <span class="comment">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span><br><span class="line">      <span class="keyword">if</span> (isIOS) <span class="built_in">setTimeout</span>(noop)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isIE &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class="line">    <span class="title function_">isNative</span>(<span class="title class_">MutationObserver</span>) ||</span><br><span class="line">    <span class="comment">// PhantomJS and iOS 7.x</span></span><br><span class="line">    <span class="title class_">MutationObserver</span>.<span class="title function_">toString</span>() === <span class="string">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class="line">  )) &#123;</span><br><span class="line">    <span class="comment">// use MutationObserver where native Promise is not available,</span></span><br><span class="line">    <span class="comment">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(nextTickHandler)</span><br><span class="line">    <span class="keyword">var</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter))</span><br><span class="line">    observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">      <span class="attr">characterData</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      counter = (counter + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line">      textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// fallback to setTimeout</span></span><br><span class="line">    <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(nextTickHandler, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">queueNextTick</span> (cb?: <span class="title class_">Function</span>, ctx?: <span class="title class_">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _resolve</span><br><span class="line">    callbacks.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          cb.<span class="title function_">call</span>(ctx)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">handleError</span>(e, ctx, <span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">        <span class="title function_">_resolve</span>(ctx)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">      pending = <span class="literal">true</span></span><br><span class="line">      <span class="title function_">timerFunc</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        _resolve = resolve</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol><li>beforeCreate：在实例被完成创建出来，el和data都没有初始化，不能访问data、method，一般在这个阶段不进行操作。</li><li>created：vue实例中的data、method已被初始化，属性也被绑定，但是此时还是虚拟dom，真是dom还没生成，$el 还不可用。</li><li>beforeMount：此时模板已经编译完成，但还没有被渲染至页面中（即为虚拟dom加载为真实dom），此时el存在则会显示el。</li><li>Mounted：此时模板已经被渲染成真实DOM，用户已经可以看到渲染完成的页面，页面的数据也是通过双向绑定显示data中的数据。</li><li>beforeUpdate：重新渲染之前触发，然后vue的虚拟dom机制会重新构建虚拟dom与上一次的虚拟dom树利用diff算法进行对比之后重新渲染。</li><li>updated：数据已经更改完成，dom也重新render完成。</li><li>beforeDestroy：销毁前执行（$destroy方法被调用的时候就会执行）,一般在这里善后:清除计时器、清除非指令绑定的事件等等…’)</li><li>destroyed：销毁后 （Dom元素存在，只是不再受vue控制）,卸载watcher，事件监听，子组件。</li></ol><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><ol><li>VueRouter ：路由器类，根据路由请求在路由视图中动态渲染选中的组件</li><li>router-link ：路由链接组件，声明用以提交路由请求的用户接口</li><li>router-view：路由视图组件，负责动态渲染路由选中的组件</li></ol><h4 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h4><h5 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递参数</span></span><br><span class="line"><span class="comment">// 1. 声明式</span></span><br><span class="line">&lt;router-link :to=<span class="string">&quot;/user/1&quot;</span>&gt; 跳转到匹配路由 &lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 编程式</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/child/$&#123;id&#125;&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Url传参方式"><a href="#Url传参方式" class="headerlink" title="Url传参方式"></a>Url传参方式</h5><ol><li>通过params显式传参</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由</span></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/child/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Child&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/components/Child&#x27;</span>)</span><br><span class="line">&#125;]</span><br><span class="line"><span class="comment">// 传递参数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/child/foo&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 接受参数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span> === foo</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还可以配置多个参数</span></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:name/hobby/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserComponent</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递参数:这里 username 对应[:name]， userHobby 对应[:id]</span></span><br><span class="line"><span class="comment">// 其它字段必须完全一致，否则无法匹配</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/userName/hobby/userHobby&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 接收参数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">name</span> === userName</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span> === userHobby</span><br></pre></td></tr></table></figure><ol start="2"><li>通过params隐式传参</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由</span></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/child&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Child&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/components/Child&#x27;</span>)</span><br><span class="line">&#125;]</span><br><span class="line"><span class="comment">// 传递参数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Child&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 接收参数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span> === <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>通过query传递参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由</span></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/child&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Child&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/components/Child&#x27;</span>)</span><br><span class="line">&#125;]</span><br><span class="line"><span class="comment">// 传递参数（通过 name 或者 path 来匹配路由)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/child&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 接收参数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">id</span> === <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h4><ol><li>导航被触发</li><li>在失活的组件里调用beforeRouteLeave 守卫</li><li>调用全局的beforeEnch守卫</li><li>在重用的组件中调用beforeRouteUpdate守卫</li><li>在路由组件配置中调用BeforEnter</li><li>解析异步路由组件</li><li>在激活的组件中调用beforeRouteEnter</li><li>调用全局的bbeforeResolve</li><li>导航被确认</li><li>调用全局的afterEach钩子</li><li>触发DOM更新</li><li>调用beforeRouteEnter守卫中传给next的回调函数，创建好的组件实例会作为回调函数的参数传入</li></ol><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>&amp;emsp;&amp;emsp;相当于一个公共仓库，保存着所有组件都能共用的数据</p><ol><li>state:保存所有数据，以对象的方式导出</li><li>mutations:保存所有方法，用来改变state的数据</li><li>actions:暴露给用户使用，借此触发mutations中的方法，保存数据（可执行异步操作）</li><li>gettings:获取数据</li></ol><h3 id="Vue3新特性"><a href="#Vue3新特性" class="headerlink" title="Vue3新特性"></a>Vue3新特性</h3><ol><li>compositionAPI（组合式API），代码组织更方便了, 逻辑复用更方便了 非常利于维护!</li><li>检测类型 ( 类型推导 Typescript 支持 )</li><li>ES6 的 proxy 替代了 ES5 的 Object.defineProperty</li><li>template 模板可以有多个根元素</li></ol><h4 id="compositionAPI"><a href="#compositionAPI" class="headerlink" title="compositionAPI"></a>compositionAPI</h4><ol><li>setup 中不能使用 this, this 指向 undefined</li><li>reactive函数：将复杂类型数据, 转换成响应式数据 </li><li>ref 函数：对传入的数据（一般简单数据类型），包裹一层对象, 转换成响应式。</li><li>toRef 函数：使用 toRef函数 , 将 reactive 函数的响应式对象中的指定属性转换为响应式数据</li><li>toRefs 函数：对一个 响应式对象 的所有内部属性, 都做响应式处理, 保证展开或者解构出的数据也是响应式的( 一般配合 reactive 使用)</li><li>computed 函数：computed 函数调用时, 要接收一个处理函数, 处理函数中, 需要返回计算属性的值</li></ol><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>&amp;emsp;&amp;emsp;keep-alive是用来缓存组件的，提供了两个activated与deactivated。</p><ol><li>include - 逗号分隔字符串或正则表达式或一个数组来表示。只有名称匹配的组件会被缓存。</li><li>exclude - 逗号分隔字符串或正则表达式或一个数组来表示。任何名称匹配的组件都不会被缓存。</li><li>max - 数字。最多可以缓存多少组件实例。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">  <span class="attr">abstract</span>: <span class="literal">true</span>,</span><br><span class="line"> </span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">include</span>: [<span class="title class_">String</span>, <span class="title class_">RegExp</span>, <span class="title class_">Array</span>],</span><br><span class="line">    <span class="attr">exclude</span>: [<span class="title class_">String</span>, <span class="title class_">RegExp</span>, <span class="title class_">Array</span>],</span><br><span class="line">    <span class="attr">max</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">keys</span> = []</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">cache</span>) &#123;</span><br><span class="line">      <span class="title function_">pruneCacheEntry</span>(<span class="variable language_">this</span>.<span class="property">cache</span>, key, <span class="variable language_">this</span>.<span class="property">keys</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$watch(<span class="string">&#x27;include&#x27;</span>, <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">pruneCache</span>(<span class="variable language_">this</span>, <span class="function"><span class="params">name</span> =&gt;</span> <span class="title function_">matches</span>(val, name))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.$watch(<span class="string">&#x27;exclude&#x27;</span>, <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">pruneCache</span>(<span class="variable language_">this</span>, <span class="function"><span class="params">name</span> =&gt;</span> !<span class="title function_">matches</span>(val, name))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/* 获取默认插槽中的第一个组件节点 */</span></span><br><span class="line">    <span class="keyword">const</span> slot = <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span></span><br><span class="line">    <span class="keyword">const</span> vnode = <span class="title function_">getFirstComponentChild</span>(slot)</span><br><span class="line">    <span class="comment">/* 获取该组件节点的componentOptions */</span></span><br><span class="line">    <span class="keyword">const</span> componentOptions = vnode &amp;&amp; vnode.<span class="property">componentOptions</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (componentOptions) &#123;</span><br><span class="line">      <span class="comment">/* 获取该组件节点的名称，优先获取组件的name字段，如果name不存在则获取组件的tag */</span></span><br><span class="line">      <span class="keyword">const</span> name = <span class="title function_">getComponentName</span>(componentOptions)</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">const</span> &#123; include, exclude &#125; = <span class="variable language_">this</span></span><br><span class="line">      <span class="comment">/* 如果name不在inlcude中或者存在于exlude中则表示不缓存，直接返回vnode */</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        (include &amp;&amp; (!name || !<span class="title function_">matches</span>(include, name))) ||</span><br><span class="line">        <span class="comment">// excluded</span></span><br><span class="line">        (exclude &amp;&amp; name &amp;&amp; <span class="title function_">matches</span>(exclude, name))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> vnode</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">const</span> &#123; cache, keys &#125; = <span class="variable language_">this</span></span><br><span class="line">      <span class="keyword">const</span> key = vnode.<span class="property">key</span> == <span class="literal">null</span></span><br><span class="line">        <span class="comment">// same constructor may get registered as different local components</span></span><br><span class="line">        <span class="comment">// so cid alone is not enough (#3269)</span></span><br><span class="line">        ? componentOptions.<span class="property">Ctor</span>.<span class="property">cid</span> + (componentOptions.<span class="property">tag</span> ? <span class="string">`::<span class="subst">$&#123;componentOptions.tag&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        : vnode.<span class="property">key</span></span><br><span class="line">      <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">        vnode.<span class="property">componentInstance</span> = cache[key].<span class="property">componentInstance</span></span><br><span class="line">        <span class="comment">// make current key freshest</span></span><br><span class="line">        <span class="title function_">remove</span>(keys, key)</span><br><span class="line">        keys.<span class="title function_">push</span>(key)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cache[key] = vnode</span><br><span class="line">        keys.<span class="title function_">push</span>(key)</span><br><span class="line">        <span class="comment">// prune oldest entry</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">max</span> &amp;&amp; keys.<span class="property">length</span> &gt; <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">max</span>)) &#123;</span><br><span class="line">          <span class="title function_">pruneCacheEntry</span>(cache, keys[<span class="number">0</span>], keys, <span class="variable language_">this</span>.<span class="property">_vnode</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      vnode.<span class="property">data</span>.<span class="property">keepAlive</span> = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vnode || (slot &amp;&amp; slot[<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="为什么访问data属性不需要带data"><a href="#为什么访问data属性不需要带data" class="headerlink" title="为什么访问data属性不需要带data"></a>为什么访问data属性不需要带data</h3><p>&amp;emsp;&amp;emsp;vue中访问属性代理 this.data.xxx 转换 this.xxx 的实现</p><h3 id="template预编译"><a href="#template预编译" class="headerlink" title="template预编译"></a>template预编译</h3><p>&amp;emsp;&amp;emsp;当vue进行打包时，会直接把组件中的模板转换为render函数，这叫做模板预编译</p><p><strong>好处：</strong> 运行时就不再需要编译模板了，提高了运行效率，打包结果中不再需要vue的编译代码，减少了打包体积</p><h3 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h3><p>&amp;emsp;&amp;emsp;diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记录的消息去局部更新Dom。</p><p><strong>特点：</strong> 同级比较，循环从两边向中间比较</p><h3 id="v-if-和v-show"><a href="#v-if-和v-show" class="headerlink" title="v-if 和v-show"></a>v-if 和v-show</h3><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>v-show严格意义来说其实是条件隐藏，直接在页面初始化的时候将DOM(对象模型)元素也初始化，因为它就是将它所在的元素添加一个display属性为none，如果条件符合就显示。</p><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>v-if严格意义来说就是条件判断，符合就加载DOM(对象模型)元素，不符合就不显示。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol><li>v-if有更高的切换性能，比如说需要判断多个条件时，就使用if。</li><li>如果需要频繁的切换，选择v-show，因为show是动态的改变样式，不需要增删DOM(对象模型)元素，大项目推荐使用show，能极大减少浏览器后期的操作性能。</li></ol><h3 id="v-for和v-if的优先级"><a href="#v-for和v-if的优先级" class="headerlink" title="v-for和v-if的优先级"></a>v-for和v-if的优先级</h3><ol><li>在vue2中，v-for的优先级是高于v-if，如果把它们放在一起，每次循环都会遍历整个列表，造成资源浪费。</li><li>在vue3中v-if的优先级高于v-for，会报错</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue解析&quot;&gt;&lt;a href=&quot;#Vue解析&quot; class=&quot;headerlink&quot; title=&quot;Vue解析&quot;&gt;&lt;/a&gt;Vue解析&lt;/h1&gt;&lt;h3 id=&quot;Vue响应式原理&quot;&gt;&lt;a href=&quot;#Vue响应式原理&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="面经" scheme="https://1518277259.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="vue" scheme="https://1518277259.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://1518277259.github.io/2023/02/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://1518277259.github.io/2023/02/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-02-19T02:24:51.000Z</published>
    <updated>2023-03-02T12:33:57.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>是用于创建重复的对象，同时又能保证性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> () &#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;marry&quot;</span>;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">const</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="title function_">sayName</span>();                                        <span class="comment">// marry</span></span><br><span class="line">person2.<span class="title function_">sayName</span>();                                        <span class="comment">// marry</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">sayName</span> === person2.<span class="property">sayName</span>);         <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式（Singleton Pattern）涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>特点：</strong></p><ol><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例模式</span></span><br><span class="line"><span class="keyword">let</span> box;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createBox</span> = (<span class="params">_a, _b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(!box)&#123;</span><br><span class="line">        box = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    box.<span class="property">a</span> = _a;</span><br><span class="line">    box.<span class="property">b</span> = _b;</span><br><span class="line">    <span class="keyword">return</span> box;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="title function_">createBox</span>(<span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">obj1; <span class="comment">// &#123;a: 3, b: 6&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title function_">createBox</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">obj1; <span class="comment">// &#123;a: 10, b: 20&#125;</span></span><br><span class="line">obj2; <span class="comment">// &#123;a: 10, b: 20&#125;</span></span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>根据不同的输入返回不同类的实例，一般用来创建同一类对象</p><p><strong>优点：</strong></p><ol><li>良好的封装，代码结构清晰，访问者无需知道对象的创建流程，特别是创建比较复杂的情况下；</li><li>扩展性优良，通过工厂方法隔离了用户和创建流程隔离，符合开放封闭原则；</li><li>解耦了高层逻辑和底层产品类，符合最少知识原则，不需要的就不要去交流；</li></ol><p><strong>缺点：</strong><br>&amp;emsp;&amp;emsp;带来了额外的系统复杂度，增加了抽象性；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饭店方法 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Restaurant</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getMenu</span>(<span class="params">menu</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (menu) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;鱼香肉丝&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">YuXiangRouSi</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;宫保鸡丁&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GongBaoJiDin</span>();</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;这个菜本店没有&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 鱼香肉丝类 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YuXiangRouSi</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;鱼香肉丝&#x27;</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; 真香&#x27;</span>) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 宫保鸡丁类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GongBaoJiDin</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;宫保鸡丁&#x27;</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; 让我想起了外婆做的菜&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> dish1 = <span class="title class_">Restaurant</span>.<span class="title function_">getMenu</span>(<span class="string">&#x27;鱼香肉丝&#x27;</span>);</span><br><span class="line">dish1.<span class="title function_">eat</span>();  </span><br><span class="line"><span class="comment">// 鱼香肉丝 真香</span></span><br><span class="line"><span class="keyword">const</span> dish2 = <span class="title class_">Restaurant</span>.<span class="title function_">getMenu</span>(<span class="string">&#x27;红烧排骨&#x27;</span>);</span><br><span class="line"><span class="comment">// Error 这个菜本店没有 </span></span><br></pre></td></tr></table></figure><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>&amp;emsp;&amp;emsp;通过对类的工厂抽象使其业务用于对产品类簇的创建，而不是负责创建某一类产品的实例。关键在于使用抽象类制定了实例的结构，调用者直接面向实例的结构编程，从实例的具体实现中解耦。</p><p><strong>优点：</strong><br>&amp;emsp;&amp;emsp;抽象产品类将产品的结构抽象出来，访问者不需要知道产品的具体实现，只需要面向产品的结构编程即可，从产品的具体实现中解耦；</p><p><strong>缺点：</strong></p><ol><li>扩展新类簇的产品类比较困难，因为需要创建新的抽象产品类，并且还要修改工厂类，违反开放封闭原则；</li><li>带来了系统复杂度，增加了新的类，和新的继承关系；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饭店 抽象类，饭店都可以做菜和汤</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractRestaurant</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.<span class="property">target</span> === <span class="title class_">AbstractRestaurant</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象类不能直接实例化!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">signborad</span> = <span class="string">&#x27;饭店&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象方法：创建菜</span></span><br><span class="line">    <span class="title function_">createDish</span>(<span class="params"></span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不能调用!&#x27;</span>) &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 抽象方法：创建汤</span></span><br><span class="line">    <span class="title function_">createSoup</span>(<span class="params"></span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不能调用!&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 饭店 具体类 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Restaurant</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbstractRestaurant</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; <span class="variable language_">super</span>() &#125;</span><br><span class="line">    <span class="title function_">createDish</span>(<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;鱼香肉丝&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">YuXiangRouSi</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;宫保鸡丁&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GongBaoJiDing</span>();</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;本店没这个菜&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">createSoup</span>(<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;紫菜蛋汤&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ZiCaiDanTang</span>();</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;本店没这个汤&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 菜 抽象类，菜都有吃的功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractDish</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.<span class="property">target</span> === <span class="title class_">AbstractDish</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象类不能直接实例化!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">kind</span> = <span class="string">&#x27;菜&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不能调用!&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 菜 鱼香肉丝类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YuXiangRouSi</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbstractDish</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;鱼香肉丝&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">kind</span> + <span class="string">&#x27; - &#x27;</span> + <span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; 真香~&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 菜 宫保鸡丁类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GongBaoJiDing</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbstractDish</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;宫保鸡丁&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">kind</span> + <span class="string">&#x27; - &#x27;</span> + <span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; 让我想起了外婆做的菜&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 汤 抽象类，汤都有喝的功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractSoup</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.<span class="property">target</span> === <span class="title class_">AbstractDish</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象类不能直接实例化!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">kind</span> = <span class="string">&#x27;汤&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="title function_">drink</span>(<span class="params"></span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不能调用!&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 汤 紫菜蛋汤类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZiCaiDanTang</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbstractSoup</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;紫菜蛋汤&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">drink</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">kind</span> + <span class="string">&#x27; - &#x27;</span> + <span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; 我从小喝到大&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> restaurant = <span class="keyword">new</span> <span class="title class_">Restaurant</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> soup1 = restaurant.<span class="title function_">createSoup</span>(<span class="string">&#x27;紫菜蛋汤&#x27;</span>);</span><br><span class="line">soup1.<span class="title function_">drink</span>();</span><br><span class="line"><span class="comment">// 汤 - 紫菜蛋汤 我从小喝到大</span></span><br><span class="line"><span class="keyword">const</span> dish1 = restaurant.<span class="title function_">createDish</span>(<span class="string">&#x27;鱼香肉丝&#x27;</span>);</span><br><span class="line">dish1.<span class="title function_">eat</span>();</span><br><span class="line"><span class="comment">// 菜 - 鱼香肉丝 真香</span></span><br><span class="line"><span class="keyword">const</span> dish2 = restaurant.<span class="title function_">createDish</span>(<span class="string">&#x27;红烧排骨&#x27;</span>);</span><br><span class="line"><span class="comment">// Error 本店没有这个</span></span><br></pre></td></tr></table></figure><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>用于分步构建一个复杂的对象，将一个复杂对象的 构建层与其表示层分离。若不是极其复杂的对象，应选择使用对象字面或工厂模式等方式创建对象。</p><p><strong>优点：</strong></p><ol><li>封装性好，创建和使用分离；</li><li>扩展性好，建造类之间独立、一定程度上解耦。</li></ol><p><strong>缺点:</strong></p><ol><li>产生多余的Builder对象；</li><li>产品内部发生变化，建造者都要修改，成本较大。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建造者，汽车部件厂家</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarBuilder</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">param</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">param</span> = param;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生产部件，part1 </span></span><br><span class="line">    <span class="title function_">buildPart1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">part1</span> = <span class="string">&#x27;part1&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生产部件，part2</span></span><br><span class="line">    <span class="title function_">buildPart2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">part2</span> = <span class="string">&#x27;part2&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 汽车装配，获得产品实例</span></span><br><span class="line"><span class="keyword">const</span> benchi1 = <span class="keyword">new</span> <span class="title class_">CarBuilder</span>(<span class="string">&#x27;param&#x27;</span>)</span><br><span class="line">.<span class="title function_">buildPart1</span>()</span><br><span class="line">.<span class="title function_">buildPart2</span>();</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(benchi1);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     param: &quot;param&quot;</span></span><br><span class="line"><span class="comment">//     part1: &quot;part1&quot;</span></span><br><span class="line"><span class="comment">//     part2: &quot;part2&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="结构性模式"><a href="#结构性模式" class="headerlink" title="结构性模式"></a>结构性模式</h2><h3 id="桥架模式"><a href="#桥架模式" class="headerlink" title="桥架模式"></a>桥架模式</h3><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。使用组合关系代替继承关系，降低抽象和实现两个可变维度的耦合度。</p><p><strong>优点：</strong></p><ol><li>分离了抽象和实现部分，将实现层（DOM 元素事件触发并执行具体修改逻辑）和抽象层（ 元素外观、尺寸部分的修改函数）解耦，有利于分层；</li><li>提高了可扩展性，多个维度的部件自由组合，避免了类继承带来的强耦合关系，也减少了部件类的数量；</li><li>使用者不用关心细节的实现，可以方便快捷地进行使用；</li></ol><p><strong>缺点：</strong></p><ol><li>桥接模式要求两个部件没有耦合关系，否则无法独立地变化，因此要求正确的对系统变化的维度进行识别，使用范围存在局限性；</li><li>桥接模式的引入增加了系统复杂度；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Boy</span>(<span class="params">instrument</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi, 我是男生&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 有一个功能叫playInstrument， 没有具体乐器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">playInstrument</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        instrument.<span class="title function_">play</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Girl</span>(<span class="params">instrument</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi, 我是女生&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 有一个功能叫playInstrument， 没有具体乐器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">playInstrument</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        instrument.<span class="title function_">play</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Piano</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">play</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;钢琴开始演奏&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Guitar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">play</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吉他开始演奏&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> piano = <span class="keyword">new</span> <span class="title class_">Piano</span>()</span><br><span class="line"><span class="keyword">let</span> guitar = <span class="keyword">new</span> <span class="title class_">Guitar</span>()</span><br><span class="line"><span class="keyword">let</span> pianoBoy = <span class="keyword">new</span> <span class="title class_">Boy</span>(piano)</span><br><span class="line">pianoBoy.<span class="title function_">playInstrument</span>()</span><br><span class="line"><span class="keyword">let</span> guitarGirl = <span class="keyword">new</span> <span class="title class_">Girl</span>(guitar)</span><br><span class="line">guitarGirl.<span class="title function_">playInstrument</span>()</span><br></pre></td></tr></table></figure><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>外观模式为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更容易。</p><p><strong>优点：</strong></p><ol><li>访问者不需要再了解子系统内部模块的功能，而只需和外观交互即可，使得访问者对子系统的 使用变得简单 ，符合最少知识原则，增强了可移植性和可读性；</li><li>减少了与子系统模块的直接引用，实现了访问者与子系统中模块之间的松耦合，增加了可维护性和可扩展性；</li><li>通过合理使用外观模式，可以帮助我们更好地划分系统访问层次，比如把需要暴露给外部的功能集中到外观中，这样既方便访问者使用，也很好地隐藏了内部的细节，提升了安全性；</li></ol><p><strong>缺点：</strong></p><ol><li>不符合开闭原则，对修改关闭，对扩展开放，如果外观模块出错，那么只能通过修改的方式来解决问题，因为外观模块是子系统的唯一出口；</li><li>不需要或不合理的使用外观会让人迷惑，过犹不及；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setBox</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> getId = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;isShow&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">show : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">getId.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;,</span><br><span class="line">hide : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">getId.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>运用共享技术来有效地支持大量细粒度对象的复用，以减少创建的对象的数量。通俗来讲，享元就是共享单元，比如现在流行的共享单车、共享充电宝等，他们的核心理念都是享元模式。</p><p><strong>优点：</strong></p><ol><li>由于减少了系统中的对象数量，提高了程序运行效率和性能，精简了内存占用，加快运行速度；</li><li>外部状态相对独立，不会影响到内部状态，所以享元对象能够在不同的环境被共享；</li></ol><p><strong>缺点：</strong></p><ol><li>引入了共享对象，使对象结构变得复杂；</li><li>共享对象的创建、销毁等需要维护，带来额外的复杂度（如果需要把共享对象维护起来的话）；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Upload</span> = <span class="keyword">function</span>(<span class="params">uploadType</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">uploadType</span> = uploadType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除文件（内部状态） */</span></span><br><span class="line"><span class="title class_">Upload</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">delFile</span> = <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  uploadManger.<span class="title function_">setExternalState</span>(id, <span class="variable language_">this</span>);  <span class="comment">// 把当前id对应的外部状态都组装到共享对象中</span></span><br><span class="line">  <span class="comment">// 大于3000k提示</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">fileSize</span> &lt; <span class="number">3000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">dom</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;确定要删除文件吗？&quot;</span> + <span class="variable language_">this</span>.<span class="property">fileName</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">dom</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 工厂对象实例化 </span></span><br><span class="line"><span class="comment"> *  如果某种内部状态的共享对象已经被创建过，那么直接返回这个对象</span></span><br><span class="line"><span class="comment"> *  否则，创建一个新的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UploadFactory</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> createdFlyWeightObjs = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">create</span>: <span class="keyword">function</span>(<span class="params">uploadType</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(createdFlyWeightObjs[uploadType]) &#123;</span><br><span class="line">        <span class="keyword">return</span> createdFlyWeightObjs[uploadType];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> createdFlyWeightObjs[uploadType] = <span class="keyword">new</span> <span class="title class_">Upload</span>(uploadType);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 管理器封装外部状态 */</span></span><br><span class="line"><span class="keyword">var</span> uploadManger = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> uploadDatabase = &#123;&#125;;</span><br><span class="line">​</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">id, uploadType, fileName, fileSize</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> flyWeightObj = <span class="title class_">UploadFactory</span>.<span class="title function_">create</span>(uploadType);</span><br><span class="line">      <span class="keyword">var</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      dom.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;span&gt;文件名称：&quot;</span> + fileName + <span class="string">&quot;，文件大小：&quot;</span> + fileSize +<span class="string">&quot;&lt;/span&gt;&quot;</span></span><br><span class="line">              + <span class="string">&quot;&lt;button class=&#x27;delFile&#x27;&gt;删除&lt;/button&gt;&quot;</span>;</span><br><span class="line">​</span><br><span class="line">      dom.<span class="title function_">querySelector</span>(<span class="string">&quot;.delFile&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        flyWeightObj.<span class="title function_">delFile</span>(id);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(dom);</span><br><span class="line">​</span><br><span class="line">      uploadDatabase[id] = &#123;</span><br><span class="line">        <span class="attr">fileName</span>: fileName,</span><br><span class="line">        <span class="attr">fileSize</span>: fileSize,</span><br><span class="line">        <span class="attr">dom</span>: dom</span><br><span class="line">      &#125;;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">return</span> flyWeightObj;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">setExternalState</span>: <span class="keyword">function</span>(<span class="params">id, flyWeightObj</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> uploadData = uploadDatabase[id];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> uploadData) &#123;</span><br><span class="line">        <span class="comment">// 直接改变形参（新思路！！）</span></span><br><span class="line">        flyWeightObj[i] = uploadData[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">​</span><br><span class="line"><span class="comment">/*触发上传动作*/</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">startUpload</span> = <span class="keyword">function</span>(<span class="params">uploadType, files</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,file; file = files[i++];) &#123;</span><br><span class="line">    <span class="keyword">var</span> uploadObj = uploadManger.<span class="title function_">add</span>(++id, uploadType, file.<span class="property">fileName</span>, file.<span class="property">fileSize</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line"><span class="comment">/* 测试 */</span></span><br><span class="line"><span class="title function_">startUpload</span>(<span class="string">&quot;plugin&quot;</span>, [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;1.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">1000</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;2.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">3000</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;3.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">5000</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br><span class="line"><span class="title function_">startUpload</span>(<span class="string">&quot;flash&quot;</span>, [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;4.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">1000</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;5.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">3000</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;6.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">5000</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><h3 id="组合模式-1"><a href="#组合模式-1" class="headerlink" title="组合模式"></a>组合模式</h3><h3 id="装饰器模式-1"><a href="#装饰器模式-1" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;创建型模式&quot;&gt;&lt;a href=&quot;#创建型模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式&quot;&gt;</summary>
      
    
    
    
    <category term="JS" scheme="https://1518277259.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>websocket解析</title>
    <link href="https://1518277259.github.io/2023/02/18/websocket%E8%A7%A3%E6%9E%90/"/>
    <id>https://1518277259.github.io/2023/02/18/websocket%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-18T02:24:51.000Z</published>
    <updated>2023-03-02T12:29:07.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="websocket解析"><a href="#websocket解析" class="headerlink" title="websocket解析"></a>websocket解析</h1><h3 id="什么是websocket"><a href="#什么是websocket" class="headerlink" title="什么是websocket"></a>什么是websocket</h3><ol><li>WebSocket是HTML5下一种新的协议（websocket协议本质上是一个基于tcp的协议）</li><li>它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯的目的</li><li>Websocket是一个持久化的协议</li></ol><h3 id="websocket的原理"><a href="#websocket的原理" class="headerlink" title="websocket的原理"></a>websocket的原理</h3><ol><li>websocket约定了一个通信的规范，通过一个握手的机制，客户端和服务器之间能建立一个类似tcp的连接，从而方便它们之间的通信</li><li>在websocket出现之前，web交互一般是基于http协议的短连接或者长连接</li><li>websocket是一种全新的协议，不属于http无状态协议，协议名为”ws”</li></ol><h3 id="websocket与http的关系"><a href="#websocket与http的关系" class="headerlink" title="websocket与http的关系"></a>websocket与http的关系</h3><h4 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h4><ol><li>都是基于tcp的，都是可靠性传输协议</li><li>都是应用层协议</li></ol><h4 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h4><ol><li>WebSocket是双向通信协议，模拟Socket协议，可以双向发送或接受信息</li><li>HTTP是单向的</li><li>WebSocket是需要浏览器和服务器握手进行建立连接的</li><li>http是浏览器发起向服务器的连接，服务器预先并不知道这个连接</li></ol><h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4><p>WebSocket在建立握手时，数据是通过HTTP传输的。但是建立之后，在真正传输时候是不需要HTTP协议的</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>首先，客户端发起http请求，经过3次握手后，建立起TCP连接；http请求里存放WebSocket支持的版本号等信息，如：Upgrade、Connection、WebSocket-Version等；</li><li>然后，服务器收到客户端的握手请求后，同样采用HTTP协议回馈数据；</li><li>最后，客户端收到连接成功的消息后，开始借助于TCP传输信道进行全双工通信。</li></ol><h3 id="JS-websocket实现"><a href="#JS-websocket实现" class="headerlink" title="JS websocket实现"></a>JS websocket实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Store</span> <span class="keyword">from</span> <span class="string">&quot;@/store&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebSocketClass</span> &#123;</span><br><span class="line">  <span class="comment">// 要连接的URL</span></span><br><span class="line">  url;</span><br><span class="line">  <span class="comment">// 一个协议字符串或一个协议字符串数组。</span></span><br><span class="line">  <span class="comment">// 这些字符串用来指定子协议，这样一个服务器就可以实现多个WebSocket子协议</span></span><br><span class="line">  protocols;</span><br><span class="line">  <span class="comment">// WebSocket 实例</span></span><br><span class="line">  ws;</span><br><span class="line">  <span class="comment">// 是否在重连中</span></span><br><span class="line">  isReconnectionLoading = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 延时重连的 id</span></span><br><span class="line">  timeId = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 是否是用户手动关闭连接</span></span><br><span class="line">  isCustomClose = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 错误消息队列</span></span><br><span class="line">  errorStack = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">url, protocols</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">url</span> = url;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">protocols</span> = protocols;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createWs</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createWs</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;WebSocket&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">      <span class="comment">// 实例化</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="variable language_">this</span>.<span class="property">url</span>, <span class="variable language_">this</span>.<span class="property">protocols</span>);</span><br><span class="line">      <span class="comment">// 监听事件</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">onopen</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">onerror</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">onclose</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">onmessage</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你的浏览器不支持 WebSocket&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听成功</span></span><br><span class="line">  <span class="title function_">onopen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onopen&quot;</span>);</span><br><span class="line">      <span class="comment">// 发送成功连接之前所发送失败的消息</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">errorStack</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">send</span>(message);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">errorStack</span> = [];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isReconnectionLoading</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听错误</span></span><br><span class="line">  <span class="title function_">onerror</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onerror</span> = <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err, <span class="string">&quot;onerror&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reconnection</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isReconnectionLoading</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听关闭</span></span><br><span class="line">  <span class="title function_">onclose</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onclose&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 用户手动关闭的不重连</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isCustomClose</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reconnection</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isReconnectionLoading</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接收 WebSocket 消息</span></span><br><span class="line">  <span class="title function_">onmessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title class_">Store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;user/setData&quot;</span>, event.<span class="property">data</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否连接中</span></span><br><span class="line">  <span class="title function_">isConnection</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重连</span></span><br><span class="line">  <span class="title function_">reconnection</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 防止重复</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isReconnectionLoading</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isReconnectionLoading</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timeId</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timeId</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createWs</span>();</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送消息</span></span><br><span class="line">  <span class="title function_">send</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="comment">// 连接失败时的处理</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">readyState</span> !== <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">errorStack</span>.<span class="title function_">push</span>(message);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">send</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动关闭</span></span><br><span class="line">  <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isCustomClose</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">close</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动开启</span></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isCustomClose</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reconnection</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 销毁</span></span><br><span class="line">  <span class="title function_">destroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">close</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">errorStack</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">WebSocketClass</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;websocket解析&quot;&gt;&lt;a href=&quot;#websocket解析&quot; class=&quot;headerlink&quot; title=&quot;websocket解析&quot;&gt;&lt;/a&gt;websocket解析&lt;/h1&gt;&lt;h3 id=&quot;什么是websocket&quot;&gt;&lt;a href=&quot;#什么是we</summary>
      
    
    
    
    <category term="websocket" scheme="https://1518277259.github.io/categories/websocket/"/>
    
    
    <category term="websocket" scheme="https://1518277259.github.io/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>webpack解析</title>
    <link href="https://1518277259.github.io/2023/02/17/webpack%E8%A7%A3%E6%9E%90/"/>
    <id>https://1518277259.github.io/2023/02/17/webpack%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-17T02:24:51.000Z</published>
    <updated>2023-03-02T12:15:57.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack解析"><a href="#webpack解析" class="headerlink" title="webpack解析"></a>webpack解析</h1><h2 id="webpack的理解"><a href="#webpack的理解" class="headerlink" title="webpack的理解"></a>webpack的理解</h2><p>webpack 是一个用于现代 JavaScript 应用程序的静态模块打包工具。我们可以使用webpack管理模块。因为在webpack看来，项目中的所有资源皆为模块，通过分析模块间的依赖关系，在其内部构建出一个依赖图，最终编绎输出模块为 HTML、JavaScript、CSS 以及各种静态文件（图片、字体等），让我们的开发过程更加高效。</p><h2 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h2><ol><li>模块打包：可以将不同模块的文件打包整合在一起，并且保证它们之间的引用正确，执行有序。利用打包我们就可以在开发的时候根据我们自己的业务自由划分文件模块，保证项目结构的清晰和可读性。</li><li>编译兼容：在前端的“上古时期”，手写一堆浏览器兼容代码一直是令前端工程师头皮发麻的事情，而在今天这个问题被大大的弱化了，通过webpack的Loader机制，不仅仅可以帮助我们对代码做polyfill，还可以编译转换诸如.less，.vue，.jsx这类在浏览器无法识别的格式文件，让我们在开发的时候可以使用新特性和新语法做开发，提高开发效率。</li><li>能力扩展:通过webpack的Plugin机制，我们在实现模块化打包和编译兼容的基础上，可以进一步实现诸如按需加载，代码压缩等一系列功能，帮助我们进一步提高自动化程度，工程效率以及打包输出的质量。</li></ol><h2 id="webpack的构建流程"><a href="#webpack的构建流程" class="headerlink" title="webpack的构建流程"></a>webpack的构建流程</h2><ol><li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</li><li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</li><li>确定入口：根据配置中的 entry 找出所有的入口文件</li><li>编译模块：从入口文件出发，调用所有配置的 loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li>完成模块编译：在经过上一步使用 loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li><li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ol><h2 id="常见的loader"><a href="#常见的loader" class="headerlink" title="常见的loader"></a>常见的loader</h2><ol><li>image-loader：加载并且压缩图片文件。</li><li>less-loader： 加载并编译 LESS 文件。</li><li>sass-loader：加载并编译 SASS&#x2F;SCSS 文件。</li><li>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性，使用css-loader必须要配合使用style-loader。</li><li>style-loader：用于将 CSS 编译完成的样式，挂载到页面的 style 标签上。需要注意 loader 执行顺序，style-loader 要放在第一位，loader 都是从后往前执行。</li><li>babel-loader：把 ES6 转换成 ES5</li><li>postcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀。</li><li>eslint-loader：通过 ESLint 检查 JavaScript 代码。</li><li>vue-loader：加载并编译 Vue 组件。</li><li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)</li><li>url-loader：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)</li></ol><h2 id="常见的plugin有哪些？"><a href="#常见的plugin有哪些？" class="headerlink" title="常见的plugin有哪些？"></a>常见的plugin有哪些？</h2><ol><li>HtmlWebpackPlugin：简化 HTML 文件创建 (依赖于 html-loader)</li><li>mini-css-extract-plugin: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代extract-text-webpack-plugin)</li><li>clean-webpack-plugin: 目录清理</li></ol><h2 id="loader和plugin的区别？"><a href="#loader和plugin的区别？" class="headerlink" title="loader和plugin的区别？"></a>loader和plugin的区别？</h2><p>&amp;emsp;&amp;emsp;loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中；<br><br>&amp;emsp;&amp;emsp;plugin赋予了webpack各种灵活的功能，例如打包优化、资源管理、环境变量注入等，目的是解决 loader无法实现的其他事。<br><br>&amp;emsp;&amp;emsp;在运行时机上，loader 运行在打包文件之前；plugin则是在整个编译周期都起作用。<br><br>&amp;emsp;&amp;emsp;在配置上，loader在module.rules中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性；plugin在 plugins中单独配置，类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入。</p><h2 id="webpack的热更新原理是？"><a href="#webpack的热更新原理是？" class="headerlink" title="webpack的热更新原理是？"></a>webpack的热更新原理是？</h2><p>&amp;emsp;&amp;emsp;模块热替换(HMR - hot module replacement)，又叫做热更新，在不需要刷新整个页面的同时更新模块，能够提升开发的效率和体验。热更新时只会局部刷新页面上发生了变化的模块，同时可以保留当前页面的状态，比如复选框的选中状态等。<br><br>&amp;emsp;&amp;emsp;热更新的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上webpack-dev-server与浏览器之间维护了一个websocket，当本地资源发生变化时，webpack-dev-server会向浏览器推送更新，并带上构建时的hash，让客户端与上一次资源进行对比。客户端对比出差异后会向webpack-dev-server发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向webpack-dev-server发起 jsonp 请求获取该chunk的增量更新。<br><br>&amp;emsp;&amp;emsp;后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader和vue-loader都是借助这些 API 实现热更新。</p><h2 id="如何提高webpack的构建速度？"><a href="#如何提高webpack的构建速度？" class="headerlink" title="如何提高webpack的构建速度？"></a>如何提高webpack的构建速度？</h2><ol><li>代码压缩</li></ol><ul><li>JS压缩：<br><br>&amp;emsp;&amp;emsp;webpack 4.0默认在生产环境的时候是支持代码压缩的，即mode&#x3D;production模式下。<br>实际上webpack 4.0默认是使用terser-webpack-plugin这个压缩插件，在此之前是使用 uglifyjs-webpack-plugin，两者的区别是后者对 ES6 的压缩不是很好，同时我们可以开启 parallel参数，使用多进程压缩，加快压缩。</li><li>CSS压缩<br><br>&amp;emsp;&amp;emsp;CSS 压缩通常是去除无用的空格等，因为很难去修改选择器、属性的名称、值等。可以使用另外一个插件：css-minimizer-webpack-plugin。<br></li><li>HTML压缩<br>&amp;emsp;&amp;emsp;使用HtmlWebpackPlugin插件来生成 HTML 的模板时候，通过配置属性minify进行 html 优化。</li></ul><ol start="2"><li>图片压缩:配置image-webpack-loader</li><li>Tree Shaking:</li><li>缩小打包域:<br><br>&amp;emsp;&amp;emsp;排除webpack不需要解析的模块，即在使用loader的时候，在尽量少的模块中去使用。可以借助 include和exclude这两个参数，规定loader只在那些模块应用和在哪些模块不应用。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;webpack解析&quot;&gt;&lt;a href=&quot;#webpack解析&quot; class=&quot;headerlink&quot; title=&quot;webpack解析&quot;&gt;&lt;/a&gt;webpack解析&lt;/h1&gt;&lt;h2 id=&quot;webpack的理解&quot;&gt;&lt;a href=&quot;#webpack的理解&quot; cla</summary>
      
    
    
    
    <category term="webpack" scheme="https://1518277259.github.io/categories/webpack/"/>
    
    
    <category term="webpack" scheme="https://1518277259.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>模块化方案</title>
    <link href="https://1518277259.github.io/2023/02/16/%E6%A8%A1%E5%9D%97%E5%8C%96%E6%96%B9%E6%A1%88/"/>
    <id>https://1518277259.github.io/2023/02/16/%E6%A8%A1%E5%9D%97%E5%8C%96%E6%96%B9%E6%A1%88/</id>
    <published>2023-02-16T01:34:55.000Z</published>
    <updated>2023-03-02T12:11:45.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模块化方案"><a href="#模块化方案" class="headerlink" title="模块化方案"></a>模块化方案</h3><h4 id="模块化优点"><a href="#模块化优点" class="headerlink" title="模块化优点"></a>模块化优点</h4><ol><li>可维护性：每个模块都是单独定义的，之间相互独立</li><li>命名空间：为了避免在JavaScript中的全局污染，我们通过模块化的方式利用函数作用域来构建命名空间</li><li>可复用</li></ol><h4 id="模块化方案-1"><a href="#模块化方案-1" class="headerlink" title="模块化方案"></a>模块化方案</h4><h5 id="揭示模块模式-Reveaing-Module"><a href="#揭示模块模式-Reveaing-Module" class="headerlink" title="揭示模块模式(Reveaing Module)"></a>揭示模块模式(Reveaing Module)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myRevealingModule = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> privateVar = “<span class="title class_">Ben</span> <span class="title class_">Cherry</span>”,</span><br><span class="line">  publicVar = “<span class="title class_">Hey</span> there!”;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">privateFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Name:&quot;</span> + privateVar );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">publicSetName</span>(<span class="params"> strName </span>) &#123;</span><br><span class="line">      privateVar = strName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">publicGetName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">privateFunction</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">setName</span>: publicSetName,</span><br><span class="line">      <span class="attr">greeting</span>: publicVar,</span><br><span class="line">      <span class="attr">getName</span>: publicGetName</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">myRevealingModule.<span class="title function_">setName</span>( “<span class="title class_">Paul</span> <span class="title class_">Kinlan</span>” );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><b>优点:</b> <br></p><ol><li>可以在任何地方实现（没有库，不需要语言支持）。</li><li>可以在单个文件中定义多个模块。</li></ol><p><b>缺点:</b> <br></p><ol><li>无法以编程方式导入模块（除非使用eval）。</li><li>需要手动处理依赖关系。</li><li>无法异步加载模块。<br>4。 循环依赖可能很麻烦。</li><li>很难通过静态代码分析器进行分析。</li></ol><hr><h5 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h5><p>CommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作(require 和 exports)</p><p><b>优点:</b> <br></p><ol><li>简单：开发人员可以在不查看文档的情况下掌握概念。</li><li>集成了依赖管理：模块需要其他模块并按所需顺序加载。</li><li>require可以在任何地方调用：模块可以通过编程方式加载。</li></ol><p><b>缺点:</b> <br></p><ol><li>同步API使其不适合某些用途（客户端）。</li><li>每个模块一个文件。</li><li>浏览器需要加载程序库或转换。</li><li>模块没有构造函数（Node支持）。</li><li>很难进行静态代码分析。<hr>##### AMD</li></ol><p>AMD规范则是异步加载模块，允许指定回调函数，通过返回一个对象做为模块对象</p><p><b>优点:</b> <br></p><ol><li>异步加载（更好的启动时间）。</li><li>支持循环依赖。</li><li>require和的兼容性exports。</li><li>完全整合了依赖管理。</li><li>如有必要，可以将模块拆分为多个文件。</li><li>支持构造函数。</li><li>插件支持（自定义加载步骤）。</li></ol><p><b>缺点:</b> <br></p><ol><li>语法稍微复杂一些。</li><li>除非编译，否则需要加载程序库。</li><li>很难分析静态代码。</li><li>除了异步加载以外，AMD的另一个优点是你可以在模块里使用对象、函数、构造函数、字符串、JSON或者别的数据类型，而CommonJS只支持对象。<h5 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h5></li></ol><p>统一模块定义（UMD：Universal Module Definition ）就是将 AMD 和 CommonJS<br>合在一起的一种尝试，常见的做法是将CommonJS 语法包裹在兼容 AMD 的代码中。</p><hr><h5 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h5><p>支持JavaScript标准化的ECMA团队决定解决模块问题，<br>兼容同步和异步操作模式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;模块化方案&quot;&gt;&lt;a href=&quot;#模块化方案&quot; class=&quot;headerlink&quot; title=&quot;模块化方案&quot;&gt;&lt;/a&gt;模块化方案&lt;/h3&gt;&lt;h4 id=&quot;模块化优点&quot;&gt;&lt;a href=&quot;#模块化优点&quot; class=&quot;headerlink&quot; title=&quot;模块化</summary>
      
    
    
    
    <category term="模块" scheme="https://1518277259.github.io/categories/%E6%A8%A1%E5%9D%97/"/>
    
    
    <category term="模块" scheme="https://1518277259.github.io/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Less解析</title>
    <link href="https://1518277259.github.io/2022/11/21/Less%E8%A7%A3%E6%9E%90/"/>
    <id>https://1518277259.github.io/2022/11/21/Less%E8%A7%A3%E6%9E%90/</id>
    <published>2022-11-21T08:24:51.000Z</published>
    <updated>2023-03-02T13:21:08.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="less解析"><a href="#less解析" class="headerlink" title="less解析"></a>less解析</h1><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="值变量"><a href="#值变量" class="headerlink" title="值变量"></a>值变量</h4><p>以 @ 开头 定义变量，并且使用时 直接 键入 @名称。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@color</span>: #<span class="number">999</span>;</span><br><span class="line"><span class="keyword">@bgColor</span>: skyblue;//不要添加引号</span><br><span class="line"><span class="keyword">@width</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: @color;</span><br><span class="line">  <span class="attribute">background</span>: @bgColor;</span><br><span class="line">  <span class="attribute">width</span>: @width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="选择器变量"><a href="#选择器变量" class="headerlink" title="选择器变量"></a>选择器变量</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="keyword">@mySelector</span>: #wrap;</span><br><span class="line"><span class="keyword">@Wrap</span>: wrap;</span><br><span class="line">@&#123;mySelector&#125;&#123; //变量名 必须使用大括号包裹</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line">.@&#123;Wrap&#125;&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line">#@&#123;Wrap&#125;&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="属性变量"><a href="#属性变量" class="headerlink" title="属性变量"></a>属性变量</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="keyword">@borderStyle</span>: border-style;</span><br><span class="line"><span class="keyword">@Soild</span>:solid;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  @&#123;borderStyle&#125;: @Soild;//变量名 必须使用大括号包裹</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="url变量"><a href="#url变量" class="headerlink" title="url变量"></a>url变量</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="keyword">@images</span>: <span class="string">&quot;../img&quot;</span>;//需要加引号</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;@&#123;images&#125;/dog.png&quot;</span>);//变量名 必须使用大括号包裹</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/dog.png&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="keyword">@background</span>: &#123;<span class="attribute">background</span>:red;&#125;;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="keyword">@background</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@Rules</span>:&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">  <span class="keyword">@Rules</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="变量运算"><a href="#变量运算" class="headerlink" title="变量运算"></a>变量运算</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="keyword">@width</span>:300px;</span><br><span class="line"><span class="keyword">@color</span>:#222;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:@width-<span class="number">20</span>;</span><br><span class="line">  <span class="attribute">height</span>:@width-<span class="number">20</span>*<span class="number">5</span>;</span><br><span class="line">  <span class="attribute">margin</span>:(@width-<span class="number">20</span>)*<span class="number">5</span>;</span><br><span class="line">  <span class="attribute">color</span>:@color*<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:@color + <span class="number">#111</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">280px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">1400px</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#444</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="keyword">@var</span>: @a;</span><br><span class="line"><span class="keyword">@a</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: @var;</span><br><span class="line">  <span class="keyword">@a</span>: <span class="number">9%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">9%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用变量去定义变量"><a href="#用变量去定义变量" class="headerlink" title="用变量去定义变量"></a>用变量去定义变量</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="keyword">@fnord</span>:  <span class="string">&quot;I am fnord.&quot;</span>;</span><br><span class="line"><span class="keyword">@var</span>:    <span class="string">&quot;fnord&quot;</span>;</span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: @@var; //将<span class="keyword">@var</span>替换为其值 <span class="attribute">content</span>:@fnord;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;I am fnord.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><h4 id="amp-的用法"><a href="#amp-的用法" class="headerlink" title="&amp;的用法"></a>&amp;的用法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#header</span>&#123;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;Less is more!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;_content&#123;//理解方式：直接把 &amp; 替换成 <span class="selector-id">#header</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#header</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;Less is more!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.title</span>&#123; //嵌套了</span><br><span class="line">  <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header_content</span>&#123;//没有嵌套！</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    //something...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@media</span> screen&#123;</span><br><span class="line">        <span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>)&#123;</span><br><span class="line">          <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> tv &#123;</span><br><span class="line">      <span class="attribute">width</span>:<span class="number">2000px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">maxwidth</span>:<span class="number">768px</span>)&#123;</span><br><span class="line">  <span class="selector-id">#main</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>:<span class="number">100px</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> tv&#123;</span><br><span class="line">  <span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">2000px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="混合方法"><a href="#混合方法" class="headerlink" title="混合方法"></a>混合方法</h3><h4 id="无参数方法"><a href="#无参数方法" class="headerlink" title="无参数方法"></a>无参数方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span>()&#123;</span><br><span class="line">  //something...</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="selector-class">.card</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>. 与 # 皆可作为 方法前缀。</li><li>方法后写不写 () 看个人习惯。</li></ol><h4 id="默认参数方法"><a href="#默认参数方法" class="headerlink" title="默认参数方法"></a>默认参数方法</h4><ol><li>Less 可以使用默认参数，如果 没有传参数，那么将使用默认参数。</li><li>@arguments 犹如 JS 中的 arguments 指代的是 全部参数。</li><li>传的参数中 必须带着单位。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.border</span>(<span class="keyword">@a</span>:10px,<span class="keyword">@b</span>:50px,<span class="keyword">@c</span>:30px,<span class="keyword">@color</span>:#000)&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> @color;</span><br><span class="line">    <span class="attribute">box-shadow</span>: @arguments;//指代的是 全部参数</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">0px</span>,<span class="number">5px</span>,<span class="number">30px</span>,red);//必须带着单位</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>;//等价于 <span class="selector-class">.border</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> red;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">0px</span>,<span class="number">5px</span>,<span class="number">30px</span>,red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">50px</span> <span class="number">30px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">50px</span> <span class="number">30px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="方法的匹配模式"><a href="#方法的匹配模式" class="headerlink" title="方法的匹配模式"></a>方法的匹配模式</h4><ol><li>第一个参数 left 要会找到方法中匹配程度最高的，如果匹配程度相同，将全部选择，并存在着样式覆盖替换。</li><li>如果匹配的参数 是变量，则将会匹配，如 @_ 。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.triangle</span>(<span class="attribute">top</span>,<span class="keyword">@width</span>:20px,<span class="keyword">@color</span>:#000)&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:transparent  transparent @color transparent ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(<span class="attribute">right</span>,<span class="keyword">@width</span>:20px,<span class="keyword">@color</span>:#000)&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:transparent @color transparent  transparent ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.triangle</span>(<span class="attribute">bottom</span>,<span class="keyword">@width</span>:20px,<span class="keyword">@color</span>:#000)&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:@color transparent  transparent  transparent ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(<span class="attribute">left</span>,<span class="keyword">@width</span>:20px,<span class="keyword">@color</span>:#000)&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:transparent  transparent  transparent @color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(<span class="keyword">@_</span>,<span class="keyword">@width</span>:20px,<span class="keyword">@color</span>:#000)&#123;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: @width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-class">.triangle</span>(<span class="attribute">left</span>, <span class="number">50px</span>, <span class="selector-id">#999</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent  transparent  transparent <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法的命名空间"><a href="#方法的命名空间" class="headerlink" title="方法的命名空间"></a>方法的命名空间</h4><ol><li>在 CSS 中&gt; 选择器，选择的是 儿子元素，就是 必须与父元素 有直接血源的元素。</li><li>在引入命令空间时，如使用 &gt; 选择器，父元素不能加 括号。</li><li>不得单独使用命名空间的方法 必须先引入命名空间，才能使用 其中方法。</li><li>子方法 可以使用上一层传进来的方法</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#card</span>()&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#723232</span>;</span><br><span class="line">    <span class="selector-class">.d</span>(<span class="keyword">@w</span>:300px)&#123;</span><br><span class="line">        <span class="attribute">width</span>: @w;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-id">#a</span>(<span class="keyword">@h</span>:300px)&#123;</span><br><span class="line">            <span class="attribute">height</span>: @h;//可以使用上一层传进来的方法</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="selector-id">#card</span> &gt; <span class="selector-class">.d</span> &gt; <span class="selector-id">#a</span>(<span class="number">100px</span>); // 父元素不能加 括号</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-id">#card</span> <span class="selector-class">.d</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">    //不得单独使用命名空间的方法</span><br><span class="line">    //<span class="selector-class">.d</span>() 如果前面没有引入命名空间 <span class="selector-id">#card</span> ，将会报错</span><br><span class="line">    </span><br><span class="line">    <span class="selector-id">#card</span>; // 等价于 <span class="selector-id">#card</span>();</span><br><span class="line">    <span class="selector-class">.d</span>(<span class="number">20px</span>); //必须先引入 <span class="selector-id">#card</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法的条件筛选"><a href="#方法的条件筛选" class="headerlink" title="方法的条件筛选"></a>方法的条件筛选</h4><ol><li>比较运算有： &gt; &gt;&#x3D; &#x3D; &#x3D;&lt; &lt;。</li><li>&#x3D; 代表的是等于</li><li>除去关键字 true 以外的值都被视为 false：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#card</span>&#123;</span><br><span class="line">    </span><br><span class="line">    // and 运算符 ，相当于 与运算 &amp;&amp;，必须条件全部符合才会执行</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="keyword">@width</span>,<span class="keyword">@color</span>,<span class="keyword">@style</span>) when (@<span class="attribute">width</span>&gt;<span class="number">100px</span>) <span class="keyword">and</span>(@<span class="attribute">color</span>=#<span class="number">999</span>)&#123;</span><br><span class="line">        <span class="attribute">border</span>:@style @color @width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // not 运算符，相当于 非运算 !，条件为 不符合才会执行</span><br><span class="line">    <span class="selector-class">.background</span>(<span class="keyword">@color</span>) when <span class="keyword">not</span> (@<span class="attribute">color</span>&gt;=#<span class="number">222</span>)&#123;</span><br><span class="line">        <span class="attribute">background</span>:@color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // , 逗号分隔符：相当于 或运算 ||，只要有一个符合条件就会执行</span><br><span class="line">    <span class="selector-class">.font</span>(<span class="keyword">@size</span>:20px) when (@size&gt;<span class="number">50px</span>) , (@size&lt;<span class="number">100px</span>)&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: @size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-id">#card</span>&gt;<span class="selector-class">.border</span>(<span class="number">200px</span>,<span class="selector-id">#999</span>,solid);</span><br><span class="line">    <span class="selector-id">#card</span> <span class="selector-class">.background</span>(<span class="selector-id">#111</span>);</span><br><span class="line">    <span class="selector-id">#card</span> &gt; <span class="selector-class">.font</span>(<span class="number">40px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:solid <span class="number">#999</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#111</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数量不定的参数"><a href="#数量不定的参数" class="headerlink" title="数量不定的参数"></a>数量不定的参数</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.boxShadow</span>(...)&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: @arguments;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.textShadow</span>(<span class="keyword">@a</span>,...)&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: @arguments;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-class">.boxShadow</span>(<span class="number">1px</span>,<span class="number">4px</span>,<span class="number">30px</span>,red);</span><br><span class="line">    <span class="selector-class">.textShadow</span>(<span class="number">1px</span>,<span class="number">4px</span>,<span class="number">30px</span>,red);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">4px</span> <span class="number">30px</span> red;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">4px</span> <span class="number">30px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法使用的important！"><a href="#方法使用的important！" class="headerlink" title="方法使用的important！"></a>方法使用的important！</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.border</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>() !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环方法"><a href="#循环方法" class="headerlink" title="循环方法"></a>循环方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.generate-columns</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.generate-columns</span>(<span class="keyword">@n</span>, @<span class="attribute">i</span>: <span class="number">1</span>) when (@i =&lt; @n) &#123;</span><br><span class="line">  <span class="selector-class">.column-</span>@&#123;<span class="selector-tag">i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: (@i * <span class="number">100%</span> / @n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.generate-columns</span>(<span class="keyword">@n</span>, (@i + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.column-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性拼接方法"><a href="#属性拼接方法" class="headerlink" title="属性拼接方法"></a>属性拼接方法</h4><p>+_ 代表的是 空格；+ 代表的是 逗号。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.boxShadow</span>() &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>+: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="selector-class">.boxShadow</span>();</span><br><span class="line">  <span class="attribute">box-shadow</span>+: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#555</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.Animation</span>() &#123;</span><br><span class="line">  <span class="attribute">transform</span>+_: <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="selector-class">.Animation</span>();</span><br><span class="line">  <span class="attribute">transform</span>+_: <span class="built_in">rotate</span>(<span class="number">15deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>) <span class="built_in">rotate</span>(<span class="number">15deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="extend-关键字使用"><a href="#extend-关键字使用" class="headerlink" title="extend 关键字使用"></a>extend 关键字使用</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.animation</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-out;</span><br><span class="line">    <span class="selector-class">.hide</span>&#123;</span><br><span class="line">      <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    &amp;:<span class="built_in">extend</span>(.animation);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">    &amp;:<span class="built_in">extend</span>(.animation .hide);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.animation</span>,<span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.animation</span> <span class="selector-class">.hide</span> , <span class="selector-id">#con</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="all-全局搜索替换"><a href="#all-全局搜索替换" class="headerlink" title="all 全局搜索替换"></a>all 全局搜索替换</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;Less is good!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>:<span class="built_in">extend</span>(#main all) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>,<span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span><span class="selector-pseudo">:after</span>, <span class="selector-id">#wrap</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;Less is good!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="减少代码的重复性"><a href="#减少代码的重复性" class="headerlink" title="减少代码的重复性"></a>减少代码的重复性</h4><ol><li>选择器和扩展之间 是允许有空格的：pre:hover :extend(div pre).</li><li>可以有多个扩展: pre:hover:extend(div pre):extend(.bucket tr) - 注意这与 pre:hover:extend(div pre, .bucket tr)一样。</li><li>这是不可以的，扩展必须在最后 : pre:hover:extend(div pre).nth-child(odd)。</li><li>如果一个规则集包含多个选择器，所有选择器都可以使用extend关键字。</li></ol><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><ol><li>导入 less 文件 可省略后缀</li><li>@import 的位置可随意放置</li><li>使用@import (reference)导入外部文件，但不会添加 把导入的文件 编译到最终输出中，只引用。</li><li>@import语句的默认行为。这表明相同的文件只会被导入一次，而随后的导入文件的重复代码都不会解析。</li><li>使用@import (multiple)允许导入多个同名文件。</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h4><ol><li>isnumber： 判断给定的值 是否 是一个数字。</li><li>iscolor： 判断给定的值 是否 是一个颜色</li><li>isurl：判断给定的值 是否 是一个 url 。</li></ol><h4 id="颜色操作"><a href="#颜色操作" class="headerlink" title="颜色操作"></a>颜色操作</h4><ol><li>saturate：增加一定数值的颜色饱和度。</li><li>lighten：增加一定数值的颜色亮度。</li><li>darken：降低一定数值的颜色亮度。</li><li>fade：给颜色设定一定数值的透明度。</li><li>mix：根据比例混合两种颜色。</li></ol><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><ol><li>ceil：向上取整。</li><li>floor：向下取整。</li><li>percentage： 将浮点数转换为百分比字符串。</li><li>round：四舍五入</li><li>sqrt：计算一个数的平方根。</li><li>abs：计算数字的绝对值，原样保持单位</li><li>pow：计算一个数的乘方。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;less解析&quot;&gt;&lt;a href=&quot;#less解析&quot; class=&quot;headerlink&quot; title=&quot;less解析&quot;&gt;&lt;/a&gt;less解析&lt;/h1&gt;&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="CSS" scheme="https://1518277259.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://1518277259.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS解析</title>
    <link href="https://1518277259.github.io/2022/10/03/JS%E8%A7%A3%E6%9E%90/"/>
    <id>https://1518277259.github.io/2022/10/03/JS%E8%A7%A3%E6%9E%90/</id>
    <published>2022-10-03T08:24:51.000Z</published>
    <updated>2023-03-02T13:29:52.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS解析"><a href="#JS解析" class="headerlink" title="JS解析"></a>JS解析</h1><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>string 、number、 boolean、null、undefine、symbol、bigInt</p><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><p>function、array、RegExp、Date、Math</p><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p>(一)普通函数的调用，this指向的是Window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;卡卡&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cat</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;有鱼&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">cat</span>(); <span class="comment">//卡卡</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(二)对象的方法，this指的是该对象</p><ol><li>一层作用域时，this指的是该对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;卡卡&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;有鱼&#x27;</span>,</span><br><span class="line">  <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">cat.<span class="title function_">eat</span>();<span class="comment">//有鱼</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>多层作用域时，this指的是距离方法最近的一层对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;卡卡&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;有鱼&#x27;</span>,</span><br><span class="line">  <span class="attr">eat1</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;年年&#x27;</span>,</span><br><span class="line">    <span class="attr">eat2</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">cat.<span class="property">eat1</span>.<span class="title function_">eat2</span>();<span class="comment">//年年</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> eat3 = cat.<span class="property">eat1</span>.<span class="property">eat2</span>;</span><br><span class="line"><span class="title function_">eat3</span>(); <span class="comment">// 卡卡</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(三)构造函数的调用，this指的是实例化的新对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;卡卡&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;有鱼&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;英短蓝猫&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat1);<span class="comment">// 实例化新对象 Cat &#123;name: &quot;有鱼&quot;, type: &quot;英短蓝猫&quot;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat1.<span class="property">name</span>);<span class="comment">// 有鱼</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（四）apply和call调用时，this指向参数中的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;有鱼&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;年年&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;高飞&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eat.<span class="title function_">call</span>(cat);<span class="comment">// 年年</span></span><br><span class="line">eat.<span class="title function_">call</span>(dog);<span class="comment">// 高飞</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（五）匿名函数调用，指向的是全局对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;卡卡&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;有鱼&#x27;</span>,</span><br><span class="line">  <span class="attr">eat</span>:(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line">cat.<span class="property">eat</span>; <span class="comment">//卡卡</span></span><br></pre></td></tr></table></figure><p>（六）定时器中调用，指向的是全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;卡卡&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cat = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;有鱼&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);<span class="comment">// 卡卡</span></span><br><span class="line">  <span class="built_in">clearInterval</span>(cat);</span><br><span class="line">&#125;,<span class="number">500</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（七）箭头函数调用</p><p>&amp;emsp;&amp;nbsp;如果箭头函数被非箭头函数包含，则this绑定的是最近一层非箭头函数的this，否则this的值则被设置为全局对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;若川&#x27;</span>,</span><br><span class="line">    <span class="attr">doSth</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// var self = this;</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title function_">arrowDoSth</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="comment">// console.log(self.name);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">arrowDoSth</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">arrowDoSth2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">student.<span class="title function_">doSth</span>(); <span class="comment">// &#x27;若川&#x27;</span></span><br><span class="line">student.<span class="title function_">arrowDoSth2</span>(); <span class="comment">// &#x27;window&#x27;</span></span><br></pre></td></tr></table></figure><p><em><strong>注意</strong></em></p><blockquote><p>①普通函数的调用，this指向的是window <br><br>②对象方法的调用，this指的是该对象，且是最近的对象<br><br>③构造函数的调用，this指的是实例化的新对象<br><br>④apply和call调用，this指向参数中的对象<br><br>⑤匿名函数的调用，this指向的是全局对象window<br><br>⑥定时器中的调用，this指向的是全局变量window<br><br>⑦.箭头函数被非箭头函数包含，则this绑定的是最近一层非箭头函数的this，否则this的值则被设置为全局对象<br><br>⑧.onclick和addEventerListener是指向绑定事件的元素（ev.currentTarget）<br></p></blockquote><h3 id="call、apply、bind的原理及实现"><a href="#call、apply、bind的原理及实现" class="headerlink" title="call、apply、bind的原理及实现"></a>call、apply、bind的原理及实现</h3><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>&amp;emsp;&amp;nbsp;改变当前函数this指向，并立即执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mycall</span> = <span class="keyword">function</span>(<span class="params">context,...args</span>)&#123;</span><br><span class="line">    context = (context == <span class="literal">null</span> || context == undefine)?<span class="attr">window</span>:<span class="keyword">new</span> <span class="title class_">Object</span>(context)</span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">    context.<span class="property">fn</span> = (...args)</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p>&amp;emsp;&amp;nbsp;将函数中的this指向传入的第一个参数，第二个为数组,和call方法作用相同，参数不同，立即执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myapply</span> = <span class="keyword">function</span>(<span class="params">context,args</span>)&#123;</span><br><span class="line">    context = (context == <span class="literal">null</span>|| context == undefine)?<span class="attr">window</span>:<span class="keyword">new</span> <span class="title class_">Object</span>(context)</span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span>(!args) <span class="keyword">return</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">let</span> r = <span class="built_in">eval</span>(<span class="string">&#x27;context.fn(&#x27;</span>+args+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>&amp;emsp;&amp;nbsp;bind() 方法创建一个新的函数，不自动执行，需要手动调用bind() 。这个新函数的 this 被指定为 bind()的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mybind</span> = <span class="keyword">function</span>(<span class="params">context,...args1</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fbind</span>(<span class="params">...args2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> that.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">instanceof</span> fbind? <span class="variable language_">this</span> :context,...args1,...args2)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">        fbind.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Fn</span>()</span><br><span class="line">        <span class="keyword">return</span> fbind</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>&amp;emsp;&amp;nbsp;变量提升是指在js代码执行过程中，js引擎把变量的声明部分和函数声明部分提升到代码开头的“行为”。变量被提升后，会给变量设置默认值undefined<br><br>&amp;emsp;&amp;nbsp;js在编译阶段的时候，会搜集所有的变量声明并且提前声明变量，而其他的语句都不会改变他们的顺序，因此，在编译阶段的时候，第一步就已经执行了，而第二步则是在执行阶段执行到该语句的时候才执行。</p><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><p>&amp;emsp;&amp;emsp;执行上下文是js代码执行的一个环境，存放了代码执行所需的变量，变量查找的作用域链规则以及this指向等。在编译阶段创建</p><ol><li>全局执行上下文：当进入全局代码时会进行编译，在编译中创建全局执行上下文，并生成可执行代码</li><li>函数执行上下文：执行代码的过程中，如果遇到函数调用，会编译函数内的代码和创建函数执行上下文，并创建可执行代码</li><li>eval执行上下文：：当使用eval函数的时候，eval的代码也会被编译，并创建执行上下文</li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ol><li>全局作用域：不在函数内部作用域和块级内部作用域外的作用域</li><li>函数作用域：在函数内部的作用域 </li><li>块级作用域：在花括号{}内部的作用域</li></ol><p><em><strong>注意：</strong></em></p><p>&amp;emsp;&amp;emsp;①对象的{}不属于块级作用域，像for(){},if(){},else{}，try{},cath(){}等等的花括号才是块级作用域<br><br>&amp;emsp;&amp;emsp;②对象的{}的作用域是什么作用域取决于对象所处的作用域，比如对象在全局作域 下定义的，那么对象的{}的作用域就是全局作用域</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>&amp;emsp;&amp;emsp;内部作用域访问外部作用域的变量，采取的是链式查找的方式来决定取哪个值，这种结构我们称为作用域链,采取就近原则的方式向上一级一级的作用域来查找变量值，最顶级是全局作用域，如果到全局作用域也没找值，那么就会报错。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>&amp;emsp;&amp;emsp;如果一个函数访问了此函数的父级及父级以上的作用域变量，那么这个函数就是一个闭包。即函数不在当前语法作用域中执行，而是在当前语法作用域外执行，但仍然保持对当前语法作用域的引用，这种引用叫闭包</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>被闭包函数访问的父级及以上的函数的局部变量（如范例中的局部变量 i ）会一直存在于内存中，不会被JS的垃圾回收机制回收。</li><li>闭包函数实现了对其他函数内部变量的访问。（函数内部的变量对外是无法访问的，闭包通过这种变通的方法，实现了访问。）</li></ol><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ol><li>访问函数内部的变量</li><li>让变量始终保持在内存中</li><li>使用不当会导致内存泄漏</li></ol><h3 id="new-的原理"><a href="#new-的原理" class="headerlink" title="new 的原理"></a>new 的原理</h3><ol><li>创建一个空对象作为返回实例</li><li>将这个空对象的原型，指向构造函数的prototype属性</li><li>将这个空对象赋值给构造函数内部的this关键字</li><li>开始执行构造函数内部的代码</li><li>返回这个对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn,...arg</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">        <span class="keyword">let</span> result = fn.<span class="title function_">apply</span>(obj,arg)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> result  === <span class="string">&#x27;object&#x27;</span> ? result : obj;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><p>&amp;emsp;&amp;emsp;在默认情况下，所有的原型对象都会自动获得一个 constructor（构造函数）属性，这个属性（是一个指针）指向 prototype 属性所在的函数<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person1.<span class="property">constructor</span> == <span class="title class_">Person</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Person</span></span><br><span class="line">person1.<span class="property">__proto__</span> == <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>  原型对象（Person.prototype）是 构造函数（Person）的一个实例。<br><br><a target="_blank" rel="noopener" href="https://www.jianshu.com/p/652991a67186">原型与原型链参考文章</a></p><h3 id="事件处理机制"><a href="#事件处理机制" class="headerlink" title="事件处理机制"></a>事件处理机制</h3><ol><li>捕获阶段：事件从window对象自上而下向目标节点传播的阶段；</li><li>目标阶段：真正的目标节点正在处理事件的阶段；</li><li>冒泡阶段：事件从目标节点自下而上向window对象传播的阶段。</li></ol><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>&amp;emsp;&amp;emsp;模块化开发是一种管理方式，一种生产方式，一种解决问题的方案。一个模块就是实现某个特定功能的文件，我们可以很方便的使用别人的代码，想要什么模块，就引入那个模块。<br></p><p> &amp;emsp;&amp;emsp;防止出现命名冲突，污染作用域等一系列问题</p><h3 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h3><p>&amp;emsp;&amp;emsp;迭代器对象本质上，就是一个指针对象。通过指针对象的next(), 用来移动指针。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="title class_">JavaScript</span> 原有的<span class="keyword">for</span>...<span class="keyword">in</span>循环，只能获得对象的键名，不能直接获取键值。<span class="title class_">ES6</span> 提供<span class="keyword">for</span>...<span class="keyword">of</span>循环，允许遍历获得键值。--&gt;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 0 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// a b c d</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>promise共有三种状态，pending,fulfilled,rejected</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义实现promise</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 当前状态</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span> <span class="comment">// 存储成功的值</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span> <span class="comment">// 存储失败的值</span></span><br><span class="line">  <span class="comment">// 利用发布订阅模式，让Promise支持异步</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onFulfilledFunc</span> = [] <span class="comment">// 存储成功的回调</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onRejectedFunc</span> = [] <span class="comment">// 存储失败的回调</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span> (value) &#123;</span><br><span class="line">   <span class="comment">// Promise对象已经由pending状态改变为了成功态（resolved）或是失败态（rejected）就不能再次更改状态了。因此我们在更新状态时要判断，如果当前状态是pending（等待态）才可更新</span></span><br><span class="line">   <span class="keyword">if</span> (_this.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">    _this.<span class="property">value</span> = value</span><br><span class="line">    <span class="comment">//依次执行成功回调</span></span><br><span class="line">    _this.<span class="property">onFulfilledFunc</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>(value))</span><br><span class="line">    _this.<span class="property">state</span> = <span class="string">&#x27;resolved&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span> (reason) &#123;</span><br><span class="line">   <span class="comment">// Promise对象已经由pending状态改变为了成功态（resolved）或是失败态（rejected）就不能再次更改状态了。因此我们在更新状态时要判断，如果当前状态是pending（等待态）才可更新</span></span><br><span class="line">   <span class="keyword">if</span> (_this.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">    _this.<span class="property">reason</span> = reason</span><br><span class="line">    <span class="comment">//依次执行失败回调</span></span><br><span class="line">    _this.<span class="property">onRejectedFunc</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>(reason))</span><br><span class="line">    _this.<span class="property">state</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">// 当实例化Promise时，构造函数中就要马上调用传入的executor函数执行</span></span><br><span class="line">   <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">   <span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> _resolvePromise (promise2, x, resolve, reject) &#123;</span><br><span class="line">  <span class="comment">// 如果返回了自己的Promise对象，状态永远为等待态（pending），再也无法成为resolved或是rejected，程序会死掉，因此首先要处理它</span></span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">   <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Promise存在循环引用&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span>)) &#123;</span><br><span class="line">   <span class="comment">// x可能是一个promise</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> then = x.<span class="property">then</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">     then.<span class="title function_">call</span>(x, <span class="function">(<span class="params">y</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">_resolvePromise</span>(promise2, y, resolve, reject)</span><br><span class="line">     &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="title function_">resolve</span>(x)</span><br><span class="line">    &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(err)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//否则是个普通值</span></span><br><span class="line">   <span class="title function_">resolve</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> then (onFulfilled, onRejected) &#123;</span><br><span class="line">  <span class="keyword">let</span> promise2</span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="keyword">function</span> (<span class="params">val</span>) &#123; <span class="keyword">return</span> val &#125;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="keyword">function</span> (<span class="params">reason</span>) &#123; <span class="keyword">throw</span> reason &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;resolved&#x27;</span>) &#123;</span><br><span class="line">   promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">     &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error)</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">   &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">   promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">     &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error)</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">   &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">   promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledFunc</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">_resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">       <span class="title function_">reject</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedFunc</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">_resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">       <span class="title function_">reject</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise2</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><h4 id="什么是Generator"><a href="#什么是Generator" class="headerlink" title="什么是Generator"></a>什么是Generator</h4><p>&amp;emsp;&amp;emsp;是ES6提供的一种异步编程解决方案，语法不同于普通函数；简单的把Generator 理解为一个状态机，封装了多个内部状态。执行Generator 函数会返回一个迭代器对象，可以通过调用迭代器next依次遍历Generator函数内部的每一个状态。</p><h4 id="Generator的特征"><a href="#Generator的特征" class="headerlink" title="Generator的特征"></a>Generator的特征</h4><ol><li>function关键字与函数名之间有个星号；</li><li>函数内部使用yield表达式</li></ol><h4 id="Generator的使用"><a href="#Generator的使用" class="headerlink" title="Generator的使用"></a>Generator的使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generateSequence</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> generator = <span class="title function_">generateSequence</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> one = generator.<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(one)); <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br></pre></td></tr></table></figure><h3 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><p>&amp;emsp;&amp;emsp;声明异步函数,遇到await会阻塞后面的代码，先执行async外面的同步代码，同步代码执行完，再回到async内部，继续执行await后面的代码。</p><p><strong><em>优缺点</em>：</strong> </p><ol><li>相对于promise，async&#x2F;await处理 then 的调用链，代码要清晰很多，几乎和同步代码一样</li><li>滥用 await 可能会导致性能问题，因为 await 会阻塞代码</li></ol><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>&amp;emsp;&amp;emsp;事件循环，把异步任务的回调部分交给事件循环，等时机合适交还给 JS 线程执行。事件循环并不是 JavaScript 首创的，它是计算机的一种运行机制。<br><br>&amp;emsp;&amp;emsp;所有任务都可以分成同步任务和异步任务，当任务进入执行栈，会判断任务是同步还是异步任务，如果是同步任务进行主线程，异步任务进入异步队列(event Queue),等待主线程中的任务执行完毕后，会在异步队列中读取相应的任务(先进先出)，推入主线程执行，这个上述过程不断重复就是事件循环（Event Loop）</p><p>&amp;emsp;&amp;emsp;事件循环是由一个队列组成的，异步任务的回调遵循先进先出，在 JS 引擎空闲时会一轮一轮地被取出，所以被叫做循环。</p><h3 id="垃圾回收-GC"><a href="#垃圾回收-GC" class="headerlink" title="垃圾回收(GC)"></a>垃圾回收(GC)</h3><p>&amp;emsp;&amp;emsp;是清理程序不用的内存或者是之前用过了，以后不会再用的内存空间。</p><h4 id="回收策略"><a href="#回收策略" class="headerlink" title="回收策略"></a>回收策略</h4><p>&amp;emsp;&amp;emsp;垃圾回收主要也是针对堆内存中的对象，对于栈中的非闭包变量，会被栈执行上下文切换时直接出栈，释放了内存空间</p><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><ol><li>内存泄漏：当不再用到的对象内存，没有及时被回收，想要避免就让无用数据不存在引用关系。</li><li>内存膨胀：即在短时间内内存占用极速上升到达一个峰值，想要避免需要使用技术手段减少对内存的占用。</li><li>频繁GC: GC执行的特别频繁，一般出现在频繁使用大的临时变量导致新生代空间被装满的速度极快，而每次新生代装满时就会触发 GC，频繁 GC 同样会导致页面卡顿，想要避免的话就不要搞太多的临时变量，因为临时变量不用了就会被回收。</li></ol><h4 id="泄露类型"><a href="#泄露类型" class="headerlink" title="泄露类型"></a>泄露类型</h4><ol><li>闭包</li><li>隐式全局变量</li><li>DOM引用</li><li>定时器</li><li>事件监听</li><li>事件监听发布</li><li>Map、Set强引用</li><li>未清理的console</li></ol><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>&amp;emsp;&amp;emsp;会在栈中开辟另一块空间，并将被拷贝对象的栈内存数据完全拷贝到该块空间中，即基本数据类型的值会被完全拷贝，而引用类型的值则是拷贝了“指向堆内存的地址”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowCopy</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="comment">// 引用类型需要开辟一个新的存储地址</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&#x27;object&#x27;</span> &amp;&amp; target !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> copy = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target.<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">        copy[prop] = target[prop]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> copy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果是基础类型就直接返回</span></span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>&amp;emsp;&amp;emsp;不仅会在栈中开辟另一块空间，若被拷贝对象中有引用类型，则还会在堆内存中开辟另一块空间存储引用类型的真实数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj3 = &#123;</span><br><span class="line">  <span class="attr">func</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;,</span><br><span class="line">  <span class="attr">obj</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;h&#x27;</span> , <span class="attr">data</span>: &#123; <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>) &#125;, <span class="attr">child</span>: <span class="string">&#x27;child&#x27;</span> &#125;&#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  <span class="attr">und</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">ref</span>: <span class="regexp">/^123$/</span>,</span><br><span class="line">  <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  <span class="title class_">NaN</span>: <span class="title class_">NaN</span>,</span><br><span class="line">  <span class="attr">infinity</span>: <span class="title class_">Infinity</span>,</span><br><span class="line">  <span class="attr">sym</span>: <span class="title class_">Symbol</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 日期类型直接返回一个新的日期对象</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj)</span><br><span class="line">  <span class="comment">// 正则对象直接返回新的正则对象</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line">  <span class="comment">// 循环引用使用 weakMap 解决</span></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">has</span>(obj)) <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj)</span><br><span class="line">  <span class="keyword">const</span> desc = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj)</span><br><span class="line">  <span class="comment">// 获取原型上的方法和对象的描述信息，创建新的对象</span></span><br><span class="line">  <span class="keyword">const</span> copyObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj), desc)</span><br><span class="line">  hash.<span class="title function_">set</span>(obj, copyObj)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环递归遍历内容，防止还会有共计内存的问题</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = obj[key]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;object&#x27;</span> &amp;&amp; item !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> item !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      copyObj[key] = <span class="title function_">deepCopy</span>(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      copyObj[key] = item</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copyObj</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">deepCopy</span>(obj3))</span><br></pre></td></tr></table></figure><h4 id="深拷贝和浅拷贝的区分"><a href="#深拷贝和浅拷贝的区分" class="headerlink" title="深拷贝和浅拷贝的区分"></a>深拷贝和浅拷贝的区分</h4><p>&amp;emsp;&amp;emsp;简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，拿人手短；如果B没变，那就是深拷贝，自食其力。</p><h3 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h3><p>&amp;emsp;&amp;emsp;在进行窗口的resize、scroll、输出框内容校验等操纵的时候，如果事件处理函数调用的频率无限制，会加重浏览器的负担，导致用户体验非常之差。那么为了前端性能的优化也为了用户更好的体验，就可以采用防抖（debounce）和节流（throttle）的方式来到达这种效果，减少调用的频率。</p><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>&amp;emsp;&amp;emsp;一定在事件触发 n 秒后才执行，如果在一个事件触发的 n 秒内又触发了这个事件，以新的事件的时间为准，n 秒后才执行，等触发事件 n 秒内不再触发事件才执行。 即计最后一次触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> timeout, result;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">debounced</span> () &#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="variable language_">this</span>, args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (timeout)  <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                result = func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">            <span class="keyword">if</span> (callNow) result = func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                result = func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    debounced.<span class="property">cancel</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">cleatTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><p>&amp;emsp;&amp;emsp;当持续触发事件时，保证一定时间段内只调用一次事件处理函数。即计第一次触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> curTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="keyword">var</span> remaining = wait-(curTime-startTime); </span><br><span class="line">        <span class="keyword">var</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(remaining&lt;=<span class="number">0</span>)&#123; </span><br><span class="line">            func.<span class="title function_">apply</span>(context, args);</span><br><span class="line"></span><br><span class="line">            startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(fun, remaining);  <span class="comment">// 如果小于wait 保证在差值时间后执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Proxy代理"><a href="#Proxy代理" class="headerlink" title="Proxy代理"></a>Proxy代理</h3><p>&amp;emsp;&amp;emsp;Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// target:要使用 Proxy 包装的目标对象</span></span><br><span class="line"><span class="comment">// handler: 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时，代理 p 的行为</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;Proxy可以帮我们对数据的处理，对构造函数的处理，对数据的验证，说白了，就是在我们访问对象前添加了一层拦截，可以过滤很多操作，而这些过滤，由你来定义。</p><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>&amp;emsp;&amp;emsp;Ajax 异步通信技术，是Asynchronous JavaScript+XML的简写，这种技术允许向服务器请求额外的数据而无需卸载（刷新）页面。</p><h4 id="通信步骤"><a href="#通信步骤" class="headerlink" title="通信步骤"></a>通信步骤</h4><ol><li>新建XMLHttpRequest对象</li><li>打开要发送的地址通道</li><li>给XMLHttpRequest对象增加侦听器，用来侦听各种情况</li><li>发送数据给打开的地址</li></ol><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><ol><li>join()：用指定的分隔符将数组每一项拼接为字符串</li><li>push()：向数组的末尾添加新元素</li><li>pop()：删除数组的最后一项</li><li>unshift()：向数组首位添加新元素</li><li>shift()：删除数组的第一项</li><li>slice()：按照条件查找出其中的部分元素</li><li>splice()：对数组进行增删改</li><li>filter()：过滤功能</li><li>concat()：用于连接两个或多个数组</li><li>indexOf()：检测当前值在数组中第一次出现的位置索引</li><li>lastIndexOf()：检测当前值在数组中最后一次出现的位置索引</li><li>every()：判断数组中每一项都是否满足条件</li><li>some()：判断数组中是否存在满足条件的项</li><li>includes()：判断一个数组是否包含一个指定的值</li><li>sort()：对数组的元素进行排序</li><li>reverse()：对数组进行倒序</li><li>forEach()：es5及以下循环遍历数组每一项</li><li>map()：es6循环遍历数组每一项</li><li>find()：返回匹配的项</li><li>findIndex()：返回匹配位置的索引</li><li>reduce()：从数组的第一项开始遍历到最后一项，返回一个最终的值</li><li>reduceRight()：从数组的最后一项开始遍历到第一项，返回一个最终的值</li><li>toLocaleString()、toString()：将数组转换为字符串</li><li>entries()、keys()、values()：遍历数组</li></ol><h3 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h3><h4 id="let-const"><a href="#let-const" class="headerlink" title="let const"></a>let const</h4><ol><li>let：使用let声明的变量具有块级作用域:，只能在当前声明的代码块中使用，必须要先声明再使用</li><li>const：具有块级作用域的特点，只能在当前声明的代码块中使用，必须要先声明再使用。常量，声明时必须赋值，不能改</li></ol><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ol><li>可以将箭头函数赋值给一个变量，变量名字就是函数的名字，通过变量名字调用函数。</li><li>如果函数体中只有一行代码，且代码的执行结果就是返回值，可以省略大括号。</li><li>如果形参只有一个，可以省略小括号（如果没有形参，小括号不能省略）</li></ol><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><h4 id="新增基本数据类型-Sybmol"><a href="#新增基本数据类型-Sybmol" class="headerlink" title="新增基本数据类型 Sybmol"></a>新增基本数据类型 Sybmol</h4><h4 id="模块化-import导入-export导出"><a href="#模块化-import导入-export导出" class="headerlink" title="模块化 import导入 export导出"></a>模块化 import导入 export导出</h4><h4 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h4><h4 id="新增类class关键字"><a href="#新增类class关键字" class="headerlink" title="新增类class关键字"></a>新增类class关键字</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS解析&quot;&gt;&lt;a href=&quot;#JS解析&quot; class=&quot;headerlink&quot; title=&quot;JS解析&quot;&gt;&lt;/a&gt;JS解析&lt;/h1&gt;&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="面经" scheme="https://1518277259.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>CSS解析</title>
    <link href="https://1518277259.github.io/2022/09/21/CSS%E8%A7%A3%E6%9E%90/"/>
    <id>https://1518277259.github.io/2022/09/21/CSS%E8%A7%A3%E6%9E%90/</id>
    <published>2022-09-21T08:24:51.000Z</published>
    <updated>2023-03-02T13:21:21.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS解析"><a href="#CSS解析" class="headerlink" title="CSS解析"></a>CSS解析</h1><h3 id="盒子模型-box-sizing"><a href="#盒子模型-box-sizing" class="headerlink" title="盒子模型(box-sizing)"></a>盒子模型(box-sizing)</h3><ol><li>盒子模型包括了四部分，margin、padding、border、content</li><li>分为IE盒子模型(border-sizing)和标准盒子模型(content-sizing)</li><li>ie 盒子模型的width&#x2F;height 包含了padding和border</li><li>标准盒模型的width&#x2F;height 不包含padding和border</li></ol><h3 id="position包含几种属性"><a href="#position包含几种属性" class="headerlink" title="position包含几种属性"></a>position包含几种属性</h3><ol><li>static：默认状态，没有定位，正常流</li><li>fixed：生成绝对定位元素，相对于浏览器窗口定位</li><li>absolute:生成绝对定位元素，相对于与static定位外的第一个父元素定位</li><li>relative:生成相对定位元素</li><li>sticky:粘性定位，sticky元素效果完全受制于父级元素们</li></ol><h3 id="CSS选择器及优先级"><a href="#CSS选择器及优先级" class="headerlink" title="CSS选择器及优先级"></a>CSS选择器及优先级</h3><table><thead><tr><th>选择器</th><th>格式</th><th>优先级权重</th></tr></thead><tbody><tr><td>id选择器</td><td>#id</td><td>100</td></tr><tr><td>类选择器</td><td>.className</td><td>10</td></tr><tr><td>属性选择器</td><td>a[ref&#x3D;’eee’]</td><td>10</td></tr><tr><td>伪类选择器</td><td>li:last-child</td><td>10</td></tr><tr><td>标签选择器</td><td>div</td><td>1</td></tr><tr><td>伪元素选择器</td><td>li:after</td><td>1</td></tr><tr><td>相邻兄弟选择器</td><td>h1+p</td><td>0</td></tr><tr><td>子选择器</td><td>ul&gt;li</td><td>0</td></tr><tr><td>后代选择器</td><td>li a</td><td>0</td></tr><tr><td>通配符选择器</td><td>*</td><td>0</td></tr></tbody></table><p><strong>注：</strong></p><ol><li>!important优先级最高</li><li>优先级相同情况下，最后出现的样式生效</li><li>继承得到的样式的优先级最低；</li></ol><h3 id="display的属性及作用"><a href="#display的属性及作用" class="headerlink" title="display的属性及作用"></a>display的属性及作用</h3><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>元素不显示，从文档流中移除</td></tr><tr><td>block</td><td>块类型，默认是父元素的宽度，可设置宽高，换行显示</td></tr><tr><td>inline</td><td>行内元素类型，默认宽度为内容宽度，同行显示</td></tr><tr><td>inline-block</td><td>默认宽度为内容宽度，可设置宽高，同行显示</td></tr><tr><td>list-item</td><td>向块元素一样显示，并添加样式列表标记</td></tr><tr><td>table</td><td>此元素会作为块级表格显示</td></tr><tr><td>inherit</td><td>从父元素继承display属性的值</td></tr></tbody></table><h3 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC(块级格式化上下文)"></a>BFC(块级格式化上下文)</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>通俗来说BFC就是容器，用来管理内部块级元素，与这个区域外无关</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ol><li>BFC会阻止垂直外边距折叠</li><li>BFC不会重叠浮动元素</li><li>BFC可以包含浮动—-清除浮动</li></ol><h3 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction:"></a>flex-direction:</h4><p>决定主轴的方向(即项目的排列方向)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">    </span><br><span class="line">    // row，主轴为水平方向，起点在左端。</span><br><span class="line">    // row-reverse：主轴为水平方向，起点在右端</span><br><span class="line">    // column：主轴为垂直方向，起点在上沿</span><br><span class="line">    // column-reverse：主轴为垂直方向，起点在下沿</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap:"></a>flex-wrap:</h4><p>决定容器内项目是否可换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br><span class="line">// nowrap 不换行,自动调整尺寸</span><br><span class="line">// wrap：项目主轴总尺寸超出容器时换行，第一行在上方</span><br><span class="line">// wrap-reverse：换行，第一行在下方</span><br></pre></td></tr></table></figure><h4 id="flex-flow-忽略"><a href="#flex-flow-忽略" class="headerlink" title="flex-flow: (忽略)"></a>flex-flow: (忽略)</h4><p>flex-direction 和 flex-wrap 的简写形式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="justify-content："><a href="#justify-content：" class="headerlink" title="justify-content："></a>justify-content：</h4><p>定义了项目在主轴的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">    </span><br><span class="line">    // <span class="attribute">flex</span>-start 左对齐</span><br><span class="line">    // <span class="attribute">flex</span>-end：右对齐</span><br><span class="line">    // center：居中</span><br><span class="line">    // space-between：两端对齐，项目之间的间隔相等，即剩余空间等分成间隙。</span><br><span class="line">    // space-around：每个项目两侧的间隔相等，所以项目之间的间隔比项目与边缘的间隔大一倍。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items:"></a>align-items:</h4><p>定义了项目在交叉轴上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br><span class="line">// <span class="attribute">flex</span>-start：交叉轴的起点对齐</span><br><span class="line">// <span class="attribute">flex</span>-end：交叉轴的终点对齐</span><br><span class="line">// center：交叉轴的中点对齐</span><br><span class="line">// baseline: 项目的第一行文字的基线对齐</span><br><span class="line">// </span><br></pre></td></tr></table></figure><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content:"></a>align-content:</h4><p>定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="attribute">flex</span>-start：轴线全部在交叉轴上的起点对齐</span><br><span class="line">// <span class="attribute">flex</span>-end：轴线全部在交叉轴上的终点对齐</span><br><span class="line">// center：轴线全部在交叉轴上的中间对齐</span><br><span class="line">// space-between：轴线两端对齐，之间的间隔相等，即剩余空间等分成间隙。</span><br><span class="line">// space-around：每个轴线两侧的间隔相等，所以轴线之间的间隔比轴线与边缘的间隔大一倍。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 父级<span class="selector-tag">div</span>定义伪类<span class="selector-pseudo">:after</span>和zoom</span><br><span class="line"><span class="selector-class">.contain</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="link-和-import-的区别"><a href="#link-和-import-的区别" class="headerlink" title="link 和 @import 的区别"></a>link 和 @import 的区别</h3><p>link并行下载<br><br>@import 引入的资源编译、加载、执行完成后才会执行后续<br><br>为性能提高建议使用link</p><h3 id="CSS动画和过渡"><a href="#CSS动画和过渡" class="headerlink" title="CSS动画和过渡"></a>CSS动画和过渡</h3><h4 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h4><p>强调的是单一属性的动画效果，从开始到结束整个过程中间不会发生动画的转折</p><h4 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h4><p>强调的是多种动画属性的结合，能够有效的排列动画执行的时间 某时做某事 ，可以简单也可以复杂</p><h3 id="CSS优化和提高性能"><a href="#CSS优化和提高性能" class="headerlink" title="CSS优化和提高性能"></a>CSS优化和提高性能</h3><h4 id="加载性能"><a href="#加载性能" class="headerlink" title="加载性能"></a>加载性能</h4><ol><li>css压缩</li><li>css单一样式</li><li>减少使用@import，建议使用link，因为前者是等待页面加载完成在加载CSS,后者是同时加载</li></ol><h4 id="选择器性能"><a href="#选择器性能" class="headerlink" title="选择器性能"></a>选择器性能</h4><ol><li>避免使用通配规则</li><li>尽量少使用标签进行选择，用id或class</li></ol><h4 id="渲染性能"><a href="#渲染性能" class="headerlink" title="渲染性能"></a>渲染性能</h4><ol><li>慎重使用高性能属性：浮动、定位</li><li>尽量减少页面的重排</li><li>属性值为0时不加单位</li><li>标准化各种浏览器前缀，带浏览器前缀的在前，标准属性在后</li><li>优化嵌套，避免层级太深</li><li>使用CSS雪碧图，减少http请求</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS解析&quot;&gt;&lt;a href=&quot;#CSS解析&quot; class=&quot;headerlink&quot; title=&quot;CSS解析&quot;&gt;&lt;/a&gt;CSS解析&lt;/h1&gt;&lt;h3 id=&quot;盒子模型-box-sizing&quot;&gt;&lt;a href=&quot;#盒子模型-box-sizing&quot; class=&quot;he</summary>
      
    
    
    
    <category term="面经" scheme="https://1518277259.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="CSS" scheme="https://1518277259.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML解析</title>
    <link href="https://1518277259.github.io/2022/08/21/HTML%E8%A7%A3%E6%9E%90/"/>
    <id>https://1518277259.github.io/2022/08/21/HTML%E8%A7%A3%E6%9E%90/</id>
    <published>2022-08-21T08:24:51.000Z</published>
    <updated>2023-03-02T13:21:12.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML-解析"><a href="#HTML-解析" class="headerlink" title="HTML 解析"></a>HTML 解析</h2><h3 id="meta-标签：自动刷新-x2F-跳转"><a href="#meta-标签：自动刷新-x2F-跳转" class="headerlink" title="meta 标签：自动刷新&#x2F;跳转"></a>meta 标签：自动刷新&#x2F;跳转</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//  5s 之后自动跳转到同域下的 page2.html 页面</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5; URL=page2.html&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//每隔一分钟就需要刷新页面的大屏幕监控</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;60&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  <span class="comment">&lt;!--H5标准声明，使用 HTML5 doctype，不区分大小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">”en”</span>&gt;</span> <span class="comment">&lt;!--标准的 lang 属性写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">’utf-8′</span>&gt;</span>    <span class="comment">&lt;!--声明文档使用的字符编码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”X-UA-Compatible”</span> <span class="attr">content</span>=<span class="string">”IE</span>=<span class="string">edge,chrome</span>=<span class="string">1″/</span>&gt;</span>   <span class="comment">&lt;!--优先使用 IE 最新版本和 Chrome--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”description”</span> <span class="attr">content</span>=<span class="string">”不超过150个字符”/</span>&gt;</span>       <span class="comment">&lt;!--页面描述--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”keywords”</span> <span class="attr">content</span>=<span class="string">””/</span>&gt;</span>     <span class="comment">&lt;!-- 页面关键词--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”author”</span> <span class="attr">content</span>=<span class="string">”name,</span> <span class="attr">email</span>@<span class="attr">gmail.com</span>”/&gt;</span>    <span class="comment">&lt;!--网页作者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”robots”</span> <span class="attr">content</span>=<span class="string">”index,follow”/</span>&gt;</span>      <span class="comment">&lt;!--搜索引擎抓取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”initial-scale</span>=<span class="string">1,</span> <span class="attr">maximum-scale</span>=<span class="string">3,</span> <span class="attr">minimum-scale</span>=<span class="string">1,</span> <span class="attr">user-scalable</span>=<span class="string">no”</span>&gt;</span> <span class="comment">&lt;!--为移动设备添加 viewport--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-mobile-web-app-title”</span> <span class="attr">content</span>=<span class="string">”标题”</span>&gt;</span> <span class="comment">&lt;!--iOS 设备 begin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-mobile-web-app-capable”</span> <span class="attr">content</span>=<span class="string">”yes”/</span>&gt;</span>  <span class="comment">&lt;!--添加到主屏后的标题（iOS 6 新增）</span></span><br><span class="line"><span class="comment">是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-itunes-app”</span> <span class="attr">content</span>=<span class="string">”app-id</span>=<span class="string">myAppStoreID,</span> <span class="attr">affiliate-data</span>=<span class="string">myAffiliateData,</span> <span class="attr">app-argument</span>=<span class="string">myURL”</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-mobile-web-app-status-bar-style”</span> <span class="attr">content</span>=<span class="string">”black”/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”format-detection”</span> <span class="attr">content</span>=<span class="string">”telphone</span>=<span class="string">no,</span> <span class="attr">email</span>=<span class="string">no”/</span>&gt;</span>  <span class="comment">&lt;!--设置苹果工具栏颜色--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”renderer”</span> <span class="attr">content</span>=<span class="string">”webkit”</span>&gt;</span> <span class="comment">&lt;!-- 启用360浏览器的极速模式(webkit)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”X-UA-Compatible”</span> <span class="attr">content</span>=<span class="string">”IE</span>=<span class="string">edge”</span>&gt;</span>     <span class="comment">&lt;!--避免IE使用兼容模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”Cache-Control”</span> <span class="attr">content</span>=<span class="string">”no-siteapp”</span> /&gt;</span>    <span class="comment">&lt;!--不让百度转码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”HandheldFriendly”</span> <span class="attr">content</span>=<span class="string">”true”</span>&gt;</span>     <span class="comment">&lt;!--针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”MobileOptimized”</span> <span class="attr">content</span>=<span class="string">”320″</span>&gt;</span>   <span class="comment">&lt;!--微软的老式浏览器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”screen-orientation”</span> <span class="attr">content</span>=<span class="string">”portrait”</span>&gt;</span>   <span class="comment">&lt;!--uc强制竖屏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”x5-orientation”</span> <span class="attr">content</span>=<span class="string">”portrait”</span>&gt;</span>    <span class="comment">&lt;!--QQ强制竖屏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”full-screen”</span> <span class="attr">content</span>=<span class="string">”yes”</span>&gt;</span>              <span class="comment">&lt;!--UC强制全屏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”x5-fullscreen”</span> <span class="attr">content</span>=<span class="string">”true”</span>&gt;</span>       <span class="comment">&lt;!--QQ强制全屏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”browsermode”</span> <span class="attr">content</span>=<span class="string">”application”</span>&gt;</span>   <span class="comment">&lt;!--UC应用模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”x5-page-mode”</span> <span class="attr">content</span>=<span class="string">”app”</span>&gt;</span>   <span class="comment">&lt;!-- QQ应用模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”msapplication-tap-highlight”</span> <span class="attr">content</span>=<span class="string">”no”</span>&gt;</span>    <span class="comment">&lt;!--windows phone 点击无高亮</span></span><br><span class="line"><span class="comment">设置页面不缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”pragma”</span> <span class="attr">content</span>=<span class="string">”no-cache”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”cache-control”</span> <span class="attr">content</span>=<span class="string">”no-cache”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”expires”</span> <span class="attr">content</span>=<span class="string">”0″</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="html语义化的了解"><a href="#html语义化的了解" class="headerlink" title="html语义化的了解"></a>html语义化的了解</h3><ol><li>内容结构化，结构更清晰</li><li>便于搜索引擎解析</li><li>便于阅读理解维护</li></ol><h3 id="Html新特性"><a href="#Html新特性" class="headerlink" title="Html新特性"></a>Html新特性</h3><ol><li>语义化标签：article、footer、header、nav、section</li><li>表单控件：calendar、date、time、email、url、search</li><li>媒体元素：video、audio</li><li>本地存储：localStorage、sessionStorage</li><li>新技术：websocket、webworker</li></ol><h3 id="src和link的区别"><a href="#src和link的区别" class="headerlink" title="src和link的区别"></a>src和link的区别</h3><p><strong>src：</strong>引用资源替换当前元素，用在img、script、iframe<br></p><blockquote><p>当浏览器解析到src会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，这是为什么建议将js脚本放在底部而不是头部的原因</p></blockquote><p><strong>link：</strong>在当前元素和引用资源间建立连接，用在link和a等元素上<br></p><blockquote><p>在文档中添加href，浏览器会识别该文档为CSS文件，并行下载资源并不会停止对当前文档的处理，这个数为什么建议使用link方式加载CSS而不是@import方式</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML-解析&quot;&gt;&lt;a href=&quot;#HTML-解析&quot; class=&quot;headerlink&quot; title=&quot;HTML 解析&quot;&gt;&lt;/a&gt;HTML 解析&lt;/h2&gt;&lt;h3 id=&quot;meta-标签：自动刷新-x2F-跳转&quot;&gt;&lt;a href=&quot;#meta-标签：自动刷新-x</summary>
      
    
    
    
    <category term="面经" scheme="https://1518277259.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="html" scheme="https://1518277259.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝和浅拷贝</title>
    <link href="https://1518277259.github.io/2022/04/15/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://1518277259.github.io/2022/04/15/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2022-04-15T01:37:43.000Z</published>
    <updated>2022-04-15T01:38:33.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>只复制引用，而未复制真正的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const originArray = [1,2,3,4,5];</span><br><span class="line">const originObj = &#123;a:&#x27;a&#x27;,b:&#x27;b&#x27;,c:[1,2,3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;;</span><br><span class="line"></span><br><span class="line">const cloneArray = originArray;</span><br><span class="line">const cloneObj = originObj;</span><br><span class="line"></span><br><span class="line">console.log(cloneArray); // [1,2,3,4,5]</span><br><span class="line">console.log(originObj); // &#123;a:&#x27;a&#x27;,b:&#x27;b&#x27;,c:Array[3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;</span><br><span class="line"></span><br><span class="line">cloneArray.push(6);</span><br><span class="line">cloneObj.a = &#123;aa:&#x27;aa&#x27;&#125;;</span><br><span class="line"></span><br><span class="line">console.log(cloneArray); // [1,2,3,4,5,6]</span><br><span class="line">console.log(originArray); // [1,2,3,4,5,6]</span><br><span class="line"></span><br><span class="line">console.log(cloneObj); // &#123;a:&#123;aa:&#x27;aa&#x27;&#125;,b:&#x27;b&#x27;,c:Array[3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;</span><br><span class="line">console.log(originArray); // &#123;a:&#123;aa:&#x27;aa&#x27;&#125;,b:&#x27;b&#x27;,c:Array[3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝就是对目标的完全拷贝，不像浅拷贝那样只是复制了一层引用，就连值也都复制了。只要进行了深拷贝，它们老死不相往来，谁也不会影响谁。</p><h4 id="实现深拷贝的两种方法"><a href="#实现深拷贝的两种方法" class="headerlink" title="实现深拷贝的两种方法"></a>实现深拷贝的两种方法</h4><p><strong>JSON.stringify&#x2F;parse的方法</strong></p><p>如果对象含有一个函数时，不能用这个方法进行深拷贝，因为undefine、function、symbol会在转换过程中被忽略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const originArray = [1,2,3,4,5];</span><br><span class="line">const cloneArray = JSON.parse(JSON.stringify(originArray));</span><br><span class="line">console.log(cloneArray === originArray); // false</span><br><span class="line"></span><br><span class="line">const originObj = &#123;a:&#x27;a&#x27;,b:&#x27;b&#x27;,c:[1,2,3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;;</span><br><span class="line">const cloneObj = JSON.parse(JSON.stringify(originObj));</span><br><span class="line">console.log(cloneObj === originObj); // false</span><br><span class="line"></span><br><span class="line">cloneObj.a = &#x27;aa&#x27;;</span><br><span class="line">cloneObj.c = [1,1,1];</span><br><span class="line">cloneObj.d.dd = &#x27;doubled&#x27;;</span><br><span class="line"></span><br><span class="line">console.log(cloneObj); // &#123;a:&#x27;aa&#x27;,b:&#x27;b&#x27;,c:[1,1,1],d:&#123;dd:&#x27;doubled&#x27;&#125;&#125;;</span><br><span class="line">console.log(originObj); // &#123;a:&#x27;a&#x27;,b:&#x27;b&#x27;,c:[1,2,3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;;</span><br></pre></td></tr></table></figure><p><strong>递归的方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function deepClone(source)&#123;</span><br><span class="line">  const targetObj = source.constructor === Array ? [] : &#123;&#125;; // 判断复制的目标是数组还是对象</span><br><span class="line">  for(let keys in source)&#123; // 遍历目标</span><br><span class="line">    if(source.hasOwnProperty(keys))&#123;</span><br><span class="line">      if(source[keys] &amp;&amp; typeof source[keys] === &#x27;object&#x27;)&#123; // 如果值是对象，就递归一下</span><br><span class="line">        targetObj[keys] = source[keys].constructor === Array ? [] : &#123;&#125;;</span><br><span class="line">        targetObj[keys] = deepClone(source[keys]);</span><br><span class="line">      &#125;else&#123; // 如果不是，就直接赋值</span><br><span class="line">        targetObj[keys] = source[keys];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  return targetObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>赋值运算符 &#x3D; 实现的是浅拷贝，只拷贝对象的引用值；</li><li>JavaScript 中数组和对象自带的拷贝方法都是“首层浅拷贝”；</li><li>JSON.stringify 实现的是深拷贝，但是对目标对象有要求；</li><li>若想真正意义上的深拷贝，请递归。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;浅拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝&quot;&gt;&lt;/a&gt;浅拷贝&lt;/h3&gt;&lt;p&gt;只复制引用，而未复制真正的值&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    <category term="JS" scheme="https://1518277259.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="https://1518277259.github.io/2022/04/15/Promise/"/>
    <id>https://1518277259.github.io/2022/04/15/Promise/</id>
    <published>2022-04-15T01:14:04.000Z</published>
    <updated>2022-04-15T01:15:12.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Promise 是异步编程的一种解决方案： 从语法上讲，promise是一个对象，从它可以获取异步操作的消息；从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。</p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><ul><li>在 pending 状态，promise 可以切换到 fulfilled 或 rejected。</li><li>在 fulfilled 状态，不能迁移到其它状态，必须有个不可变的 value。</li><li>在 rejected 状态，不能迁移到其它状态，必须有个不可变的 reason。</li><li></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyPromise</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="variable language_">this</span>; <span class="comment">// 缓存当前promise实例</span></span><br><span class="line">    self.<span class="property">value</span> = <span class="literal">null</span>; <span class="comment">//成功时的值</span></span><br><span class="line">    self.<span class="property">error</span> = <span class="literal">null</span>; <span class="comment">//失败时的原因</span></span><br><span class="line">    self.<span class="property">onFulfilled</span> = <span class="literal">null</span>; <span class="comment">//成功的回调函数</span></span><br><span class="line">    self.<span class="property">onRejected</span> = <span class="literal">null</span>; <span class="comment">//失败的回调函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        self.<span class="property">value</span> = value;</span><br><span class="line">        self.<span class="title function_">onFulfilled</span>(self.<span class="property">value</span>);<span class="comment">//resolve时执行成功回调</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        self.<span class="property">error</span> = error;</span><br><span class="line">        self.<span class="title function_">onRejected</span>(self.<span class="property">error</span>)<span class="comment">//reject时执行失败回调</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(resolve, reject);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">//在这里给promise实例注册成功和失败回调</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilled</span> = onFulfilled;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejected</span> = onRejected;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">MyPromise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;Promise 是异步编程的一种解决方案： 从语法上讲，promise是一个对象，从它可以获取异步操作的消息；从本意上讲，它是承诺，承诺它过</summary>
      
    
    
    
    <category term="JS" scheme="https://1518277259.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>原型和原型链</title>
    <link href="https://1518277259.github.io/2022/04/14/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE-1/"/>
    <id>https://1518277259.github.io/2022/04/14/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE-1/</id>
    <published>2022-04-14T02:19:01.000Z</published>
    <updated>2022-04-14T03:07:14.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><img src="/2022/04/14/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE-1/prototype.png" class title="This is an test image"><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>每个对象拥有一个原型对象，通过 __proto__ 指针指向上一个原型 ，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向 null。这种关系被称为原型链 (prototype chain)，通过原型链一个对象会拥有定义在其他对象中的属性和方法。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>Symbol 作为构造函数来说并不完整，因为不支持语法 new Symbol()，但其原型上拥有 constructor 属性，即 Symbol.prototype.constructor。</li><li>引用类型 constructor 属性值是可以修改的，但是对于基本类型来说是只读的，当然 null 和 undefined 没有 constructor 属性。</li><li>__proto__ 是每个实例上都有的属性，prototype 是构造函数的属性，这两个并不一样，但  p.__proto__  和 Parent.prototype 指向同一个对象。</li><li>__proto__ 属性在 ES6 时被标准化，但因为性能问题并不推荐使用，推荐使用 Object.getPrototypeOf()。</li><li>每个对象拥有一个原型对象，通过 __proto__ 指针指向上一个原型 ，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向 null，这就是原型链。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h3&gt;&lt;img src=&quot;/2022/04/14/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93</summary>
      
    
    
    
    <category term="JS" scheme="https://1518277259.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>call、apply、bind简介</title>
    <link href="https://1518277259.github.io/2022/04/13/call%E3%80%81apply%E3%80%81bind%E7%AE%80%E4%BB%8B/"/>
    <id>https://1518277259.github.io/2022/04/13/call%E3%80%81apply%E3%80%81bind%E7%AE%80%E4%BB%8B/</id>
    <published>2022-04-13T01:34:55.000Z</published>
    <updated>2022-04-13T01:35:38.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>call 是属于所有 Function 的方法，也就是 Function.prototype.call。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">call</span>(thisArg[,arg1[,arg2,…]]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用-call-调用函数并且指定-this"><a href="#使用-call-调用函数并且指定-this" class="headerlink" title="使用 call 调用函数并且指定 this"></a>使用 call 调用函数并且指定 this</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  a: 1</span><br><span class="line">&#125;</span><br><span class="line">function foo(b, c)&#123;</span><br><span class="line">  this.b = b;</span><br><span class="line">  this.c = c;</span><br><span class="line">  console.log(this.a + this.b + this.c);</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj,2,3); // 6</span><br></pre></td></tr></table></figure><h4 id="call-实现继承"><a href="#call-实现继承" class="headerlink" title="call 实现继承"></a>call 实现继承</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">  this.say = function()&#123;</span><br><span class="line">    console.log(this.name + &quot;:&quot; + this.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">function Student(name, age, job)&#123;</span><br><span class="line">  Person.call(this, name ,age);</span><br><span class="line">  this.job = job;</span><br><span class="line">  this.say = function()&#123;</span><br><span class="line">    console.log(this.name + &quot;:&quot; + this.age + &quot; &quot; + this.job);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var me = new Student(&quot;axuebin&quot;,25,&quot;FE&quot;);</span><br><span class="line">console.log(me.say()); // axuebin:25 FE</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>apply 也是属于所有 Function 的方法，也就是 Function.prototype.apply。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">apply</span>(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><p>和 call 用法一样，只是参数不同，call 的参数是列表，将每个参数都列出来；apply 的参数是数组，将每个参数放到一个数组中</p><h4 id="完整的-apply"><a href="#完整的-apply" class="headerlink" title="完整的 apply"></a>完整的 apply</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myApply=function(context)&#123;</span><br><span class="line">  // 获取调用`myApply`的函数本身，用this获取，如果context不存在，则为window</span><br><span class="line">  var context = context || window;</span><br><span class="line">  var fn = Symbol();</span><br><span class="line">  context[fn] = this;</span><br><span class="line">  //获取传入的数组参数</span><br><span class="line">  var args = arguments[1];</span><br><span class="line">  if (args == undefined) &#123; //没有传入参数直接执行</span><br><span class="line">    // 执行这个函数</span><br><span class="line">    context[fn]()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 执行这个函数</span><br><span class="line">    context[fn](...args);</span><br><span class="line">  &#125;</span><br><span class="line">  // 从上下文中删除函数引用</span><br><span class="line">  delete context.fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>bind()方法创建一个新的函数,当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">bind</span>(thisArg[, arg1[, arg2[, ...]]])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person(name)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.say = function()&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">      console.log(&quot;hello &quot; + this.name);</span><br><span class="line">    &#125;.bind(this),1000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var person = new Person(&quot;axuebin&quot;);</span><br><span class="line">person.say(); //hello axuebin</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>三者都是用来改变函数的 this 指向</li><li>三者的第一个参数都是 this 指向的对象</li><li>bind 是返回一个绑定函数可稍后执行，call、apply 是立即调用</li><li>三者都可以给定参数传递</li><li>call 给定参数需要将参数全部列出，apply 给定参数数组</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;call&quot;&gt;&lt;a href=&quot;#call&quot; class=&quot;headerlink&quot; title=&quot;call&quot;&gt;&lt;/a&gt;call&lt;/h3&gt;&lt;p&gt;call 是属于所有 Function 的方法，也就是 Function.prototype.call。&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="JS" scheme="https://1518277259.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>执行上下文、作用域链、闭包</title>
    <link href="https://1518277259.github.io/2022/04/12/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E3%80%81%E9%97%AD%E5%8C%85/"/>
    <id>https://1518277259.github.io/2022/04/12/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E3%80%81%E9%97%AD%E5%8C%85/</id>
    <published>2022-04-12T06:26:26.000Z</published>
    <updated>2022-04-12T06:30:59.164Z</updated>
    
    <content type="html"><![CDATA[<h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><p>执行上下文是评估和执行 JavaScript 代码的环境的抽象概念</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><ul><li>全局执行上下文</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">它创建会执行两件事：创建一个全局的window对象，</span><br><span class="line">并设置this的值等于这个全局的对象。一个程序只会有一个全局对象</span><br></pre></td></tr></table></figure><ul><li>函数执行上下文</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">每个函数都有它自己的执行上下文，不过是在函数被调用时创建的；</span><br><span class="line">this的值取决于该函数是怎样被调用的，如果是被一个对象引用调用，指向这个对象，否则指向全局对象</span><br></pre></td></tr></table></figure><ul><li>Eval 函数执行上下文</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行在 eval 函数内部的代码也会有它属于自己的执行上下文</span><br></pre></td></tr></table></figure><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>当 JavaScript 引擎第一次遇到你的脚本时，它会创建一个全局的执行上下文并且压入当前执行栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。<br></p><p>引擎会执行那些执行上下文位于栈顶的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域决定这个变量的生命周期及其可见性。 当我们创建了一个函数或者 {} 块，就会生成一个新的作用域</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;执行上下文&quot;&gt;&lt;a href=&quot;#执行上下文&quot; class=&quot;headerlink&quot; title=&quot;执行上下文&quot;&gt;&lt;/a&gt;执行上下文&lt;/h3&gt;&lt;p&gt;执行上下文是评估和执行 JavaScript 代码的环境的抽象概念&lt;/p&gt;
&lt;h4 id=&quot;类型&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="JS" scheme="https://1518277259.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>在地址栏里输入一个地址回车会发生哪些事情</title>
    <link href="https://1518277259.github.io/2022/04/11/%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E9%87%8C%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%9C%B0%E5%9D%80%E5%9B%9E%E8%BD%A6%E4%BC%9A%E5%8F%91%E7%94%9F%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85/"/>
    <id>https://1518277259.github.io/2022/04/11/%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E9%87%8C%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%9C%B0%E5%9D%80%E5%9B%9E%E8%BD%A6%E4%BC%9A%E5%8F%91%E7%94%9F%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85/</id>
    <published>2022-04-11T03:36:45.000Z</published>
    <updated>2022-04-11T03:38:52.997Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解析-URL："><a href="#解析-URL：" class="headerlink" title="解析 URL："></a>解析 URL：</h3><p>首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</p><h3 id="缓存判断："><a href="#缓存判断：" class="headerlink" title="缓存判断："></a>缓存判断：</h3><p>浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</p><h3 id="DNS-解析："><a href="#DNS-解析：" class="headerlink" title="DNS 解析："></a>DNS 解析：</h3><p>下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</p><h3 id="获取-MAC-地址："><a href="#获取-MAC-地址：" class="headerlink" title="获取 MAC 地址："></a>获取 MAC 地址：</h3><p>当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</p><h3 id="TCP-三次握手："><a href="#TCP-三次握手：" class="headerlink" title="TCP 三次握手："></a>TCP 三次握手：</h3><p>下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向客户端发送一个 SYN ACK 报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个 ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</p><h3 id="HTTPS-握手："><a href="#HTTPS-握手：" class="headerlink" title="HTTPS 握手："></a>HTTPS 握手：</h3><p>如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</p><h3 id="返回数据："><a href="#返回数据：" class="headerlink" title="返回数据："></a>返回数据：</h3><p>当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</p><h3 id="页面渲染："><a href="#页面渲染：" class="headerlink" title="页面渲染："></a>页面渲染：</h3><p>浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</p><h3 id="TCP-四次挥手："><a href="#TCP-四次挥手：" class="headerlink" title="TCP 四次挥手："></a>TCP 四次挥手：</h3><p>最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;解析-URL：&quot;&gt;&lt;a href=&quot;#解析-URL：&quot; class=&quot;headerlink&quot; title=&quot;解析 URL：&quot;&gt;&lt;/a&gt;解析 URL：&lt;/h3&gt;&lt;p&gt;首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议</summary>
      
    
    
    
    <category term="http" scheme="https://1518277259.github.io/categories/http/"/>
    
    
    <category term="http" scheme="https://1518277259.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>TCP和UDP的区别</title>
    <link href="https://1518277259.github.io/2022/04/11/TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://1518277259.github.io/2022/04/11/TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-04-11T03:30:48.000Z</published>
    <updated>2022-04-11T03:31:31.095Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>TCP 是面向连接的协议</td><td>UDP 的无连接的协议</td></tr><tr><td>TCP 在发送数据前需要建立连接</td><td>UDP 无需建立连接就可以发送大量数据</td></tr><tr><td>TCP 回按照特定的顺序重新排列数据包</td><td>UDP 数据包没有固定顺序，所有数据包相互独立</td></tr><tr><td>TCP 传输速度比较慢</td><td>UDP 的传输会更快</td></tr><tr><td>TCP 的头部字节有 20 字节</td><td>UDP 的头部字节只需要 8 个字节</td></tr><tr><td>TCP 是重量级的，在发送数据前需要进行三次握手建立连接</td><td>UDP 是轻量级的，没有跟踪链接，消息排序</td></tr><tr><td>TCP 会进行错误校验，并进行错误恢复</td><td>UDP 也会进行错误检查，但会丢掉错误的数据包</td></tr><tr><td>TCP 有发送确认</td><td>UDP 没有发送确认</td></tr><tr><td>TCP 会使用握手协议</td><td>无握手协议</td></tr><tr><td>TCP 是可靠的，可以确保将数据传送到路由器</td><td>在 UDP 中不能确保数据传送到目标</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TCP&lt;/th&gt;
&lt;th&gt;UDP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;TCP 是面向连接的协议&lt;/td&gt;
&lt;td&gt;UDP 的无连接的协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP 在发送数</summary>
      
    
    
    
    <category term="http" scheme="https://1518277259.github.io/categories/http/"/>
    
    
    <category term="http" scheme="https://1518277259.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>GEI和POST的区别</title>
    <link href="https://1518277259.github.io/2022/04/11/GEI%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://1518277259.github.io/2022/04/11/GEI%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-04-11T03:03:49.000Z</published>
    <updated>2022-04-11T03:29:41.055Z</updated>
    
    <content type="html"><![CDATA[<ul><li>数据传输方式不同：GET 请求通过 URL 传输数据，而 POST 的数据通过请求体传输。</li><li>安全性不同：POST 的数据因为在请求主体内，所以有一定的安全性保证，而 GET 的数据在 URL 中，通过历史记录，缓存很容易查到数据信息。</li><li>数据类型不同：GET 只允许 ASCII 字符，而 POST 无限制</li><li>GET 无害： 刷新、后退等浏览器操作 GET 请求是无害的，POST 可能重复提交表单</li><li>特性不同：GET 是安全（这里的安全是指只读特性，就是使用这个方法不会引起服务器状态变化）且幂等（幂等的概念是指同一个请求方法执行多次和仅执行一次的效果完全相同），而 POST 是非安全非幂等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;数据传输方式不同：GET 请求通过 URL 传输数据，而 POST 的数据通过请求体传输。&lt;/li&gt;
&lt;li&gt;安全性不同：POST 的数据因为在请求主体内，所以有一定的安全性保证，而 GET 的数据在 URL 中，通过历史记录，缓存很容易查到数据信息。&lt;/li&gt;</summary>
      
    
    
    
    <category term="http" scheme="https://1518277259.github.io/categories/http/"/>
    
    
    <category term="http" scheme="https://1518277259.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>HTTP和HTTPS的区别</title>
    <link href="https://1518277259.github.io/2022/04/11/HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://1518277259.github.io/2022/04/11/HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-04-11T02:54:56.000Z</published>
    <updated>2022-04-11T03:03:29.058Z</updated>
    
    <content type="html"><![CDATA[<ol><li>http 是客户端和服务器请求和应答的标准的(TCP)超文本传输协议，使浏览器更高效，网络传输减少；https 简单来说就是 http+SSL，作用 1 是建立信息安全通道，保证数据传输安全，2 是确认网站真实性</li><li>https 协议需要证书，一般免费证书少，需要一定费用；</li><li>http 是超文本传输协议，信息是明文传输；https 则是具有 ssl 加密的传输协议</li><li>连接方式不同，端口不同，http:80 https:443</li><li>http 连接是无状态的；https 协议是有 SSL+Http 协议构成的可进行加密传输、身份认证的网络协议，比 http 协议更安全。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;http 是客户端和服务器请求和应答的标准的(TCP)超文本传输协议，使浏览器更高效，网络传输减少；https 简单来说就是 http+SSL，作用 1 是建立信息安全通道，保证数据传输安全，2 是确认网站真实性&lt;/li&gt;
&lt;li&gt;https 协议需要证书，一般</summary>
      
    
    
    
    <category term="http" scheme="https://1518277259.github.io/categories/http/"/>
    
    
    <category term="http" scheme="https://1518277259.github.io/tags/http/"/>
    
  </entry>
  
</feed>
