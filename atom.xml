<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ysp博客</title>
  
  <subtitle>风雨同路人</subtitle>
  <link href="https://1518277259.github.io/atom.xml" rel="self"/>
  
  <link href="https://1518277259.github.io/"/>
  <updated>2023-03-02T12:31:16.620Z</updated>
  <id>https://1518277259.github.io/</id>
  
  <author>
    <name>杨书平</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式</title>
    <link href="https://1518277259.github.io/2023/02/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://1518277259.github.io/2023/02/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-02-19T02:24:51.000Z</published>
    <updated>2023-03-02T12:31:16.620Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>是用于创建重复的对象，同时又能保证性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> () &#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;marry&quot;</span>;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">const</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="title function_">sayName</span>();                                        <span class="comment">// marry</span></span><br><span class="line">person2.<span class="title function_">sayName</span>();                                        <span class="comment">// marry</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">sayName</span> === person2.<span class="property">sayName</span>);         <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式（Singleton Pattern）涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>特点：</strong></p><ol><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例模式</span></span><br><span class="line"><span class="keyword">let</span> box;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createBox</span> = (<span class="params">_a, _b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(!box)&#123;</span><br><span class="line">        box = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    box.<span class="property">a</span> = _a;</span><br><span class="line">    box.<span class="property">b</span> = _b;</span><br><span class="line">    <span class="keyword">return</span> box;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="title function_">createBox</span>(<span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">obj1; <span class="comment">// &#123;a: 3, b: 6&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title function_">createBox</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">obj1; <span class="comment">// &#123;a: 10, b: 20&#125;</span></span><br><span class="line">obj2; <span class="comment">// &#123;a: 10, b: 20&#125;</span></span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>根据不同的输入返回不同类的实例，一般用来创建同一类对象</p><p><strong>优点：</strong></p><ol><li>良好的封装，代码结构清晰，访问者无需知道对象的创建流程，特别是创建比较复杂的情况下；</li><li>扩展性优良，通过工厂方法隔离了用户和创建流程隔离，符合开放封闭原则；</li><li>解耦了高层逻辑和底层产品类，符合最少知识原则，不需要的就不要去交流；</li></ol><p><strong>缺点：</strong><br>&amp;emsp;&amp;emsp;带来了额外的系统复杂度，增加了抽象性；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饭店方法 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Restaurant</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getMenu</span>(<span class="params">menu</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (menu) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;鱼香肉丝&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">YuXiangRouSi</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;宫保鸡丁&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GongBaoJiDin</span>();</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;这个菜本店没有&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 鱼香肉丝类 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YuXiangRouSi</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;鱼香肉丝&#x27;</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; 真香&#x27;</span>) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 宫保鸡丁类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GongBaoJiDin</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;宫保鸡丁&#x27;</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; 让我想起了外婆做的菜&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> dish1 = <span class="title class_">Restaurant</span>.<span class="title function_">getMenu</span>(<span class="string">&#x27;鱼香肉丝&#x27;</span>);</span><br><span class="line">dish1.<span class="title function_">eat</span>();  </span><br><span class="line"><span class="comment">// 鱼香肉丝 真香</span></span><br><span class="line"><span class="keyword">const</span> dish2 = <span class="title class_">Restaurant</span>.<span class="title function_">getMenu</span>(<span class="string">&#x27;红烧排骨&#x27;</span>);</span><br><span class="line"><span class="comment">// Error 这个菜本店没有 </span></span><br></pre></td></tr></table></figure><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>&amp;emsp;&amp;emsp;通过对类的工厂抽象使其业务用于对产品类簇的创建，而不是负责创建某一类产品的实例。关键在于使用抽象类制定了实例的结构，调用者直接面向实例的结构编程，从实例的具体实现中解耦。</p><p><strong>优点：</strong><br>&amp;emsp;&amp;emsp;抽象产品类将产品的结构抽象出来，访问者不需要知道产品的具体实现，只需要面向产品的结构编程即可，从产品的具体实现中解耦；</p><p><strong>缺点：</strong></p><ol><li>扩展新类簇的产品类比较困难，因为需要创建新的抽象产品类，并且还要修改工厂类，违反开放封闭原则；</li><li>带来了系统复杂度，增加了新的类，和新的继承关系；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饭店 抽象类，饭店都可以做菜和汤</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractRestaurant</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.<span class="property">target</span> === <span class="title class_">AbstractRestaurant</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象类不能直接实例化!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">signborad</span> = <span class="string">&#x27;饭店&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象方法：创建菜</span></span><br><span class="line">    <span class="title function_">createDish</span>(<span class="params"></span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不能调用!&#x27;</span>) &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 抽象方法：创建汤</span></span><br><span class="line">    <span class="title function_">createSoup</span>(<span class="params"></span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不能调用!&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 饭店 具体类 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Restaurant</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbstractRestaurant</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; <span class="variable language_">super</span>() &#125;</span><br><span class="line">    <span class="title function_">createDish</span>(<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;鱼香肉丝&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">YuXiangRouSi</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;宫保鸡丁&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GongBaoJiDing</span>();</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;本店没这个菜&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">createSoup</span>(<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;紫菜蛋汤&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ZiCaiDanTang</span>();</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;本店没这个汤&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 菜 抽象类，菜都有吃的功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractDish</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.<span class="property">target</span> === <span class="title class_">AbstractDish</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象类不能直接实例化!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">kind</span> = <span class="string">&#x27;菜&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不能调用!&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 菜 鱼香肉丝类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YuXiangRouSi</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbstractDish</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;鱼香肉丝&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">kind</span> + <span class="string">&#x27; - &#x27;</span> + <span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; 真香~&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 菜 宫保鸡丁类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GongBaoJiDing</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbstractDish</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;宫保鸡丁&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">kind</span> + <span class="string">&#x27; - &#x27;</span> + <span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; 让我想起了外婆做的菜&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 汤 抽象类，汤都有喝的功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractSoup</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.<span class="property">target</span> === <span class="title class_">AbstractDish</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象类不能直接实例化!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">kind</span> = <span class="string">&#x27;汤&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="title function_">drink</span>(<span class="params"></span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不能调用!&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 汤 紫菜蛋汤类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZiCaiDanTang</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbstractSoup</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;紫菜蛋汤&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">drink</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">kind</span> + <span class="string">&#x27; - &#x27;</span> + <span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; 我从小喝到大&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> restaurant = <span class="keyword">new</span> <span class="title class_">Restaurant</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> soup1 = restaurant.<span class="title function_">createSoup</span>(<span class="string">&#x27;紫菜蛋汤&#x27;</span>);</span><br><span class="line">soup1.<span class="title function_">drink</span>();</span><br><span class="line"><span class="comment">// 汤 - 紫菜蛋汤 我从小喝到大</span></span><br><span class="line"><span class="keyword">const</span> dish1 = restaurant.<span class="title function_">createDish</span>(<span class="string">&#x27;鱼香肉丝&#x27;</span>);</span><br><span class="line">dish1.<span class="title function_">eat</span>();</span><br><span class="line"><span class="comment">// 菜 - 鱼香肉丝 真香</span></span><br><span class="line"><span class="keyword">const</span> dish2 = restaurant.<span class="title function_">createDish</span>(<span class="string">&#x27;红烧排骨&#x27;</span>);</span><br><span class="line"><span class="comment">// Error 本店没有这个</span></span><br></pre></td></tr></table></figure><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>用于分步构建一个复杂的对象，将一个复杂对象的 构建层与其表示层分离。若不是极其复杂的对象，应选择使用对象字面或工厂模式等方式创建对象。</p><p><strong>优点：</strong></p><ol><li>封装性好，创建和使用分离；</li><li>扩展性好，建造类之间独立、一定程度上解耦。</li></ol><p><strong>缺点:</strong></p><ol><li>产生多余的Builder对象；</li><li>产品内部发生变化，建造者都要修改，成本较大。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建造者，汽车部件厂家</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarBuilder</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">param</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">param</span> = param;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生产部件，part1 </span></span><br><span class="line">    <span class="title function_">buildPart1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">part1</span> = <span class="string">&#x27;part1&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生产部件，part2</span></span><br><span class="line">    <span class="title function_">buildPart2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">part2</span> = <span class="string">&#x27;part2&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 汽车装配，获得产品实例</span></span><br><span class="line"><span class="keyword">const</span> benchi1 = <span class="keyword">new</span> <span class="title class_">CarBuilder</span>(<span class="string">&#x27;param&#x27;</span>)</span><br><span class="line">.<span class="title function_">buildPart1</span>()</span><br><span class="line">.<span class="title function_">buildPart2</span>();</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(benchi1);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     param: &quot;param&quot;</span></span><br><span class="line"><span class="comment">//     part1: &quot;part1&quot;</span></span><br><span class="line"><span class="comment">//     part2: &quot;part2&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="结构性模式"><a href="#结构性模式" class="headerlink" title="结构性模式"></a>结构性模式</h2><h3 id="桥架模式"><a href="#桥架模式" class="headerlink" title="桥架模式"></a>桥架模式</h3><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。使用组合关系代替继承关系，降低抽象和实现两个可变维度的耦合度。</p><p><strong>优点：</strong></p><ol><li>分离了抽象和实现部分，将实现层（DOM 元素事件触发并执行具体修改逻辑）和抽象层（ 元素外观、尺寸部分的修改函数）解耦，有利于分层；</li><li>提高了可扩展性，多个维度的部件自由组合，避免了类继承带来的强耦合关系，也减少了部件类的数量；</li><li>使用者不用关心细节的实现，可以方便快捷地进行使用；</li></ol><p><strong>缺点：</strong></p><ol><li>桥接模式要求两个部件没有耦合关系，否则无法独立地变化，因此要求正确的对系统变化的维度进行识别，使用范围存在局限性；</li><li>桥接模式的引入增加了系统复杂度；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Boy</span>(<span class="params">instrument</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi, 我是男生&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 有一个功能叫playInstrument， 没有具体乐器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">playInstrument</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        instrument.<span class="title function_">play</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Girl</span>(<span class="params">instrument</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi, 我是女生&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 有一个功能叫playInstrument， 没有具体乐器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">playInstrument</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        instrument.<span class="title function_">play</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Piano</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">play</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;钢琴开始演奏&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Guitar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">play</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吉他开始演奏&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> piano = <span class="keyword">new</span> <span class="title class_">Piano</span>()</span><br><span class="line"><span class="keyword">let</span> guitar = <span class="keyword">new</span> <span class="title class_">Guitar</span>()</span><br><span class="line"><span class="keyword">let</span> pianoBoy = <span class="keyword">new</span> <span class="title class_">Boy</span>(piano)</span><br><span class="line">pianoBoy.<span class="title function_">playInstrument</span>()</span><br><span class="line"><span class="keyword">let</span> guitarGirl = <span class="keyword">new</span> <span class="title class_">Girl</span>(guitar)</span><br><span class="line">guitarGirl.<span class="title function_">playInstrument</span>()</span><br></pre></td></tr></table></figure><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>外观模式为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更容易。</p><p><strong>优点：</strong></p><ol><li>访问者不需要再了解子系统内部模块的功能，而只需和外观交互即可，使得访问者对子系统的 使用变得简单 ，符合最少知识原则，增强了可移植性和可读性；</li><li>减少了与子系统模块的直接引用，实现了访问者与子系统中模块之间的松耦合，增加了可维护性和可扩展性；</li><li>通过合理使用外观模式，可以帮助我们更好地划分系统访问层次，比如把需要暴露给外部的功能集中到外观中，这样既方便访问者使用，也很好地隐藏了内部的细节，提升了安全性；</li></ol><p><strong>缺点：</strong></p><ol><li>不符合开闭原则，对修改关闭，对扩展开放，如果外观模块出错，那么只能通过修改的方式来解决问题，因为外观模块是子系统的唯一出口；</li><li>不需要或不合理的使用外观会让人迷惑，过犹不及；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setBox</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> getId = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;isShow&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">show : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">getId.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;,</span><br><span class="line">hide : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">getId.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>运用共享技术来有效地支持大量细粒度对象的复用，以减少创建的对象的数量。通俗来讲，享元就是共享单元，比如现在流行的共享单车、共享充电宝等，他们的核心理念都是享元模式。</p><p><strong>优点：</strong></p><ol><li>由于减少了系统中的对象数量，提高了程序运行效率和性能，精简了内存占用，加快运行速度；</li><li>外部状态相对独立，不会影响到内部状态，所以享元对象能够在不同的环境被共享；</li></ol><p><strong>缺点：</strong></p><ol><li>引入了共享对象，使对象结构变得复杂；</li><li>共享对象的创建、销毁等需要维护，带来额外的复杂度（如果需要把共享对象维护起来的话）；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Upload</span> = <span class="keyword">function</span>(<span class="params">uploadType</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">uploadType</span> = uploadType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除文件（内部状态） */</span></span><br><span class="line"><span class="title class_">Upload</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">delFile</span> = <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  uploadManger.<span class="title function_">setExternalState</span>(id, <span class="variable language_">this</span>);  <span class="comment">// 把当前id对应的外部状态都组装到共享对象中</span></span><br><span class="line">  <span class="comment">// 大于3000k提示</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">fileSize</span> &lt; <span class="number">3000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">dom</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;确定要删除文件吗？&quot;</span> + <span class="variable language_">this</span>.<span class="property">fileName</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">dom</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 工厂对象实例化 </span></span><br><span class="line"><span class="comment"> *  如果某种内部状态的共享对象已经被创建过，那么直接返回这个对象</span></span><br><span class="line"><span class="comment"> *  否则，创建一个新的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UploadFactory</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> createdFlyWeightObjs = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">create</span>: <span class="keyword">function</span>(<span class="params">uploadType</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(createdFlyWeightObjs[uploadType]) &#123;</span><br><span class="line">        <span class="keyword">return</span> createdFlyWeightObjs[uploadType];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> createdFlyWeightObjs[uploadType] = <span class="keyword">new</span> <span class="title class_">Upload</span>(uploadType);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 管理器封装外部状态 */</span></span><br><span class="line"><span class="keyword">var</span> uploadManger = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> uploadDatabase = &#123;&#125;;</span><br><span class="line">​</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">id, uploadType, fileName, fileSize</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> flyWeightObj = <span class="title class_">UploadFactory</span>.<span class="title function_">create</span>(uploadType);</span><br><span class="line">      <span class="keyword">var</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      dom.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;span&gt;文件名称：&quot;</span> + fileName + <span class="string">&quot;，文件大小：&quot;</span> + fileSize +<span class="string">&quot;&lt;/span&gt;&quot;</span></span><br><span class="line">              + <span class="string">&quot;&lt;button class=&#x27;delFile&#x27;&gt;删除&lt;/button&gt;&quot;</span>;</span><br><span class="line">​</span><br><span class="line">      dom.<span class="title function_">querySelector</span>(<span class="string">&quot;.delFile&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        flyWeightObj.<span class="title function_">delFile</span>(id);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(dom);</span><br><span class="line">​</span><br><span class="line">      uploadDatabase[id] = &#123;</span><br><span class="line">        <span class="attr">fileName</span>: fileName,</span><br><span class="line">        <span class="attr">fileSize</span>: fileSize,</span><br><span class="line">        <span class="attr">dom</span>: dom</span><br><span class="line">      &#125;;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">return</span> flyWeightObj;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">setExternalState</span>: <span class="keyword">function</span>(<span class="params">id, flyWeightObj</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> uploadData = uploadDatabase[id];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> uploadData) &#123;</span><br><span class="line">        <span class="comment">// 直接改变形参（新思路！！）</span></span><br><span class="line">        flyWeightObj[i] = uploadData[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">​</span><br><span class="line"><span class="comment">/*触发上传动作*/</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">startUpload</span> = <span class="keyword">function</span>(<span class="params">uploadType, files</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,file; file = files[i++];) &#123;</span><br><span class="line">    <span class="keyword">var</span> uploadObj = uploadManger.<span class="title function_">add</span>(++id, uploadType, file.<span class="property">fileName</span>, file.<span class="property">fileSize</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line"><span class="comment">/* 测试 */</span></span><br><span class="line"><span class="title function_">startUpload</span>(<span class="string">&quot;plugin&quot;</span>, [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;1.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">1000</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;2.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">3000</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;3.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">5000</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br><span class="line"><span class="title function_">startUpload</span>(<span class="string">&quot;flash&quot;</span>, [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;4.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">1000</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;5.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">3000</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">fileName</span>: <span class="string">&#x27;6.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">5000</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><h3 id="组合模式-1"><a href="#组合模式-1" class="headerlink" title="组合模式"></a>组合模式</h3><h3 id="装饰器模式-1"><a href="#装饰器模式-1" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;创建型模式&quot;&gt;&lt;a href=&quot;#创建型模式&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="设计模式" scheme="https://1518277259.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://1518277259.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>websocket解析</title>
    <link href="https://1518277259.github.io/2023/02/18/websocket%E8%A7%A3%E6%9E%90/"/>
    <id>https://1518277259.github.io/2023/02/18/websocket%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-18T02:24:51.000Z</published>
    <updated>2023-03-02T12:29:07.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="websocket解析"><a href="#websocket解析" class="headerlink" title="websocket解析"></a>websocket解析</h1><h3 id="什么是websocket"><a href="#什么是websocket" class="headerlink" title="什么是websocket"></a>什么是websocket</h3><ol><li>WebSocket是HTML5下一种新的协议（websocket协议本质上是一个基于tcp的协议）</li><li>它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯的目的</li><li>Websocket是一个持久化的协议</li></ol><h3 id="websocket的原理"><a href="#websocket的原理" class="headerlink" title="websocket的原理"></a>websocket的原理</h3><ol><li>websocket约定了一个通信的规范，通过一个握手的机制，客户端和服务器之间能建立一个类似tcp的连接，从而方便它们之间的通信</li><li>在websocket出现之前，web交互一般是基于http协议的短连接或者长连接</li><li>websocket是一种全新的协议，不属于http无状态协议，协议名为”ws”</li></ol><h3 id="websocket与http的关系"><a href="#websocket与http的关系" class="headerlink" title="websocket与http的关系"></a>websocket与http的关系</h3><h4 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h4><ol><li>都是基于tcp的，都是可靠性传输协议</li><li>都是应用层协议</li></ol><h4 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h4><ol><li>WebSocket是双向通信协议，模拟Socket协议，可以双向发送或接受信息</li><li>HTTP是单向的</li><li>WebSocket是需要浏览器和服务器握手进行建立连接的</li><li>http是浏览器发起向服务器的连接，服务器预先并不知道这个连接</li></ol><h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4><p>WebSocket在建立握手时，数据是通过HTTP传输的。但是建立之后，在真正传输时候是不需要HTTP协议的</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>首先，客户端发起http请求，经过3次握手后，建立起TCP连接；http请求里存放WebSocket支持的版本号等信息，如：Upgrade、Connection、WebSocket-Version等；</li><li>然后，服务器收到客户端的握手请求后，同样采用HTTP协议回馈数据；</li><li>最后，客户端收到连接成功的消息后，开始借助于TCP传输信道进行全双工通信。</li></ol><h3 id="JS-websocket实现"><a href="#JS-websocket实现" class="headerlink" title="JS websocket实现"></a>JS websocket实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Store</span> <span class="keyword">from</span> <span class="string">&quot;@/store&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebSocketClass</span> &#123;</span><br><span class="line">  <span class="comment">// 要连接的URL</span></span><br><span class="line">  url;</span><br><span class="line">  <span class="comment">// 一个协议字符串或一个协议字符串数组。</span></span><br><span class="line">  <span class="comment">// 这些字符串用来指定子协议，这样一个服务器就可以实现多个WebSocket子协议</span></span><br><span class="line">  protocols;</span><br><span class="line">  <span class="comment">// WebSocket 实例</span></span><br><span class="line">  ws;</span><br><span class="line">  <span class="comment">// 是否在重连中</span></span><br><span class="line">  isReconnectionLoading = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 延时重连的 id</span></span><br><span class="line">  timeId = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 是否是用户手动关闭连接</span></span><br><span class="line">  isCustomClose = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 错误消息队列</span></span><br><span class="line">  errorStack = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">url, protocols</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">url</span> = url;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">protocols</span> = protocols;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createWs</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createWs</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;WebSocket&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">      <span class="comment">// 实例化</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="variable language_">this</span>.<span class="property">url</span>, <span class="variable language_">this</span>.<span class="property">protocols</span>);</span><br><span class="line">      <span class="comment">// 监听事件</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">onopen</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">onerror</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">onclose</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">onmessage</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你的浏览器不支持 WebSocket&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听成功</span></span><br><span class="line">  <span class="title function_">onopen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onopen&quot;</span>);</span><br><span class="line">      <span class="comment">// 发送成功连接之前所发送失败的消息</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">errorStack</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">send</span>(message);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">errorStack</span> = [];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isReconnectionLoading</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听错误</span></span><br><span class="line">  <span class="title function_">onerror</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onerror</span> = <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err, <span class="string">&quot;onerror&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reconnection</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isReconnectionLoading</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听关闭</span></span><br><span class="line">  <span class="title function_">onclose</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onclose&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 用户手动关闭的不重连</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isCustomClose</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reconnection</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isReconnectionLoading</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接收 WebSocket 消息</span></span><br><span class="line">  <span class="title function_">onmessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title class_">Store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;user/setData&quot;</span>, event.<span class="property">data</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否连接中</span></span><br><span class="line">  <span class="title function_">isConnection</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重连</span></span><br><span class="line">  <span class="title function_">reconnection</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 防止重复</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isReconnectionLoading</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isReconnectionLoading</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timeId</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timeId</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createWs</span>();</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送消息</span></span><br><span class="line">  <span class="title function_">send</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="comment">// 连接失败时的处理</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">readyState</span> !== <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">errorStack</span>.<span class="title function_">push</span>(message);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">send</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动关闭</span></span><br><span class="line">  <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isCustomClose</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">close</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动开启</span></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isCustomClose</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reconnection</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 销毁</span></span><br><span class="line">  <span class="title function_">destroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">close</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">errorStack</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">WebSocketClass</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;websocket解析&quot;&gt;&lt;a href=&quot;#websocket解析&quot; class=&quot;headerlink&quot; title=&quot;websocket解析&quot;&gt;&lt;/a&gt;websocket解析&lt;/h1&gt;&lt;h3 id=&quot;什么是websocket&quot;&gt;&lt;a href=&quot;#什么是we</summary>
      
    
    
    
    <category term="websocket" scheme="https://1518277259.github.io/categories/websocket/"/>
    
    
    <category term="websocket" scheme="https://1518277259.github.io/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>webpack解析</title>
    <link href="https://1518277259.github.io/2023/02/17/webpack%E8%A7%A3%E6%9E%90/"/>
    <id>https://1518277259.github.io/2023/02/17/webpack%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-17T02:24:51.000Z</published>
    <updated>2023-03-02T12:15:57.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack解析"><a href="#webpack解析" class="headerlink" title="webpack解析"></a>webpack解析</h1><h2 id="webpack的理解"><a href="#webpack的理解" class="headerlink" title="webpack的理解"></a>webpack的理解</h2><p>webpack 是一个用于现代 JavaScript 应用程序的静态模块打包工具。我们可以使用webpack管理模块。因为在webpack看来，项目中的所有资源皆为模块，通过分析模块间的依赖关系，在其内部构建出一个依赖图，最终编绎输出模块为 HTML、JavaScript、CSS 以及各种静态文件（图片、字体等），让我们的开发过程更加高效。</p><h2 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h2><ol><li>模块打包：可以将不同模块的文件打包整合在一起，并且保证它们之间的引用正确，执行有序。利用打包我们就可以在开发的时候根据我们自己的业务自由划分文件模块，保证项目结构的清晰和可读性。</li><li>编译兼容：在前端的“上古时期”，手写一堆浏览器兼容代码一直是令前端工程师头皮发麻的事情，而在今天这个问题被大大的弱化了，通过webpack的Loader机制，不仅仅可以帮助我们对代码做polyfill，还可以编译转换诸如.less，.vue，.jsx这类在浏览器无法识别的格式文件，让我们在开发的时候可以使用新特性和新语法做开发，提高开发效率。</li><li>能力扩展:通过webpack的Plugin机制，我们在实现模块化打包和编译兼容的基础上，可以进一步实现诸如按需加载，代码压缩等一系列功能，帮助我们进一步提高自动化程度，工程效率以及打包输出的质量。</li></ol><h2 id="webpack的构建流程"><a href="#webpack的构建流程" class="headerlink" title="webpack的构建流程"></a>webpack的构建流程</h2><ol><li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</li><li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</li><li>确定入口：根据配置中的 entry 找出所有的入口文件</li><li>编译模块：从入口文件出发，调用所有配置的 loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li>完成模块编译：在经过上一步使用 loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li><li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ol><h2 id="常见的loader"><a href="#常见的loader" class="headerlink" title="常见的loader"></a>常见的loader</h2><ol><li>image-loader：加载并且压缩图片文件。</li><li>less-loader： 加载并编译 LESS 文件。</li><li>sass-loader：加载并编译 SASS&#x2F;SCSS 文件。</li><li>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性，使用css-loader必须要配合使用style-loader。</li><li>style-loader：用于将 CSS 编译完成的样式，挂载到页面的 style 标签上。需要注意 loader 执行顺序，style-loader 要放在第一位，loader 都是从后往前执行。</li><li>babel-loader：把 ES6 转换成 ES5</li><li>postcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀。</li><li>eslint-loader：通过 ESLint 检查 JavaScript 代码。</li><li>vue-loader：加载并编译 Vue 组件。</li><li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)</li><li>url-loader：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)</li></ol><h2 id="常见的plugin有哪些？"><a href="#常见的plugin有哪些？" class="headerlink" title="常见的plugin有哪些？"></a>常见的plugin有哪些？</h2><ol><li>HtmlWebpackPlugin：简化 HTML 文件创建 (依赖于 html-loader)</li><li>mini-css-extract-plugin: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代extract-text-webpack-plugin)</li><li>clean-webpack-plugin: 目录清理</li></ol><h2 id="loader和plugin的区别？"><a href="#loader和plugin的区别？" class="headerlink" title="loader和plugin的区别？"></a>loader和plugin的区别？</h2><p>&amp;emsp;&amp;emsp;loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中；<br><br>&amp;emsp;&amp;emsp;plugin赋予了webpack各种灵活的功能，例如打包优化、资源管理、环境变量注入等，目的是解决 loader无法实现的其他事。<br><br>&amp;emsp;&amp;emsp;在运行时机上，loader 运行在打包文件之前；plugin则是在整个编译周期都起作用。<br><br>&amp;emsp;&amp;emsp;在配置上，loader在module.rules中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性；plugin在 plugins中单独配置，类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入。</p><h2 id="webpack的热更新原理是？"><a href="#webpack的热更新原理是？" class="headerlink" title="webpack的热更新原理是？"></a>webpack的热更新原理是？</h2><p>&amp;emsp;&amp;emsp;模块热替换(HMR - hot module replacement)，又叫做热更新，在不需要刷新整个页面的同时更新模块，能够提升开发的效率和体验。热更新时只会局部刷新页面上发生了变化的模块，同时可以保留当前页面的状态，比如复选框的选中状态等。<br><br>&amp;emsp;&amp;emsp;热更新的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上webpack-dev-server与浏览器之间维护了一个websocket，当本地资源发生变化时，webpack-dev-server会向浏览器推送更新，并带上构建时的hash，让客户端与上一次资源进行对比。客户端对比出差异后会向webpack-dev-server发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向webpack-dev-server发起 jsonp 请求获取该chunk的增量更新。<br><br>&amp;emsp;&amp;emsp;后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader和vue-loader都是借助这些 API 实现热更新。</p><h2 id="如何提高webpack的构建速度？"><a href="#如何提高webpack的构建速度？" class="headerlink" title="如何提高webpack的构建速度？"></a>如何提高webpack的构建速度？</h2><ol><li>代码压缩</li></ol><ul><li>JS压缩：<br><br>&amp;emsp;&amp;emsp;webpack 4.0默认在生产环境的时候是支持代码压缩的，即mode&#x3D;production模式下。<br>实际上webpack 4.0默认是使用terser-webpack-plugin这个压缩插件，在此之前是使用 uglifyjs-webpack-plugin，两者的区别是后者对 ES6 的压缩不是很好，同时我们可以开启 parallel参数，使用多进程压缩，加快压缩。</li><li>CSS压缩<br><br>&amp;emsp;&amp;emsp;CSS 压缩通常是去除无用的空格等，因为很难去修改选择器、属性的名称、值等。可以使用另外一个插件：css-minimizer-webpack-plugin。<br></li><li>HTML压缩<br>&amp;emsp;&amp;emsp;使用HtmlWebpackPlugin插件来生成 HTML 的模板时候，通过配置属性minify进行 html 优化。</li></ul><ol start="2"><li>图片压缩:配置image-webpack-loader</li><li>Tree Shaking:</li><li>缩小打包域:<br><br>&amp;emsp;&amp;emsp;排除webpack不需要解析的模块，即在使用loader的时候，在尽量少的模块中去使用。可以借助 include和exclude这两个参数，规定loader只在那些模块应用和在哪些模块不应用。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;webpack解析&quot;&gt;&lt;a href=&quot;#webpack解析&quot; class=&quot;headerlink&quot; title=&quot;webpack解析&quot;&gt;&lt;/a&gt;webpack解析&lt;/h1&gt;&lt;h2 id=&quot;webpack的理解&quot;&gt;&lt;a href=&quot;#webpack的理解&quot; cla</summary>
      
    
    
    
    <category term="webpack" scheme="https://1518277259.github.io/categories/webpack/"/>
    
    
    <category term="webpack" scheme="https://1518277259.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>模块化方案</title>
    <link href="https://1518277259.github.io/2023/02/16/%E6%A8%A1%E5%9D%97%E5%8C%96%E6%96%B9%E6%A1%88/"/>
    <id>https://1518277259.github.io/2023/02/16/%E6%A8%A1%E5%9D%97%E5%8C%96%E6%96%B9%E6%A1%88/</id>
    <published>2023-02-16T01:34:55.000Z</published>
    <updated>2023-03-02T12:11:45.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模块化方案"><a href="#模块化方案" class="headerlink" title="模块化方案"></a>模块化方案</h3><h4 id="模块化优点"><a href="#模块化优点" class="headerlink" title="模块化优点"></a>模块化优点</h4><ol><li>可维护性：每个模块都是单独定义的，之间相互独立</li><li>命名空间：为了避免在JavaScript中的全局污染，我们通过模块化的方式利用函数作用域来构建命名空间</li><li>可复用</li></ol><h4 id="模块化方案-1"><a href="#模块化方案-1" class="headerlink" title="模块化方案"></a>模块化方案</h4><h5 id="揭示模块模式-Reveaing-Module"><a href="#揭示模块模式-Reveaing-Module" class="headerlink" title="揭示模块模式(Reveaing Module)"></a>揭示模块模式(Reveaing Module)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myRevealingModule = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> privateVar = “<span class="title class_">Ben</span> <span class="title class_">Cherry</span>”,</span><br><span class="line">  publicVar = “<span class="title class_">Hey</span> there!”;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">privateFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Name:&quot;</span> + privateVar );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">publicSetName</span>(<span class="params"> strName </span>) &#123;</span><br><span class="line">      privateVar = strName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">publicGetName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">privateFunction</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">setName</span>: publicSetName,</span><br><span class="line">      <span class="attr">greeting</span>: publicVar,</span><br><span class="line">      <span class="attr">getName</span>: publicGetName</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">myRevealingModule.<span class="title function_">setName</span>( “<span class="title class_">Paul</span> <span class="title class_">Kinlan</span>” );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><b>优点:</b> <br></p><ol><li>可以在任何地方实现（没有库，不需要语言支持）。</li><li>可以在单个文件中定义多个模块。</li></ol><p><b>缺点:</b> <br></p><ol><li>无法以编程方式导入模块（除非使用eval）。</li><li>需要手动处理依赖关系。</li><li>无法异步加载模块。<br>4。 循环依赖可能很麻烦。</li><li>很难通过静态代码分析器进行分析。</li></ol><hr><h5 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h5><p>CommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作(require 和 exports)</p><p><b>优点:</b> <br></p><ol><li>简单：开发人员可以在不查看文档的情况下掌握概念。</li><li>集成了依赖管理：模块需要其他模块并按所需顺序加载。</li><li>require可以在任何地方调用：模块可以通过编程方式加载。</li></ol><p><b>缺点:</b> <br></p><ol><li>同步API使其不适合某些用途（客户端）。</li><li>每个模块一个文件。</li><li>浏览器需要加载程序库或转换。</li><li>模块没有构造函数（Node支持）。</li><li>很难进行静态代码分析。<hr>##### AMD</li></ol><p>AMD规范则是异步加载模块，允许指定回调函数，通过返回一个对象做为模块对象</p><p><b>优点:</b> <br></p><ol><li>异步加载（更好的启动时间）。</li><li>支持循环依赖。</li><li>require和的兼容性exports。</li><li>完全整合了依赖管理。</li><li>如有必要，可以将模块拆分为多个文件。</li><li>支持构造函数。</li><li>插件支持（自定义加载步骤）。</li></ol><p><b>缺点:</b> <br></p><ol><li>语法稍微复杂一些。</li><li>除非编译，否则需要加载程序库。</li><li>很难分析静态代码。</li><li>除了异步加载以外，AMD的另一个优点是你可以在模块里使用对象、函数、构造函数、字符串、JSON或者别的数据类型，而CommonJS只支持对象。<h5 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h5></li></ol><p>统一模块定义（UMD：Universal Module Definition ）就是将 AMD 和 CommonJS<br>合在一起的一种尝试，常见的做法是将CommonJS 语法包裹在兼容 AMD 的代码中。</p><hr><h5 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h5><p>支持JavaScript标准化的ECMA团队决定解决模块问题，<br>兼容同步和异步操作模式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;模块化方案&quot;&gt;&lt;a href=&quot;#模块化方案&quot; class=&quot;headerlink&quot; title=&quot;模块化方案&quot;&gt;&lt;/a&gt;模块化方案&lt;/h3&gt;&lt;h4 id=&quot;模块化优点&quot;&gt;&lt;a href=&quot;#模块化优点&quot; class=&quot;headerlink&quot; title=&quot;模块化</summary>
      
    
    
    
    <category term="模块" scheme="https://1518277259.github.io/categories/%E6%A8%A1%E5%9D%97/"/>
    
    
    <category term="模块" scheme="https://1518277259.github.io/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝和浅拷贝</title>
    <link href="https://1518277259.github.io/2022/04/15/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://1518277259.github.io/2022/04/15/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2022-04-15T01:37:43.000Z</published>
    <updated>2022-04-15T01:38:33.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>只复制引用，而未复制真正的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const originArray = [1,2,3,4,5];</span><br><span class="line">const originObj = &#123;a:&#x27;a&#x27;,b:&#x27;b&#x27;,c:[1,2,3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;;</span><br><span class="line"></span><br><span class="line">const cloneArray = originArray;</span><br><span class="line">const cloneObj = originObj;</span><br><span class="line"></span><br><span class="line">console.log(cloneArray); // [1,2,3,4,5]</span><br><span class="line">console.log(originObj); // &#123;a:&#x27;a&#x27;,b:&#x27;b&#x27;,c:Array[3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;</span><br><span class="line"></span><br><span class="line">cloneArray.push(6);</span><br><span class="line">cloneObj.a = &#123;aa:&#x27;aa&#x27;&#125;;</span><br><span class="line"></span><br><span class="line">console.log(cloneArray); // [1,2,3,4,5,6]</span><br><span class="line">console.log(originArray); // [1,2,3,4,5,6]</span><br><span class="line"></span><br><span class="line">console.log(cloneObj); // &#123;a:&#123;aa:&#x27;aa&#x27;&#125;,b:&#x27;b&#x27;,c:Array[3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;</span><br><span class="line">console.log(originArray); // &#123;a:&#123;aa:&#x27;aa&#x27;&#125;,b:&#x27;b&#x27;,c:Array[3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝就是对目标的完全拷贝，不像浅拷贝那样只是复制了一层引用，就连值也都复制了。只要进行了深拷贝，它们老死不相往来，谁也不会影响谁。</p><h4 id="实现深拷贝的两种方法"><a href="#实现深拷贝的两种方法" class="headerlink" title="实现深拷贝的两种方法"></a>实现深拷贝的两种方法</h4><p><strong>JSON.stringify&#x2F;parse的方法</strong></p><p>如果对象含有一个函数时，不能用这个方法进行深拷贝，因为undefine、function、symbol会在转换过程中被忽略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const originArray = [1,2,3,4,5];</span><br><span class="line">const cloneArray = JSON.parse(JSON.stringify(originArray));</span><br><span class="line">console.log(cloneArray === originArray); // false</span><br><span class="line"></span><br><span class="line">const originObj = &#123;a:&#x27;a&#x27;,b:&#x27;b&#x27;,c:[1,2,3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;;</span><br><span class="line">const cloneObj = JSON.parse(JSON.stringify(originObj));</span><br><span class="line">console.log(cloneObj === originObj); // false</span><br><span class="line"></span><br><span class="line">cloneObj.a = &#x27;aa&#x27;;</span><br><span class="line">cloneObj.c = [1,1,1];</span><br><span class="line">cloneObj.d.dd = &#x27;doubled&#x27;;</span><br><span class="line"></span><br><span class="line">console.log(cloneObj); // &#123;a:&#x27;aa&#x27;,b:&#x27;b&#x27;,c:[1,1,1],d:&#123;dd:&#x27;doubled&#x27;&#125;&#125;;</span><br><span class="line">console.log(originObj); // &#123;a:&#x27;a&#x27;,b:&#x27;b&#x27;,c:[1,2,3],d:&#123;dd:&#x27;dd&#x27;&#125;&#125;;</span><br></pre></td></tr></table></figure><p><strong>递归的方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function deepClone(source)&#123;</span><br><span class="line">  const targetObj = source.constructor === Array ? [] : &#123;&#125;; // 判断复制的目标是数组还是对象</span><br><span class="line">  for(let keys in source)&#123; // 遍历目标</span><br><span class="line">    if(source.hasOwnProperty(keys))&#123;</span><br><span class="line">      if(source[keys] &amp;&amp; typeof source[keys] === &#x27;object&#x27;)&#123; // 如果值是对象，就递归一下</span><br><span class="line">        targetObj[keys] = source[keys].constructor === Array ? [] : &#123;&#125;;</span><br><span class="line">        targetObj[keys] = deepClone(source[keys]);</span><br><span class="line">      &#125;else&#123; // 如果不是，就直接赋值</span><br><span class="line">        targetObj[keys] = source[keys];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  return targetObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>赋值运算符 &#x3D; 实现的是浅拷贝，只拷贝对象的引用值；</li><li>JavaScript 中数组和对象自带的拷贝方法都是“首层浅拷贝”；</li><li>JSON.stringify 实现的是深拷贝，但是对目标对象有要求；</li><li>若想真正意义上的深拷贝，请递归。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;浅拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝&quot;&gt;&lt;/a&gt;浅拷贝&lt;/h3&gt;&lt;p&gt;只复制引用，而未复制真正的值&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    <category term="JS" scheme="https://1518277259.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="https://1518277259.github.io/2022/04/15/Promise/"/>
    <id>https://1518277259.github.io/2022/04/15/Promise/</id>
    <published>2022-04-15T01:14:04.000Z</published>
    <updated>2022-04-15T01:15:12.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Promise 是异步编程的一种解决方案： 从语法上讲，promise是一个对象，从它可以获取异步操作的消息；从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。</p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><ul><li>在 pending 状态，promise 可以切换到 fulfilled 或 rejected。</li><li>在 fulfilled 状态，不能迁移到其它状态，必须有个不可变的 value。</li><li>在 rejected 状态，不能迁移到其它状态，必须有个不可变的 reason。</li><li></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyPromise</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="variable language_">this</span>; <span class="comment">// 缓存当前promise实例</span></span><br><span class="line">    self.<span class="property">value</span> = <span class="literal">null</span>; <span class="comment">//成功时的值</span></span><br><span class="line">    self.<span class="property">error</span> = <span class="literal">null</span>; <span class="comment">//失败时的原因</span></span><br><span class="line">    self.<span class="property">onFulfilled</span> = <span class="literal">null</span>; <span class="comment">//成功的回调函数</span></span><br><span class="line">    self.<span class="property">onRejected</span> = <span class="literal">null</span>; <span class="comment">//失败的回调函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        self.<span class="property">value</span> = value;</span><br><span class="line">        self.<span class="title function_">onFulfilled</span>(self.<span class="property">value</span>);<span class="comment">//resolve时执行成功回调</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        self.<span class="property">error</span> = error;</span><br><span class="line">        self.<span class="title function_">onRejected</span>(self.<span class="property">error</span>)<span class="comment">//reject时执行失败回调</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(resolve, reject);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">//在这里给promise实例注册成功和失败回调</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilled</span> = onFulfilled;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejected</span> = onRejected;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">MyPromise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;Promise 是异步编程的一种解决方案： 从语法上讲，promise是一个对象，从它可以获取异步操作的消息；从本意上讲，它是承诺，承诺它过</summary>
      
    
    
    
    <category term="JS" scheme="https://1518277259.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>原型和原型链</title>
    <link href="https://1518277259.github.io/2022/04/14/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE-1/"/>
    <id>https://1518277259.github.io/2022/04/14/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE-1/</id>
    <published>2022-04-14T02:19:01.000Z</published>
    <updated>2022-04-14T03:07:14.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><img src="/2022/04/14/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE-1/prototype.png" class title="This is an test image"><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>每个对象拥有一个原型对象，通过 __proto__ 指针指向上一个原型 ，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向 null。这种关系被称为原型链 (prototype chain)，通过原型链一个对象会拥有定义在其他对象中的属性和方法。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>Symbol 作为构造函数来说并不完整，因为不支持语法 new Symbol()，但其原型上拥有 constructor 属性，即 Symbol.prototype.constructor。</li><li>引用类型 constructor 属性值是可以修改的，但是对于基本类型来说是只读的，当然 null 和 undefined 没有 constructor 属性。</li><li>__proto__ 是每个实例上都有的属性，prototype 是构造函数的属性，这两个并不一样，但  p.__proto__  和 Parent.prototype 指向同一个对象。</li><li>__proto__ 属性在 ES6 时被标准化，但因为性能问题并不推荐使用，推荐使用 Object.getPrototypeOf()。</li><li>每个对象拥有一个原型对象，通过 __proto__ 指针指向上一个原型 ，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向 null，这就是原型链。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h3&gt;&lt;img src=&quot;/2022/04/14/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93</summary>
      
    
    
    
    <category term="JS" scheme="https://1518277259.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>call、apply、bind简介</title>
    <link href="https://1518277259.github.io/2022/04/13/call%E3%80%81apply%E3%80%81bind%E7%AE%80%E4%BB%8B/"/>
    <id>https://1518277259.github.io/2022/04/13/call%E3%80%81apply%E3%80%81bind%E7%AE%80%E4%BB%8B/</id>
    <published>2022-04-13T01:34:55.000Z</published>
    <updated>2022-04-13T01:35:38.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>call 是属于所有 Function 的方法，也就是 Function.prototype.call。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">call</span>(thisArg[,arg1[,arg2,…]]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用-call-调用函数并且指定-this"><a href="#使用-call-调用函数并且指定-this" class="headerlink" title="使用 call 调用函数并且指定 this"></a>使用 call 调用函数并且指定 this</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  a: 1</span><br><span class="line">&#125;</span><br><span class="line">function foo(b, c)&#123;</span><br><span class="line">  this.b = b;</span><br><span class="line">  this.c = c;</span><br><span class="line">  console.log(this.a + this.b + this.c);</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj,2,3); // 6</span><br></pre></td></tr></table></figure><h4 id="call-实现继承"><a href="#call-实现继承" class="headerlink" title="call 实现继承"></a>call 实现继承</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">  this.say = function()&#123;</span><br><span class="line">    console.log(this.name + &quot;:&quot; + this.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">function Student(name, age, job)&#123;</span><br><span class="line">  Person.call(this, name ,age);</span><br><span class="line">  this.job = job;</span><br><span class="line">  this.say = function()&#123;</span><br><span class="line">    console.log(this.name + &quot;:&quot; + this.age + &quot; &quot; + this.job);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var me = new Student(&quot;axuebin&quot;,25,&quot;FE&quot;);</span><br><span class="line">console.log(me.say()); // axuebin:25 FE</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>apply 也是属于所有 Function 的方法，也就是 Function.prototype.apply。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">apply</span>(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><p>和 call 用法一样，只是参数不同，call 的参数是列表，将每个参数都列出来；apply 的参数是数组，将每个参数放到一个数组中</p><h4 id="完整的-apply"><a href="#完整的-apply" class="headerlink" title="完整的 apply"></a>完整的 apply</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myApply=function(context)&#123;</span><br><span class="line">  // 获取调用`myApply`的函数本身，用this获取，如果context不存在，则为window</span><br><span class="line">  var context = context || window;</span><br><span class="line">  var fn = Symbol();</span><br><span class="line">  context[fn] = this;</span><br><span class="line">  //获取传入的数组参数</span><br><span class="line">  var args = arguments[1];</span><br><span class="line">  if (args == undefined) &#123; //没有传入参数直接执行</span><br><span class="line">    // 执行这个函数</span><br><span class="line">    context[fn]()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 执行这个函数</span><br><span class="line">    context[fn](...args);</span><br><span class="line">  &#125;</span><br><span class="line">  // 从上下文中删除函数引用</span><br><span class="line">  delete context.fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>bind()方法创建一个新的函数,当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">bind</span>(thisArg[, arg1[, arg2[, ...]]])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person(name)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.say = function()&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">      console.log(&quot;hello &quot; + this.name);</span><br><span class="line">    &#125;.bind(this),1000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var person = new Person(&quot;axuebin&quot;);</span><br><span class="line">person.say(); //hello axuebin</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>三者都是用来改变函数的 this 指向</li><li>三者的第一个参数都是 this 指向的对象</li><li>bind 是返回一个绑定函数可稍后执行，call、apply 是立即调用</li><li>三者都可以给定参数传递</li><li>call 给定参数需要将参数全部列出，apply 给定参数数组</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;call&quot;&gt;&lt;a href=&quot;#call&quot; class=&quot;headerlink&quot; title=&quot;call&quot;&gt;&lt;/a&gt;call&lt;/h3&gt;&lt;p&gt;call 是属于所有 Function 的方法，也就是 Function.prototype.call。&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="JS" scheme="https://1518277259.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>执行上下文、作用域链、闭包</title>
    <link href="https://1518277259.github.io/2022/04/12/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E3%80%81%E9%97%AD%E5%8C%85/"/>
    <id>https://1518277259.github.io/2022/04/12/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E3%80%81%E9%97%AD%E5%8C%85/</id>
    <published>2022-04-12T06:26:26.000Z</published>
    <updated>2022-04-12T06:30:59.164Z</updated>
    
    <content type="html"><![CDATA[<h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><p>执行上下文是评估和执行 JavaScript 代码的环境的抽象概念</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><ul><li>全局执行上下文</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">它创建会执行两件事：创建一个全局的window对象，</span><br><span class="line">并设置this的值等于这个全局的对象。一个程序只会有一个全局对象</span><br></pre></td></tr></table></figure><ul><li>函数执行上下文</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">每个函数都有它自己的执行上下文，不过是在函数被调用时创建的；</span><br><span class="line">this的值取决于该函数是怎样被调用的，如果是被一个对象引用调用，指向这个对象，否则指向全局对象</span><br></pre></td></tr></table></figure><ul><li>Eval 函数执行上下文</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行在 eval 函数内部的代码也会有它属于自己的执行上下文</span><br></pre></td></tr></table></figure><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>当 JavaScript 引擎第一次遇到你的脚本时，它会创建一个全局的执行上下文并且压入当前执行栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。<br></p><p>引擎会执行那些执行上下文位于栈顶的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域决定这个变量的生命周期及其可见性。 当我们创建了一个函数或者 {} 块，就会生成一个新的作用域</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;执行上下文&quot;&gt;&lt;a href=&quot;#执行上下文&quot; class=&quot;headerlink&quot; title=&quot;执行上下文&quot;&gt;&lt;/a&gt;执行上下文&lt;/h3&gt;&lt;p&gt;执行上下文是评估和执行 JavaScript 代码的环境的抽象概念&lt;/p&gt;
&lt;h4 id=&quot;类型&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="JS" scheme="https://1518277259.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="https://1518277259.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>在地址栏里输入一个地址回车会发生哪些事情</title>
    <link href="https://1518277259.github.io/2022/04/11/%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E9%87%8C%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%9C%B0%E5%9D%80%E5%9B%9E%E8%BD%A6%E4%BC%9A%E5%8F%91%E7%94%9F%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85/"/>
    <id>https://1518277259.github.io/2022/04/11/%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E9%87%8C%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%9C%B0%E5%9D%80%E5%9B%9E%E8%BD%A6%E4%BC%9A%E5%8F%91%E7%94%9F%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85/</id>
    <published>2022-04-11T03:36:45.000Z</published>
    <updated>2022-04-11T03:38:52.997Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解析-URL："><a href="#解析-URL：" class="headerlink" title="解析 URL："></a>解析 URL：</h3><p>首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</p><h3 id="缓存判断："><a href="#缓存判断：" class="headerlink" title="缓存判断："></a>缓存判断：</h3><p>浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</p><h3 id="DNS-解析："><a href="#DNS-解析：" class="headerlink" title="DNS 解析："></a>DNS 解析：</h3><p>下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</p><h3 id="获取-MAC-地址："><a href="#获取-MAC-地址：" class="headerlink" title="获取 MAC 地址："></a>获取 MAC 地址：</h3><p>当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</p><h3 id="TCP-三次握手："><a href="#TCP-三次握手：" class="headerlink" title="TCP 三次握手："></a>TCP 三次握手：</h3><p>下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向客户端发送一个 SYN ACK 报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个 ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</p><h3 id="HTTPS-握手："><a href="#HTTPS-握手：" class="headerlink" title="HTTPS 握手："></a>HTTPS 握手：</h3><p>如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</p><h3 id="返回数据："><a href="#返回数据：" class="headerlink" title="返回数据："></a>返回数据：</h3><p>当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</p><h3 id="页面渲染："><a href="#页面渲染：" class="headerlink" title="页面渲染："></a>页面渲染：</h3><p>浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</p><h3 id="TCP-四次挥手："><a href="#TCP-四次挥手：" class="headerlink" title="TCP 四次挥手："></a>TCP 四次挥手：</h3><p>最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;解析-URL：&quot;&gt;&lt;a href=&quot;#解析-URL：&quot; class=&quot;headerlink&quot; title=&quot;解析 URL：&quot;&gt;&lt;/a&gt;解析 URL：&lt;/h3&gt;&lt;p&gt;首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议</summary>
      
    
    
    
    <category term="http" scheme="https://1518277259.github.io/categories/http/"/>
    
    
    <category term="http" scheme="https://1518277259.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>TCP和UDP的区别</title>
    <link href="https://1518277259.github.io/2022/04/11/TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://1518277259.github.io/2022/04/11/TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-04-11T03:30:48.000Z</published>
    <updated>2022-04-11T03:31:31.095Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>TCP 是面向连接的协议</td><td>UDP 的无连接的协议</td></tr><tr><td>TCP 在发送数据前需要建立连接</td><td>UDP 无需建立连接就可以发送大量数据</td></tr><tr><td>TCP 回按照特定的顺序重新排列数据包</td><td>UDP 数据包没有固定顺序，所有数据包相互独立</td></tr><tr><td>TCP 传输速度比较慢</td><td>UDP 的传输会更快</td></tr><tr><td>TCP 的头部字节有 20 字节</td><td>UDP 的头部字节只需要 8 个字节</td></tr><tr><td>TCP 是重量级的，在发送数据前需要进行三次握手建立连接</td><td>UDP 是轻量级的，没有跟踪链接，消息排序</td></tr><tr><td>TCP 会进行错误校验，并进行错误恢复</td><td>UDP 也会进行错误检查，但会丢掉错误的数据包</td></tr><tr><td>TCP 有发送确认</td><td>UDP 没有发送确认</td></tr><tr><td>TCP 会使用握手协议</td><td>无握手协议</td></tr><tr><td>TCP 是可靠的，可以确保将数据传送到路由器</td><td>在 UDP 中不能确保数据传送到目标</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TCP&lt;/th&gt;
&lt;th&gt;UDP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;TCP 是面向连接的协议&lt;/td&gt;
&lt;td&gt;UDP 的无连接的协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP 在发送数</summary>
      
    
    
    
    <category term="http" scheme="https://1518277259.github.io/categories/http/"/>
    
    
    <category term="http" scheme="https://1518277259.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>GEI和POST的区别</title>
    <link href="https://1518277259.github.io/2022/04/11/GEI%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://1518277259.github.io/2022/04/11/GEI%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-04-11T03:03:49.000Z</published>
    <updated>2022-04-11T03:29:41.055Z</updated>
    
    <content type="html"><![CDATA[<ul><li>数据传输方式不同：GET 请求通过 URL 传输数据，而 POST 的数据通过请求体传输。</li><li>安全性不同：POST 的数据因为在请求主体内，所以有一定的安全性保证，而 GET 的数据在 URL 中，通过历史记录，缓存很容易查到数据信息。</li><li>数据类型不同：GET 只允许 ASCII 字符，而 POST 无限制</li><li>GET 无害： 刷新、后退等浏览器操作 GET 请求是无害的，POST 可能重复提交表单</li><li>特性不同：GET 是安全（这里的安全是指只读特性，就是使用这个方法不会引起服务器状态变化）且幂等（幂等的概念是指同一个请求方法执行多次和仅执行一次的效果完全相同），而 POST 是非安全非幂等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;数据传输方式不同：GET 请求通过 URL 传输数据，而 POST 的数据通过请求体传输。&lt;/li&gt;
&lt;li&gt;安全性不同：POST 的数据因为在请求主体内，所以有一定的安全性保证，而 GET 的数据在 URL 中，通过历史记录，缓存很容易查到数据信息。&lt;/li&gt;</summary>
      
    
    
    
    <category term="http" scheme="https://1518277259.github.io/categories/http/"/>
    
    
    <category term="http" scheme="https://1518277259.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>HTTP和HTTPS的区别</title>
    <link href="https://1518277259.github.io/2022/04/11/HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://1518277259.github.io/2022/04/11/HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-04-11T02:54:56.000Z</published>
    <updated>2022-04-11T03:03:29.058Z</updated>
    
    <content type="html"><![CDATA[<ol><li>http 是客户端和服务器请求和应答的标准的(TCP)超文本传输协议，使浏览器更高效，网络传输减少；https 简单来说就是 http+SSL，作用 1 是建立信息安全通道，保证数据传输安全，2 是确认网站真实性</li><li>https 协议需要证书，一般免费证书少，需要一定费用；</li><li>http 是超文本传输协议，信息是明文传输；https 则是具有 ssl 加密的传输协议</li><li>连接方式不同，端口不同，http:80 https:443</li><li>http 连接是无状态的；https 协议是有 SSL+Http 协议构成的可进行加密传输、身份认证的网络协议，比 http 协议更安全。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;http 是客户端和服务器请求和应答的标准的(TCP)超文本传输协议，使浏览器更高效，网络传输减少；https 简单来说就是 http+SSL，作用 1 是建立信息安全通道，保证数据传输安全，2 是确认网站真实性&lt;/li&gt;
&lt;li&gt;https 协议需要证书，一般</summary>
      
    
    
    
    <category term="http" scheme="https://1518277259.github.io/categories/http/"/>
    
    
    <category term="http" scheme="https://1518277259.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态码简介</title>
    <link href="https://1518277259.github.io/2022/04/11/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E7%AE%80%E4%BB%8B/"/>
    <id>https://1518277259.github.io/2022/04/11/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E7%AE%80%E4%BB%8B/</id>
    <published>2022-04-11T02:36:27.000Z</published>
    <updated>2022-04-11T02:50:04.481Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、1-开头"><a href="#一、1-开头" class="headerlink" title="一、1 开头"></a>一、1 开头</h4><p><strong>1xx(临时响应)表示临时响应并需要请求者继续执行操作的状态代码</strong></p><p><strong>100</strong> (继续) 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</p><p><strong>101</strong> (切换协议) 请求者已要求服务器切换协议，服务器已确认并准备切换。</p><hr><h4 id="二、2-开头"><a href="#二、2-开头" class="headerlink" title="二、2 开头"></a>二、2 开头</h4><p><strong>2xx (成功)表示成功处理了请求的状态代码</strong></p><p><strong>200</strong> (成功) 服务器已成功处理了请求，通常表示服务器提供了请求的网关</p><p><strong>201</strong> (已创建) 请求成功并且服务器创建了新的资源。</p><p><strong>202</strong> (已接受) 服务器已接受请求，但尚未处理。</p><p><strong>203</strong> (非授权信息) 服务器已成功处理了请求，但返回的信息可能来自另一来源。</p><p><strong>204</strong> (无内容) 服务器成功处理了请求，但没有返回任何内容。</p><p><strong>205</strong> (重置内容) 服务器成功处理了请求，但没有返回任何内容。</p><p><strong>206</strong> (部分内容) 服务器成功处理了部分 GET 请求。</p><hr><h4 id="三、3-开头"><a href="#三、3-开头" class="headerlink" title="三、3 开头"></a>三、3 开头</h4><p><strong>3xx (重定向) 表示要完成请求，需要进一步操作。 通常这些状态代码用来重定向</strong></p><p><strong>300</strong> (多种选择) 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</p><p><strong>301</strong> (永久移动) 请求的网页已永久移动到新位置。 服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。</p><p><strong>302</strong> (临时移动) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p><p><strong>303</strong> (查看其他位置) 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</p><p><strong>304</strong> (未修改) 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</p><p><strong>305</strong> (使用代理) 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</p><p><strong>307</strong> (临时重定向) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p><hr><h4 id="四、4-开头"><a href="#四、4-开头" class="headerlink" title="四、4 开头"></a>四、4 开头</h4><p><strong>4xx(请求错误) 这些状态代码表示请求可能出错，妨碍了服务器的处理</strong></p><p><strong>400</strong> (错误请求) 服务器不理解请求的语法。</p><p><strong>401</strong> (未授权) 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</p><p><strong>403</strong> (禁止) 服务器拒绝请求。</p><p><strong>404</strong> (未找到) 服务器找不到请求的网页。</p><p><strong>405</strong> (方法禁用) 禁用请求中指定的方法。</p><p><strong>406</strong> (不接受) 无法使用请求的内容特性响应请求的网页。</p><p><strong>407</strong> (需要代理授权) 此状态代码与 401(未授权)类似，但指定请求者应当授权使用代理。</p><p><strong>408</strong> (请求超时) 服务器等候请求时发生超时。</p><p><strong>409</strong> (冲突) 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</p><p><strong>410</strong> (已删除) 如果请求的资源已永久删除，服务器就会返回此响应。</p><p><strong>411</strong> (需要有效长度) 服务器不接受不含有效内容长度标头字段的请求。</p><p><strong>412</strong> (未满足前提条件) 服务器未满足请求者在请求中设置的其中一个前提条件。</p><p><strong>413</strong> (请求实体过大) 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</p><p><strong>414</strong> (请求的 URI 过长) 请求的 URI(通常为网址)过长，服务器无法处理。</p><p><strong>415</strong> (不支持的媒体类型) 请求的格式不受请求页面的支持。</p><p><strong>416</strong> (请求范围不符合要求) 如果页面无法提供请求的范围，则服务器会返回此状态代码。</p><p><strong>417</strong> (未满足期望值) 服务器未满足”期望”请求标头字段的要求。</p><hr><h4 id="五、5-开头"><a href="#五、5-开头" class="headerlink" title="五、5 开头"></a>五、5 开头</h4><p><strong>5xx(服务器错误)这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错</strong></p><p><strong>500</strong> (服务器内部错误) 服务器遇到错误，无法完成请求。</p><p><strong>501</strong> (尚未实施) 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</p><p><strong>502</strong> (错误网关) 服务器作为网关或代理，从上游服务器收到无效响应。</p><p><strong>503</strong> (服务不可用) 服务器目前无法使用(由于超载或停机维护)。 通常，这只是暂时状态。</p><p><strong>504</strong> (网关超时) 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</p><p><strong>505</strong> (HTTP 版本不受支持) 服务器不支持请求中所用的 HTTP 协议版本。</p><h4 id="六、适用场景"><a href="#六、适用场景" class="headerlink" title="六、适用场景"></a>六、适用场景</h4><ul><li><p>100：客户端在发送 POST 数据给服务器前，征询服务器情况，看服务器是否处理 POST 的数据，如果不处理，客户端则不上传 POST 数据，如果处理，则 POST 上传数据。常用于 POST 大数据传输</p></li><li><p>206：一般用来做断点续传，或者是视频文件等大文件的加载</p></li><li><p>301：永久重定向会缓存。新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用 301 就重定向到新的域名</p></li><li><p>302：临时重定向不会缓存，常用 于未登陆的用户访问用户中心重定向到登录页面</p></li><li><p>304：协商缓存，告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分</p></li><li><p>400：参数有误，请求无法被服务器识别</p></li><li><p>403：告诉客户端禁止访问该站点或者资源，如在外网环境下，然后访问只有内网 IP 才能访问的时候则返回</p></li><li><p>404：服务器找不到资源时，或者服务器拒绝请求又不想说明理由时</p></li><li><p>503：服务器停机维护时，主动用 503 响应请求或 nginx 设置限速，超过限速，会返回 503</p></li><li><p>504：网关超时</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一、1-开头&quot;&gt;&lt;a href=&quot;#一、1-开头&quot; class=&quot;headerlink&quot; title=&quot;一、1 开头&quot;&gt;&lt;/a&gt;一、1 开头&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1xx(临时响应)表示临时响应并需要请求者继续执行操作的状态代码&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="http" scheme="https://1518277259.github.io/categories/http/"/>
    
    
    <category term="http" scheme="https://1518277259.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="https://1518277259.github.io/2022/04/11/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://1518277259.github.io/2022/04/11/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-04-11T02:24:51.000Z</published>
    <updated>2022-04-11T02:33:56.133Z</updated>
    
    <content type="html"><![CDATA[<p><strong>git branch</strong> 查看本地所有分支<br><br><strong>git status</strong> 查看当前状态<br><br><strong>git commit</strong> 提交 <br><br><strong>git branch -a</strong> 查看所有分支<br><br><strong>git branch -r</strong> 查看远程所有分支<br><br><strong>git commit -am ‘注释’</strong> 提交并添加注释<br><br><strong>git push origin master</strong> 将文件推送到服务器<br><br><strong>git remote show origin</strong> 显示远程库 origin 中的资源<br><br><strong>git checkout –track origin&#x2F;dev</strong> 切换到远程 dev 分支<br><br><strong>git checkout -D master dev</strong> 删除本地库 dev<br><br><strong>git checkout -b dev</strong> 建立一个新的本地分支<br><br><strong>git merge origin&#x2F;dev</strong> 将分支 dev 与当前分支合并<br><br><strong>git checkout dev</strong> 切换成本地分支<br><br><strong>git remote show</strong> 查看远程库<br><br><strong>git add .</strong> 将文件添加到本地库<br><br><strong>git rm 文件名(包括路径)</strong> 从 git 删除指定文件<br></p><p><strong>git clone</strong> 从服务器上将代码拉下来<br><br><strong>git config –list</strong> 看所有用户<br><br><strong>git ls-files</strong> 看已经被提交的<br><br><strong>git log</strong> 看 commit 的日志<br><br><strong>git diff</strong> 查看尚未暂存的更新<br><br><strong>git rm a.a</strong> 移除文件(从暂存区和工作区中删除)<br><br><strong>git rm –cached a.a</strong> 移除文件(只从暂存区中删除)<br><br><strong>git commit -m “remove”</strong> 移除文件(从 Git 中删除)<br><br><strong>git rm -f a.a</strong> 强行移除修改后文件(从暂存区和工作区中删除)<br><br><strong>git diff –cached 或 $ git diff –staged</strong> 查看尚未提交的更新<br><br><strong>git stash push</strong> 将文件给 push 到一个临时空间中<br><br><strong>git stash pop</strong> 将文件从临时空间 pop 下来<br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;git branch&lt;/strong&gt; 查看本地所有分支&lt;br&gt;&lt;br&gt;&lt;strong&gt;git status&lt;/strong&gt; 查看当前状态&lt;br&gt;&lt;br&gt;&lt;strong&gt;git commit&lt;/strong&gt; 提交 &lt;br&gt;&lt;br&gt;&lt;strong&gt;git </summary>
      
    
    
    
    <category term="git" scheme="https://1518277259.github.io/categories/git/"/>
    
    
    <category term="git" scheme="https://1518277259.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Vue脚手架创建</title>
    <link href="https://1518277259.github.io/2022/03/31/Vue%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BA/"/>
    <id>https://1518277259.github.io/2022/03/31/Vue%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BA/</id>
    <published>2022-03-31T07:09:43.000Z</published>
    <updated>2022-03-31T07:10:50.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue是什么"><a href="#Vue是什么" class="headerlink" title="Vue是什么"></a>Vue是什么</h2><p>Vue是一套用于构建用户界面的渐进式Javascript框架</p><h2 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h2><ol><li>采用组件化模式，提高代码复用率，让代码更好维护</li><li>采用声明式编码，让开发人员无需操作DOM，提高开发效率</li><li>使用虚拟DOM和diff算法，尽量复用DOM节点</li></ol><h2 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h2><p>网速原因先配置淘宝镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ol><li>全局安装@vue&#x2F;cli</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><ol start="2"><li><p>切换到你要创建的目录，使用命令行创建项目XXX</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create XXX</span><br></pre></td></tr></table></figure></li><li><p>启动项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm run dev/serve</span><br></pre></td></tr></table></figure></li><li><p>使用命令查看项目的webpack打包配置</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue inspect &gt; output.js</span><br></pre></td></tr></table></figure><h2 id="Vue3-使用Vite创建"><a href="#Vue3-使用Vite创建" class="headerlink" title="Vue3 使用Vite创建"></a>Vue3 使用Vite创建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 创建工程</span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"></span><br><span class="line">// 进入工程目录</span><br><span class="line">cd &lt;project-name&gt;</span><br><span class="line"></span><br><span class="line">// 安装依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">// 运行</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue是什么&quot;&gt;&lt;a href=&quot;#Vue是什么&quot; class=&quot;headerlink&quot; title=&quot;Vue是什么&quot;&gt;&lt;/a&gt;Vue是什么&lt;/h2&gt;&lt;p&gt;Vue是一套用于构建用户界面的渐进式Javascript框架&lt;/p&gt;
&lt;h2 id=&quot;Vue的特点&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="vue" scheme="https://1518277259.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://1518277259.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>元素居中</title>
    <link href="https://1518277259.github.io/2022/03/29/%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/"/>
    <id>https://1518277259.github.io/2022/03/29/%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/</id>
    <published>2022-03-29T11:05:26.000Z</published>
    <updated>2022-03-29T11:13:04.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="1-行内元素水平居中"><a href="#1-行内元素水平居中" class="headerlink" title="1.行内元素水平居中"></a>1.行内元素水平居中</h3><p><strong>利用 text-align: center 可以实现在块级元素内部的行内元素水平居中。</strong> 此方法对inline、inline-block、inline-table和inline-flex元素水平居中都有效。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">        //在父容器设置</span><br><span class="line">        <span class="attribute">text-align</span>:center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此外，如果块级元素内部包着也是一个块级元素，<strong>我们可以先将其由块级元素改变为行内块元素，再通过设置行内块元素居中以达到水平居中。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>:center;  </span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-块级元素的水平居中"><a href="#2-块级元素的水平居中" class="headerlink" title="2.块级元素的水平居中"></a>2.块级元素的水平居中</h3><p>①、 将该块级元素左右外边距margin-left和margin-right设置为auto</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;//确保该块级元素定宽</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②、使用table+margin</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;child&quot;&gt;Demo&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>③、使用absolute+transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;child&quot;&gt;Demo&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>④、使用flex+justify-content</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;child&quot;&gt;Demo&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>:center;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>⑤、使用flex+margin</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;child&quot;&gt;Demo&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、多块级元素水平居中"><a href="#3、多块级元素水平居中" class="headerlink" title="3、多块级元素水平居中"></a>3、多块级元素水平居中</h3><p>①、利用flex布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②、利用inline-block</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、浮动元素水平居中"><a href="#4、浮动元素水平居中" class="headerlink" title="4、浮动元素水平居中"></a>4、浮动元素水平居中</h3><p>①、定宽的非浮动元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>:relative;</span><br><span class="line">   <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">margin-left</span>:-<span class="number">250px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">span</span> class=&quot;child&quot; style=&quot;<span class="attribute">float</span>: left;<span class="attribute">width</span>: <span class="number">500px</span>;&quot;&gt;我是要居中的浮动元素&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p>②、不定宽的浮动元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;我是浮动的&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;我也是居中的&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③、通用办法flex布局(不管是定宽还是不定宽)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">justify-content</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chlid</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;//有无宽度不影响居中</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">span</span> class=&quot;chlid&quot;&gt;我是要居中的浮动元素&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5、绝对定位元素水平居中"><a href="#5、绝对定位元素水平居中" class="headerlink" title="5、绝对定位元素水平居中"></a>5、绝对定位元素水平居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;child&quot;&gt;让绝对定位的元素水平居中对齐。&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  <span class="selector-class">.parent</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>:relative;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="selector-class">.child</span>&#123;</span><br><span class="line">         <span class="attribute">position</span>: absolute; <span class="comment">/*绝对定位*/</span></span><br><span class="line">         <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">         <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">         <span class="attribute">background</span>: yellow;</span><br><span class="line">         <span class="attribute">margin</span>: <span class="number">0</span> auto; <span class="comment">/*水平居中*/</span></span><br><span class="line">         <span class="attribute">left</span>: <span class="number">0</span>; <span class="comment">/*此处不能省略，且为0*/</span></span><br><span class="line">         <span class="attribute">right</span>: <span class="number">0</span>;<span class="comment">/*此处不能省略，且为0*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="1-单行内联元素垂直居中"><a href="#1-单行内联元素垂直居中" class="headerlink" title="1.单行内联元素垂直居中"></a>1.单行内联元素垂直居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;box&quot;&gt;</span><br><span class="line">     &lt;<span class="selector-tag">span</span>&gt;单行内联元素垂直居中。&lt;/<span class="selector-tag">span</span>&gt;。</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"> <span class="selector-id">#box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#f69c55</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-多行内联元素垂直居中"><a href="#2-多行内联元素垂直居中" class="headerlink" title="2.多行内联元素垂直居中"></a>2.多行内联元素垂直居中</h3><p>①、利用flex布局（flex）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;Dance like nobody is watching, <span class="selector-tag">code</span> like everybody is.    </span><br><span class="line">    Dance like nobody is watching, <span class="selector-tag">code</span> like everybody is.    </span><br><span class="line">    Dance like nobody is watching, <span class="selector-tag">code</span> like everybody is.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.parent</span> &#123; </span><br><span class="line">        <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">flex-direction</span>: column;</span><br><span class="line">        <span class="attribute">justify-content</span>: center;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#f69c55</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>②、利用表布局（table）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=&quot;child&quot;&gt;The more technology you learn, the more you realize how little you know.</span><br><span class="line">    The more technology you learn, the more you realize how little you know.</span><br><span class="line">    The more technology you learn, the more you realize how little you know.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"> &lt;style&gt;</span><br><span class="line">    <span class="selector-class">.parent</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: table;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#f69c55</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.child</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: table-cell;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-块级元素垂直居中"><a href="#3-块级元素垂直居中" class="headerlink" title="3 块级元素垂直居中"></a>3 块级元素垂直居中</h3><p>①、使用absolute+负margin(已知高度宽度)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;child&quot;&gt;固定高度的块级元素垂直居中。&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>②、使用absolute+transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;child&quot;&gt;未知高度的块级元素垂直居中。&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>③、使用flex+align-items</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;child&quot;&gt;未知高度的块级元素垂直居中。&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">align-items</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>④、使用table-cell+vertical-align</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;child&quot;&gt;Demo&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="1、绝对定位与负边距实现（已知高度宽度）"><a href="#1、绝对定位与负边距实现（已知高度宽度）" class="headerlink" title="1、绝对定位与负边距实现（已知高度宽度）"></a>1、绝对定位与负边距实现（已知高度宽度）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// css部分</span><br><span class="line"> <span class="selector-id">#container</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="selector-id">#center</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">margin</span>: -<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">// <span class="selector-tag">html</span>部分(这部分不做变化,下面例子直接共用)</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> id=&#x27;container&#x27;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> id=&#x27;center&#x27; style=&quot;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background-color</span>: <span class="number">#666</span><span class="string">&quot;&gt;center&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="2、绝对定位与margin-auto（已知高度宽度）"><a href="#2、绝对定位与margin-auto（已知高度宽度）" class="headerlink" title="2、绝对定位与margin:auto（已知高度宽度）"></a>2、绝对定位与margin:auto（已知高度宽度）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">     <span class="attribute">position</span>: relative;</span><br><span class="line">     <span class="attribute">height</span>:<span class="number">100px</span>;//必须有个高度</span><br><span class="line">   &#125;</span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">     <span class="attribute">position</span>: absolute;</span><br><span class="line">     <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">margin</span>: auto;//注意此处的写法</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3、绝对定位-CSS3-未知元素的高宽"><a href="#3、绝对定位-CSS3-未知元素的高宽" class="headerlink" title="3、绝对定位+CSS3(未知元素的高宽)"></a>3、绝对定位+CSS3(未知元素的高宽)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、flex布局"><a href="#4、flex布局" class="headerlink" title="4、flex布局"></a>4、flex布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;//直接在父容器设置即可</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100vh</span>;//必须有高度</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">   <span class="attribute">justify-content</span>: center;</span><br><span class="line">   <span class="attribute">align-items</span>: center;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5、flex-x2F-grid与margin-auto-最简单写法"><a href="#5、flex-x2F-grid与margin-auto-最简单写法" class="headerlink" title="5、flex&#x2F;grid与margin:auto(最简单写法)"></a>5、flex&#x2F;grid与margin:auto(最简单写法)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;//必须有高度</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h2&gt;&lt;h3 id=&quot;1-行内元素水平居中&quot;&gt;&lt;a href=&quot;#1-行内元素水平居中&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="CSS" scheme="https://1518277259.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://1518277259.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>实现三栏布局的方法</title>
    <link href="https://1518277259.github.io/2022/03/29/%E5%AE%9E%E7%8E%B0%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://1518277259.github.io/2022/03/29/%E5%AE%9E%E7%8E%B0%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-03-29T08:53:29.000Z</published>
    <updated>2022-03-29T08:54:34.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Layout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span> * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.layout</span> <span class="selector-tag">article</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--浮动布局  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout float&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.layout</span><span class="selector-class">.float</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.layout</span><span class="selector-class">.float</span> <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.layout</span><span class="selector-class">.float</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-right-center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> // 右栏部分要写在中间内容之前</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>浮动解决方案<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案； 3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案； 5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>浮动布局的优点就是比较简单，兼容性也比较好。但浮动布局是有局限性的，浮动元素脱离文档流，要做清除浮动，这个处理不好的话，会带来很多问题，比如父容器高度塌陷等。</strong></p><h2 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.left-center-right</span>&gt;<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;//三块都是绝对定位</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">right</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">300px</span>;//离左右各三百</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-center-right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>绝对定位解决方案<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案； 3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案； 5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>绝对定位布局优点就是快捷，设置很方便，而且也不容易出问题。缺点就是，容器脱离了文档流，后代元素也脱离了文档流，高度未知的时候，会有问题，这就导致了这种方法的有效性和可使用性是比较差的。</strong></p><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.left-center-right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-center-right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>flexbox解决方案<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案； 3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案； 5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>lexbox布局是css3里新出的一个，它就是为了解决上述两种方式的不足出现的，是比较完美的一个。目前移动端的布局也都是用flexbox。 flexbox的缺点就是IE10开始支持，但是IE10的是-ms形式的。</strong></p><h2 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.left-center-right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.left-center-right</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-center-right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>表格布局解决方案<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案； 3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案； 5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>表格布局的兼容性很好(见下图)，在flex布局不兼容的时候，可以尝试表格布局。当内容溢出时会自动撑开父元素。</strong></p><p><strong>表格布局也是有缺陷:①无法设置栏边距；②对seo不友好；③当其中一个单元格高度超出的时候，两侧的单元格也是会跟着一起变高的，然而有时候这并不是我们想要的效果。</strong></p><h2 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.left-center-right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">grid-template-columns</span>: <span class="number">300px</span> auto <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">grid-template-rows</span>: <span class="number">150px</span>; //行高</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-center-right&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>网格布局解决方案<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案； 3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案； 5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>CSS Grid是创建网格布局最强大和最简单的工具。就像表格一样，网格布局可以让Web设计师根据元素按列或行对齐排列，但他和表格不同，网格布局没有内容结构，从而使各种布局不可能与表格一样。例如，一个网格布局中的子元素都可以定位自己的位置，这样他们可以重叠和类似元素定位。但网格布局的兼容性不好。IE10+上支持，而且也仅支持部分属性。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浮动布局&quot;&gt;&lt;a href=&quot;#浮动布局&quot; class=&quot;headerlink&quot; title=&quot;浮动布局&quot;&gt;&lt;/a&gt;浮动布局&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="CSS" scheme="https://1518277259.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://1518277259.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="https://1518277259.github.io/2022/03/29/Flex%E5%B8%83%E5%B1%80/"/>
    <id>https://1518277259.github.io/2022/03/29/Flex%E5%B8%83%E5%B1%80/</id>
    <published>2022-03-29T06:37:18.000Z</published>
    <updated>2022-03-29T06:41:36.594Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Flex-基本概念"><a href="#Flex-基本概念" class="headerlink" title="Flex 基本概念"></a>Flex 基本概念</h3><p>在 flex 容器中默认存在两条轴，水平主轴(main axis) 和垂直的交叉轴(cross axis)，这是默认的设置，当然你可以通过修改使垂直方向变为主轴，水平方向变为交叉轴</p><h3 id="Flex-容器"><a href="#Flex-容器" class="headerlink" title="Flex 容器"></a>Flex 容器</h3><p>实现 flex 布局需要先指定一个容器，任何一个容器都可以被指定为 flex 布局，这样容器内部的元素就可以使用 flex 来进行布局。如果你使用块元素如 div，你就可以使用 flex，而如果你使用行内元素，你可以使用 inline-flex。</p><p><strong>需要注意的是：当时设置 flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。</strong></p><h3 id="Flex属性"><a href="#Flex属性" class="headerlink" title="Flex属性"></a>Flex属性</h3><h4 id="1-flex-direction"><a href="#1-flex-direction" class="headerlink" title="1. flex-direction"></a>1. flex-direction</h4><p>决定主轴的方向(即项目的排列方向)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    flex-direction: row | row-reverse | column | column-reverse;</span><br><span class="line"> &#125;</span><br><span class="line"> row，主轴为水平方向，起点在左端。</span><br><span class="line">row-reverse：主轴为水平方向，起点在右端</span><br><span class="line">column：主轴为垂直方向，起点在上沿</span><br><span class="line">column-reverse：主轴为垂直方向，起点在下沿</span><br></pre></td></tr></table></figure><h4 id="2-flex-wrap"><a href="#2-flex-wrap" class="headerlink" title="2. flex-wrap:"></a>2. flex-wrap:</h4><p>决定容器内项目是否可换行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">默认值：nowrap 不换行，即当主轴尺寸固定时，当空间不足时，项目尺寸会随之调整而并不会挤到下一行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wrap：项目主轴总尺寸超出容器时换行，第一行在上方；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wrap-reverse：换行，第一行在下方</span><br></pre></td></tr></table></figure><h4 id="3-flex-flow"><a href="#3-flex-flow" class="headerlink" title="3. flex-flow:"></a>3. flex-flow:</h4><p>flex-direction 和 flex-wrap 的简写形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.container &#123;</span><br><span class="line">    flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">默认值为: row nowrap，感觉没什么卵用，老老实实分开写就好了。这样就不用记住这个属性了。</span><br></pre></td></tr></table></figure><h4 id="4-justify-content："><a href="#4-justify-content：" class="headerlink" title="4. justify-content："></a>4. justify-content：</h4><p>定义了项目在主轴的对齐方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    justify-content: flex-start | flex-end | center | space-between | space-around;&#125;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">默认值: flex-start 左对齐</span><br><span class="line"></span><br><span class="line">flex-end：右对齐</span><br><span class="line"></span><br><span class="line">center：居中</span><br><span class="line"></span><br><span class="line">space-between：两端对齐，项目之间的间隔相等，即剩余空间等分成间隙。</span><br><span class="line"></span><br><span class="line">space-around：每个项目两侧的间隔相等，所以项目之间的间隔比项目与边缘的间隔大一倍。</span><br></pre></td></tr></table></figure><h4 id="5-align-items"><a href="#5-align-items" class="headerlink" title="5. align-items:"></a>5. align-items:</h4><p>定义了项目在交叉轴上的对齐方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    align-items: flex-start | flex-end | center | baseline | stretch;&#125;</span><br><span class="line">    </span><br><span class="line">flex-start：交叉轴的起点对齐</span><br><span class="line"></span><br><span class="line">flex-end：交叉轴的终点对齐</span><br><span class="line"></span><br><span class="line">center：交叉轴的中点对齐</span><br><span class="line"></span><br><span class="line">baseline: 项目的第一行文字的基线对齐</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-align-content"><a href="#6-align-content" class="headerlink" title="6. align-content:"></a>6. align-content:</h4><p>定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    align-content: flex-start | flex-end | center | space-between | space-around | stretch;&#125;</span><br><span class="line">    </span><br><span class="line">flex-start：轴线全部在交叉轴上的起点对齐</span><br><span class="line"></span><br><span class="line">flex-end：轴线全部在交叉轴上的终点对齐</span><br><span class="line"></span><br><span class="line">center：轴线全部在交叉轴上的中间对齐</span><br><span class="line"></span><br><span class="line">space-between：轴线两端对齐，之间的间隔相等，即剩余空间等分成间隙。</span><br><span class="line"></span><br><span class="line">space-around：每个轴线两侧的间隔相等，所以轴线之间的间隔比轴线与边缘的间隔大一倍。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Flex-基本概念&quot;&gt;&lt;a href=&quot;#Flex-基本概念&quot; class=&quot;headerlink&quot; title=&quot;Flex 基本概念&quot;&gt;&lt;/a&gt;Flex 基本概念&lt;/h3&gt;&lt;p&gt;在 flex 容器中默认存在两条轴，水平主轴(main axis) 和垂直的交叉轴(</summary>
      
    
    
    
    <category term="CSS" scheme="https://1518277259.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://1518277259.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS高度塌陷</title>
    <link href="https://1518277259.github.io/2022/03/29/CSS%E9%AB%98%E5%BA%A6%E5%A1%8C%E9%99%B7/"/>
    <id>https://1518277259.github.io/2022/03/29/CSS%E9%AB%98%E5%BA%A6%E5%A1%8C%E9%99%B7/</id>
    <published>2022-03-29T06:13:43.000Z</published>
    <updated>2022-03-29T11:14:13.490Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-什么是高度塌陷"><a href="#1-什么是高度塌陷" class="headerlink" title="1.什么是高度塌陷"></a>1.什么是高度塌陷</h4><p>当父元素不设置高度的时候，靠子元素撑大；当子元素浮动后，父元素的高度就会塌陷；父元素下面的元素就会向上移动，导致整个页面混乱。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box1&quot;&gt;</span><br><span class="line">&lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">border: 10px red solid;</span><br><span class="line">    &#125;</span><br><span class="line">.box2 &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: blue;</span><br><span class="line">float: left;</span><br><span class="line">    &#125;</span><br><span class="line">.box3 &#123;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h4><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><p>给父元素设置高度，固定高度后父元素的高度无法适应子元素的高度。<strong>弊端：</strong> 不能让元素自适应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">border: 10px red solid;</span><br><span class="line">height:100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h5><p>给父元素设置overflow：hidden，解决高度塌陷并实现自适应，<strong>弊端：</strong> 只要里面的内容或元素超出父元素以外就会被隐藏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">border: 10px red solid;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h5><p>在浮动元素下面添加一个空白元素，并给它设置一哈属性；<strong>弊端：</strong> 会添加很多空标记，增加结构负担，产生代码冗余</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box1 &#123;</span><br><span class="line">border: 10px red solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box2 &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: blue;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clear_fix&#123;   /*空白div的属性*/</span><br><span class="line">clear:both; /*清除两侧浮动*/</span><br><span class="line">height:0;</span><br><span class="line">overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box1&quot;&gt;</span><br><span class="line">&lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;clear_fix&quot;&gt;&lt;/div&gt; /*添加空白div*/</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h5><p>给父元素添加display:table；让父元素转换元素类型和表格一样<strong>弊端：</strong> 会改变当前元素的元素类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box1 &#123;</span><br><span class="line">border: 10px red solid;</span><br><span class="line">display: table; /* 改变元素类型为表格 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box2 &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: blue;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box1&quot;&gt;</span><br><span class="line">&lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h5 id="方法五：万能清除法"><a href="#方法五：万能清除法" class="headerlink" title="方法五：万能清除法"></a>方法五：万能清除法</h5><p>通过after伪类元素添加一个空白的块元素，css添加下列属性，并给要清除的div加上clear_fix的类名，无副作用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box1 &#123;</span><br><span class="line">border: 10px red solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box2 &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: blue;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clear_fix:after &#123; /* 要加的属性 */</span><br><span class="line">content: &quot;&quot;; /* 添加内容 */</span><br><span class="line">clear: both; /* 清楚两侧浮动 */</span><br><span class="line">display: block; /* 转换元素类型为块元素 */</span><br><span class="line">height: 0;</span><br><span class="line">overflow: hidden; /* 溢出隐藏属性 */</span><br><span class="line">visibility: hidden;/* 隐藏属性 */</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box1 clear_fix&quot;&gt;</span><br><span class="line">&lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-什么是高度塌陷&quot;&gt;&lt;a href=&quot;#1-什么是高度塌陷&quot; class=&quot;headerlink&quot; title=&quot;1.什么是高度塌陷&quot;&gt;&lt;/a&gt;1.什么是高度塌陷&lt;/h4&gt;&lt;p&gt;当父元素不设置高度的时候，靠子元素撑大；当子元素浮动后，父元素的高度就会塌陷；父元素</summary>
      
    
    
    
    <category term="CSS" scheme="https://1518277259.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://1518277259.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
